/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 07:21:09 GMT 2020
 */

package org.jboss.netty.handler.codec.frame;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.net.SocketAddress;
import java.net.SocketOption;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.channels.GatheringByteChannel;
import java.nio.channels.ScatteringByteChannel;
import java.nio.channels.SocketChannel;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ByteBufferBackedChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.CompositeChannelBuffer;
import org.jboss.netty.buffer.DirectChannelBufferFactory;
import org.jboss.netty.buffer.DuplicatedChannelBuffer;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.jboss.netty.buffer.HeapChannelBufferFactory;
import org.jboss.netty.buffer.LittleEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ReadOnlyChannelBuffer;
import org.jboss.netty.buffer.SlicedChannelBuffer;
import org.jboss.netty.buffer.TruncatedChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ChannelState;
import org.jboss.netty.channel.DownstreamChannelStateEvent;
import org.jboss.netty.channel.DownstreamMessageEvent;
import org.jboss.netty.channel.UpstreamChannelStateEvent;
import org.jboss.netty.channel.UpstreamMessageEvent;
import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LengthFieldBasedFrameDecoder_ESTest extends LengthFieldBasedFrameDecoder_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      int int2 = (-667);
      int int3 = (-292);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int4 = 255;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(int4);
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(littleEndianHeapChannelBuffer0);
      ByteOrder byteOrder0 = duplicatedChannelBuffer0.order();
      int int5 = 4;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(byteOrder0, int5);
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteOrder0, int5);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      int int0 = 2870;
      int int1 = 72;
      int int2 = (-2051);
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      int int3 = 840;
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int3, int2, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // initialBytesToStrip must be a non-negative integer: -2051
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      int int0 = 59;
      int int1 = 2;
      int int2 = 8;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2, int0, int0);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int3 = 255;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelBuffer channelBuffer0 = null;
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel0, channelBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1232);
      int int2 = (-1417);
      int int3 = 0;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1, int2, int3, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 4;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0);
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (4) must be equal to or greater than lengthFieldOffset (4) + lengthFieldLength (4).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = 999;
      int int1 = (-1886);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -1886
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = 593;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0);
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 593
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      int int0 = 2;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0);
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (2) must be equal to or greater than lengthFieldOffset (2) + lengthFieldLength (2).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)4;
      byteArray0[3] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byte1;
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelState channelState0 = ChannelState.BOUND;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      int int2 = 831;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int2, directChannelBufferFactory0);
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, dynamicChannelBuffer0);
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(channel0, channelState0, object0);
      lengthFieldBasedFrameDecoder0.channelClosed(channelHandlerContext0, upstreamChannelStateEvent0);
      byte byte3 = (byte)99;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-34);
      byteArray0[4] = byte4;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[8] = byte6;
      byte byte7 = (byte) (-15);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-22);
      byteArray0[8] = byte8;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(littleEndianHeapChannelBuffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(byte5);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      littleEndianHeapChannelBuffer0.writerIndex((int) byte0);
      ByteBuffer byteBuffer1 = byteBuffer0.putShort((short) byte7);
      int int3 = byteBufferBackedChannelBuffer0.readUnsignedShort();
      int int4 = 625;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel1, littleEndianHeapChannelBuffer0);
      int int5 = 0;
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object2 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext2, channel2, readOnlyChannelBuffer0);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(byteBufferBackedChannelBuffer0, int4, int5);
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)4;
      byteArray0[3] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byteArray0[3];
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      byte byte3 = (byte)99;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-34);
      byteArray0[4] = byte0;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0[5]);
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.readSlice(byteArray0[5]);
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
      byteArray0[8] = byte6;
      byte byte7 = (byte) (-15);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-22);
      byteArray0[8] = byte8;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(littleEndianHeapChannelBuffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(byte5);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ByteBuffer byteBuffer1 = byteBuffer0.putShort((short) byte7);
      int int2 = byteBufferBackedChannelBuffer0.readUnsignedShort();
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel1, littleEndianHeapChannelBuffer0);
      int int3 = 22;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(byteBufferBackedChannelBuffer0, byteArray0[8], int3);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)4;
      byteArray0[3] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byteArray0[3];
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      byte byte3 = (byte)99;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-34);
      byteArray0[4] = byte0;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0[5]);
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.readSlice(byteArray0[5]);
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
      byteArray0[8] = byte6;
      byte byte7 = (byte) (-15);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-22);
      byteArray0[8] = byte8;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(littleEndianHeapChannelBuffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(byte5);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ByteBuffer byteBuffer1 = byteBuffer0.putShort((short) byte7);
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = null;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer2 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext1, channel1, bigEndianHeapChannelBuffer1);
      int int2 = byteBufferBackedChannelBuffer0.readUnsignedShort();
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext2, channel2, littleEndianHeapChannelBuffer0);
      int int3 = 22;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(byteBufferBackedChannelBuffer0, byteArray0[8], int3);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0);
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      int int0 = 32;
      int int1 = 2031;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int0, int1);
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 32
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1622);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1);
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      int int2 = 56;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1, int2, int1);
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      int int1 = 1187;
      int int2 = (-3931);
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int1, int2, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      int int0 = 2556;
      int int1 = 2938;
      int int2 = (-3049);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int1, int2);
      } catch(IllegalArgumentException e) {
         //
         // initialBytesToStrip must be a non-negative integer: -3049
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      int int0 = 64;
      int int1 = (-3820);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -3820
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      int int0 = 59;
      int int1 = 2;
      int int2 = 8;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2, int0, int0);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelBuffer channelBuffer0 = null;
      int int3 = 255;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, int1, int3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byte1;
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      byte byte3 = (byte)99;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-34);
      byteArray0[4] = byte4;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-15);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-22);
      byteArray0[8] = byte8;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(littleEndianHeapChannelBuffer0);
      // Undeclared exception!
      try { 
        readOnlyChannelBuffer0.toByteBuffer((int) byteArray0[1], (int) byteArray0[1]);
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      int int0 = 3733;
      int int1 = 4;
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1, int0, int0, boolean0);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int2 = 2944;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int2);
      int int3 = (-946);
      // Undeclared exception!
      try { 
        bigEndianHeapChannelBuffer0.copy(int0, int3);
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.BigEndianHeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)4;
      byteArray0[3] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byteArray0[3];
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      byte byte3 = (byte)99;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-34);
      byteArray0[4] = byte4;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[8] = byte6;
      byte byte7 = (byte) (-15);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-22);
      byteArray0[8] = byte8;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(littleEndianHeapChannelBuffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(byte5);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      int int2 = 625;
      int int3 = 0;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(byteBufferBackedChannelBuffer0, int2, int3);
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      int int0 = 573;
      int int1 = 7;
      int int2 = 4;
      int int3 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2, int3, int1);
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      int int4 = 3508;
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(int4);
      int int5 = (-39);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, int0, int5);
      } catch(IllegalArgumentException e) {
         //
         // capacity: -39
         //
         verifyException("org.jboss.netty.buffer.DirectChannelBufferFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)4;
      byteArray0[3] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byteArray0[3];
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      byte byte3 = (byte)99;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-34);
      byteArray0[4] = byte4;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[8] = byte6;
      byte byte7 = (byte) (-15);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-22);
      byteArray0[8] = byte8;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(littleEndianHeapChannelBuffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(byte5);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ByteBuffer byteBuffer1 = byteBuffer0.putShort((short) byte7);
      int int2 = byteBufferBackedChannelBuffer0.readUnsignedShort();
      int int3 = 625;
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, littleEndianHeapChannelBuffer0);
      int int4 = 0;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(byteBufferBackedChannelBuffer0, int3, int4);
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byte1;
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      byte byte3 = (byte)99;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-34);
      byteArray0[4] = byte4;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-15);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-22);
      byteArray0[8] = byte8;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byte2);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(littleEndianHeapChannelBuffer0);
      ByteBuffer byteBuffer0 = readOnlyChannelBuffer0.toByteBuffer((int) byteArray0[1], (int) byteArray0[1]);
      int int2 = 63;
      int int3 = (-562);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(littleEndianHeapChannelBuffer0, int2, int3);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)4;
      byteArray0[3] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byte1;
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      byte byte3 = (byte)99;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-34);
      byteArray0[4] = byte4;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[8] = byte6;
      byte byte7 = (byte) (-15);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-22);
      byteArray0[8] = byte8;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(littleEndianHeapChannelBuffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(byte5);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      littleEndianHeapChannelBuffer0.writerIndex((int) byte0);
      ByteBuffer byteBuffer1 = byteBuffer0.putShort((short) byte7);
      int int2 = byteBufferBackedChannelBuffer0.readUnsignedShort();
      int int3 = 625;
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, littleEndianHeapChannelBuffer0);
      int int4 = 0;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel1, readOnlyChannelBuffer0);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(byteBufferBackedChannelBuffer0, int3, int4);
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)4;
      byteArray0[3] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byteArray0[3];
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      byte byte3 = (byte)99;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-34);
      byteArray0[4] = byte4;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[8] = byte6;
      byte byte7 = (byte) (-15);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-22);
      byteArray0[8] = byte8;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(littleEndianHeapChannelBuffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(byte5);
      littleEndianHeapChannelBuffer0.resetWriterIndex();
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ByteBuffer byteBuffer1 = byteBuffer0.putShort((short) byte7);
      int int2 = byteBufferBackedChannelBuffer0.readUnsignedShort();
      int int3 = 625;
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, littleEndianHeapChannelBuffer0);
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      try { 
        MockInetAddress.getByAddress(byteArray0);
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [0, 4, 46, 99, -34, 82, 0, -15, -22]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelState channelState0 = ChannelState.CONNECTED;
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(channel0, channelState0, channelState0);
      lengthFieldBasedFrameDecoder0.channelClosed(channelHandlerContext0, upstreamChannelStateEvent0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)4;
      byteArray0[3] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byteArray0[3];
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      byte byte3 = (byte)99;
      byte byte4 = (byte) (-34);
      byteArray0[4] = byte4;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[8] = byte6;
      byte byte7 = (byte) (-15);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-22);
      byteArray0[8] = byte8;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(littleEndianHeapChannelBuffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(byte5);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ByteBuffer byteBuffer1 = byteBuffer0.putShort((short) byte7);
      int int2 = byteBufferBackedChannelBuffer0.readUnsignedShort();
      int int3 = 625;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int4 = 1790;
      int int5 = 3052;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(littleEndianHeapChannelBuffer0, int4, int5);
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)4;
      byteArray0[3] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byte1;
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      byte byte3 = (byte)99;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-34);
      byteArray0[4] = byte4;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[8] = byte6;
      byte byte7 = (byte) (-15);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-22);
      byteArray0[8] = byte8;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(littleEndianHeapChannelBuffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(byte5);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      littleEndianHeapChannelBuffer0.writerIndex((int) byte0);
      ByteBuffer byteBuffer1 = byteBuffer0.putShort((short) byte7);
      int int2 = byteBufferBackedChannelBuffer0.readUnsignedShort();
      int int3 = 625;
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, littleEndianHeapChannelBuffer0);
      int int4 = 0;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(byteBufferBackedChannelBuffer0, byteArray0[4], int3);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)4;
      byteArray0[3] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byteArray0[3];
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      byte byte3 = (byte)99;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-34);
      byteArray0[4] = byte0;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0[5]);
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.readSlice(byteArray0[5]);
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
      byteArray0[8] = byte6;
      byte byte7 = (byte) (-15);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-22);
      byteArray0[8] = byte8;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(littleEndianHeapChannelBuffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(byte5);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ByteBuffer byteBuffer1 = byteBuffer0.putShort((short) byte7);
      int int2 = byteBufferBackedChannelBuffer0.readUnsignedShort();
      int int3 = 625;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel1, littleEndianHeapChannelBuffer0);
      int int4 = 22;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(byteBufferBackedChannelBuffer0, int3, int4);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
