/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 18:37:04 GMT 2020
 */

package org.webbitserver.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Enumeration;
import java.util.Map;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.webbitserver.HttpRequest;
import org.webbitserver.WebSocket;
import org.webbitserver.WebSocketConnection;
import org.webbitserver.WebSocketHandler;
import org.webbitserver.handler.ReconnectingWebSocketHandler;
import org.webbitserver.netty.WebSocketClient;
import org.webbitserver.netty.contrib.EventSourceMessage;
import org.webbitserver.stub.StubConnection;
import org.webbitserver.stub.StubHttpRequest;
import org.webbitserver.wrapper.HttpRequestWrapper;
import org.webbitserver.wrapper.WebSocketConnectionWrapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketClient_ESTest extends WebSocketClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      URI uRI2 = MockURI.parseServerAuthority(uRI1);
      WebSocketHandler webSocketHandler0 = null;
      int int0 = 439;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      String string0 = "";
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, string0);
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      MockThread mockThread2 = new MockThread(mockThread1, string0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread2, scheduledThreadPoolExecutor0);
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI2, webSocketHandler0, scheduledThreadPoolExecutor0);
      String string1 = " => ";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(string1);
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "s";
      String string1 = "HTTP/1.0";
      int int0 = 0;
      String string2 = "?ERrq";
      String string3 = "";
      String string4 = "[null channel]";
      try { 
        MockURI.URI(string0, string1, string0, int0, string2, string3, string4);
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: s://HTTP%2F1.0@s:0%3FERrq?#[null%20channel]
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "Ht)=B;RfV)F";
          URI uRI0 = MockURI.create(string0);
          URI uRI1 = MockURI.normalize(uRI0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
          WebSocketClient webSocketClient1 = webSocketClient0.start();
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
          ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
          pipedInputStream0.close();
          MockThread mockThread0 = new MockThread(threadGroup0, string0);
          Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
          WebSocket webSocket0 = webSocketClient1.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
          // Undeclared exception!
          try { 
            webSocketClient0.setupSsl(sequenceInputStream0, string0);
          } catch(RuntimeException e) {
             //
             // java.io.IOException: Pipe not connected
             //
             verifyException("org.webbitserver.helpers.SslFactory", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.aFileURI;
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          StubConnection stubConnection0 = new StubConnection();
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, stubConnection0);
          InputStream inputStream0 = null;
          String string0 = "+<";
          WebSocketClient webSocketClient1 = webSocketClient0.setupSsl(inputStream0, string0);
          long long0 = 0L;
          String string1 = "";
          WebSocketClient webSocketClient2 = webSocketClient1.setupSsl(inputStream0, string1);
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient1, long0);
          WebSocketConnectionWrapper webSocketConnectionWrapper0 = new WebSocketConnectionWrapper(stubConnection0);
          WebSocketConnectionWrapper webSocketConnectionWrapper1 = webSocketConnectionWrapper0.underlyingControl((WebSocketConnection) stubConnection0);
          String string2 = "";
          WebSocketConnectionWrapper webSocketConnectionWrapper2 = webSocketConnectionWrapper1.data(string2, (Object) webSocketClient1);
          WebSocketConnectionWrapper webSocketConnectionWrapper3 = webSocketConnectionWrapper2.send(string0);
          WebSocketConnectionWrapper webSocketConnectionWrapper4 = webSocketConnectionWrapper3.ping(string0);
          reconnectingWebSocketHandler0.onClose(webSocketConnectionWrapper3);
          WebSocketClient webSocketClient3 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, stubConnection0);
          WebSocketClient webSocketClient4 = webSocketClient0.start();
          Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
          WebSocket webSocket0 = webSocketClient3.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      WebSocket webSocket0 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      long long0 = (-1634L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      File file0 = null;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "estimatedLength: ";
      int int0 = (-710);
      String string1 = "org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler$2";
      String string2 = "\"/L{";
      try { 
        MockURI.URI(string0, string0, string0, int0, string1, string2, string0);
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: estimatedLength: ://estimatedLength:%20@[estimatedLength: ]:-710org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler$2?%22/L%7B#estimatedLength:%20
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "9-$,";
      String string1 = "";
      String string2 = "org.jboss.netty.channel.socket.oio.OioAcceptedSocketChannel";
      try { 
        MockURI.URI(string0, string1, string2, string2);
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 9-$,://org.jboss.netty.channel.socket.oio.OioAcceptedSocketChannel#org.jboss.netty.channel.socket.oio.OioAcceptedSocketChannel
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "D6!.s)Gw";
      String string1 = "jfo(2J'{zy(<mK";
      String string2 = "Ex^\"0BfC#";
      try { 
        MockURI.URI(string0, string1, string2, string2);
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: D6!.s)Gw://jfo(2J'{zy(<mKEx%5E%220BfC%23#Ex%5E%220BfC%23
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      URI uRI2 = MockURI.parseServerAuthority(uRI1);
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI2, webSocketHandler0);
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      long long0 = 0L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      int int0 = 0;
      int int1 = 776;
      long long1 = 779L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int1, long1, timeUnit0, linkedBlockingQueue0, threadFactory0);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, threadPoolExecutor0);
      // Undeclared exception!
      try { 
        webSocketClient1.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketHandler webSocketHandler1 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler1, forkJoinPool0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      String string0 = "";
      URI uRI1 = MockURI.resolve(uRI0, string0);
      URI uRI2 = MockURI.relativize(uRI1, uRI0);
      URI uRI3 = MockURI.normalize(uRI2);
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI3, webSocketHandler0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = null;
      WebSocket webSocket0 = webSocketClient0.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
      long long0 = (-394L);
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = null;
          URI uRI0 = MockURI.URI(string0, string0, string0);
          URI uRI1 = MockURI.resolve(uRI0, uRI0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
          long long0 = (-231L);
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
          ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0, forkJoinPool0);
          // Undeclared exception!
          try { 
            webSocketClient1.start();
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      URI uRI0 = MockURI.URI(string0);
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      URI uRI2 = MockURI.parseServerAuthority(uRI1);
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      InputStream inputStream0 = null;
      WebSocketClient webSocketClient1 = webSocketClient0.setupSsl(inputStream0, string0);
      // Undeclared exception!
      try { 
        webSocketClient1.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, forkJoinPool0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
}
