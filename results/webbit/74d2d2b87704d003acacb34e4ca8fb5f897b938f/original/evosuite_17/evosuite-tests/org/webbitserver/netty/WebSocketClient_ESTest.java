/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 18:24:51 GMT 2020
 */

package org.webbitserver.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Enumeration;
import java.util.Set;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.webbitserver.HttpRequest;
import org.webbitserver.WebSocket;
import org.webbitserver.WebSocketConnection;
import org.webbitserver.WebSocketHandler;
import org.webbitserver.handler.ReconnectingWebSocketHandler;
import org.webbitserver.netty.WebSocketClient;
import org.webbitserver.netty.contrib.EventSourceMessage;
import org.webbitserver.stub.StubConnection;
import org.webbitserver.stub.StubHttpRequest;
import org.webbitserver.wrapper.WebSocketConnectionWrapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketClient_ESTest extends WebSocketClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "All buffers must have the same endianness.";
      String string1 = "";
      int int0 = 13;
      try { 
        MockURI.URI(string0, string0, string1, int0, string1, string0, string1);
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 3: All buffers must have the same endianness.://All%20buffers%20must%20have%20the%20same%20endianness.@:13?All%20buffers%20must%20have%20the%20same%20endianness.#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "SHA-1 not supported on this platform";
      String string1 = "";
      String string2 = "ehDPJBr";
      int int0 = (-627);
      String string3 = "y+=`p.]W7G+J[UhyT";
      String string4 = "KGxk\\-Ql|";
      try { 
        MockURI.URI(string0, string1, string2, int0, string0, string3, string4);
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: SHA-1 not supported on this platform://@ehDPJBr:-627SHA-1%20not%20supported%20on%20this%20platform?y+=%60p.]W7G+J[UhyT#KGxk%5C-Ql%7C
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.aHttpURI;
      URI uRI2 = MockURI.resolve(uRI0, uRI1);
      URI uRI3 = MockURI.relativize(uRI2, uRI0);
      URI uRI4 = MockURI.normalize(uRI3);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI4, webSocketHandler0);
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "9Tf5[rfV";
      String string1 = "SunJSSE";
      String string2 = "";
      int int0 = (-1655);
      String string3 = "V[oKfvhZ=S+qb";
      String string4 = "wss";
      try { 
        MockURI.URI(string0, string1, string2, int0, string3, string4, string4);
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 9Tf5[rfV://SunJSSE@:-1655V%5Bo%7FKfvhZ=S+qb?wss#wss
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocket webSocket0 = null;
      long long0 = 1028L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-77);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-32);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-69);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-43);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)89;
      byteArray0[6] = byte6;
      byte byte7 = (byte)94;
      byteArray0[7] = byte7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = "R";
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          URI uRI0 = MockURI.URI(string0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
          long long0 = (-797L);
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
          StubConnection stubConnection0 = new StubConnection();
          String string1 = null;
          StubConnection stubConnection1 = stubConnection0.version(string1);
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, stubConnection1);
          WebSocketClient webSocketClient2 = webSocketClient1.start();
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          // Undeclared exception!
          try { 
            webSocketClient2.setupSsl(pipedInputStream0, string1);
          } catch(RuntimeException e) {
             //
             // java.lang.NullPointerException
             //
             verifyException("org.webbitserver.helpers.SslFactory", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocket webSocket0 = null;
      long long0 = 2797L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      try { 
        MockURI.URI(string0, string1, string1);
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          URI uRI0 = MockURI.aFileURI;
          URI uRI1 = MockURI.resolve(uRI0, uRI0);
          WebSocketHandler webSocketHandler0 = null;
          int int0 = 1927;
          ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0, scheduledThreadPoolExecutor0);
          InputStream inputStream0 = null;
          String string0 = "f0@:K$";
          WebSocketClient webSocketClient1 = webSocketClient0.setupSsl(inputStream0, string0);
          WebSocketClient webSocketClient2 = webSocketClient1.start();
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 3059;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, scheduledThreadPoolExecutor0);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, int0);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      // Undeclared exception!
      try { 
        webSocketClient1.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocket webSocket0 = null;
      long long0 = 0L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      WebSocketHandler webSocketHandler0 = null;
      StubConnection stubConnection0 = new StubConnection();
      WebSocketConnectionWrapper webSocketConnectionWrapper0 = new WebSocketConnectionWrapper(stubConnection0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      String string0 = "";
      Object object0 = stubConnection0.data(string0);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)4;
      byteArray0[2] = byte2;
      WebSocketConnectionWrapper webSocketConnectionWrapper1 = webSocketConnectionWrapper0.send(byteArray0);
      Executor executor0 = webSocketConnectionWrapper1.handlerExecutor();
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, executor0);
      long long0 = (-712L);
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      InputStream inputStream0 = null;
      String string1 = "f+XL\\";
      WebSocketClient webSocketClient2 = webSocketClient1.setupSsl(inputStream0, string1);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      WebSocket webSocket0 = webSocketClient1.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
      WebSocketClient webSocketClient3 = webSocketClient1.reconnectEvery(byte1);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "gzip";
      URI uRI0 = MockURI.URI(string0);
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocket webSocket0 = null;
      long long0 = 3341L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)2;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-15);
      byteArray0[3] = byte3;
      int int0 = 567;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, byte1);
      String string1 = "-";
      // Undeclared exception!
      try { 
        webSocketClient0.setupSsl(byteArrayInputStream0, string1);
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      WebSocket webSocket0 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      long long0 = 0L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      String string0 = "";
      StubHttpRequest stubHttpRequest0 = new StubHttpRequest(string0);
      StubConnection stubConnection0 = new StubConnection(stubHttpRequest0);
      WebSocketConnectionWrapper webSocketConnectionWrapper0 = new WebSocketConnectionWrapper(stubConnection0);
      WebSocketConnectionWrapper webSocketConnectionWrapper1 = webSocketConnectionWrapper0.close();
      String string1 = "";
      WebSocketConnectionWrapper webSocketConnectionWrapper2 = webSocketConnectionWrapper1.ping(string1);
      WebSocketConnectionWrapper webSocketConnectionWrapper3 = webSocketConnectionWrapper2.underlyingControl((WebSocketConnection) webSocketConnectionWrapper0);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, webSocketConnectionWrapper3);
      // Undeclared exception!
      try { 
        webSocketConnectionWrapper0.close();
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler$2";
      URI uRI0 = MockURI.create(string0);
      WebSocketHandler webSocketHandler0 = null;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, forkJoinPool0);
      long long0 = 0L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      // Undeclared exception!
      try { 
        webSocketClient1.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "";
          URI uRI0 = MockURI.create(string0);
          WebSocketHandler webSocketHandler0 = null;
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
          InputStream inputStream0 = null;
          String string1 = "gzip";
          WebSocketClient webSocketClient1 = webSocketClient0.setupSsl(inputStream0, string1);
          String string2 = "Lp}4^";
          WebSocketClient webSocketClient2 = webSocketClient0.setupSsl(inputStream0, string2);
          WebSocketClient webSocketClient3 = webSocketClient2.start();
          WebSocket webSocket0 = webSocketClient2.close();
          WebSocketClient webSocketClient4 = webSocketClient0.start();
          ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
          Thread thread0 = MockThread.currentThread();
          long long0 = 0L;
          MockThread mockThread0 = new MockThread(threadGroup0, thread0, string0, long0);
          String string3 = "ws";
          MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, string3);
          String string4 = "";
          MockThread mockThread2 = new MockThread(mockThread1, string4);
          Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread2.getUncaughtExceptionHandler();
          WebSocket webSocket1 = webSocketClient0.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
          WebSocketClient webSocketClient5 = webSocketClient0.setupSsl(inputStream0, string0);
          Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler1 = MockThread.getDefaultUncaughtExceptionHandler();
          WebSocket webSocket2 = webSocketClient4.uncaughtExceptionHandler(thread_UncaughtExceptionHandler1);
          WebSocket webSocket3 = webSocketClient4.uncaughtExceptionHandler(thread_UncaughtExceptionHandler1);
          String string5 = "CONNECT";
          MockThread mockThread3 = new MockThread(string5);
          MockThread mockThread4 = new MockThread(mockThread3);
          Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler2 = mockThread4.getUncaughtExceptionHandler();
          WebSocket webSocket4 = webSocketClient5.connectionExceptionHandler(thread_UncaughtExceptionHandler2);
          WebSocketClient webSocketClient6 = webSocketClient1.start();
          String string6 = "Y:Eiry%i#8=\\=l0";
          WebSocketClient webSocketClient7 = webSocketClient6.setupSsl(inputStream0, string6);
          long long1 = (-1L);
          WebSocketClient webSocketClient8 = webSocketClient5.reconnectEvery(long1);
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = null;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, forkJoinPool0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.normalize(uRI0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
      long long0 = 798L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      StubConnection stubConnection0 = new StubConnection();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-4);
      byteArray0[0] = byte0;
      StubConnection stubConnection1 = stubConnection0.send(byteArray0);
      StubConnection stubConnection2 = stubConnection1.close();
      String string0 = "";
      StubHttpRequest stubHttpRequest0 = new StubHttpRequest(string0);
      StubConnection stubConnection3 = stubConnection2.httpRequest((HttpRequest) stubHttpRequest0);
      String string1 = "p~s";
      Set<String> set0 = stubHttpRequest0.postParamKeys();
      StubConnection stubConnection4 = stubConnection3.ping(string1);
      reconnectingWebSocketHandler0.onClose(stubConnection4);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      boolean boolean0 = forkJoinPool0.isTerminating();
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0, forkJoinPool0);
      WebSocketClient webSocketClient2 = webSocketClient0.reconnectEvery(long0);
      // Undeclared exception!
      try { 
        webSocketClient0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, scheduledThreadPoolExecutor0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "_rUaA5";
          URI uRI0 = MockURI.URI(string0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          Executor executor0 = null;
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, executor0);
          Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
          WebSocket webSocket0 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
          long long0 = (-1367L);
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, executor0);
          // Undeclared exception!
          try { 
            webSocketClient0.start();
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }
}
