/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 18:35:49 GMT 2020
 */

package org.webbitserver.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Enumeration;
import java.util.concurrent.Callable;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.webbitserver.HttpRequest;
import org.webbitserver.WebSocket;
import org.webbitserver.WebSocketHandler;
import org.webbitserver.handler.ReconnectingWebSocketHandler;
import org.webbitserver.netty.WebSocketClient;
import org.webbitserver.stub.StubConnection;
import org.webbitserver.stub.StubHttpRequest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketClient_ESTest extends WebSocketClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "tmHNC0:QTe{E!";
      try { 
        MockURI.URI(string0);
      } catch(URISyntaxException e) {
         //
         // Illegal character in opaque part at index 10: tmHNC0:QTe{E!
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      String string0 = "HTTP";
      URI uRI1 = MockURI.resolve(uRI0, string0);
      URI uRI2 = MockURI.relativize(uRI1, uRI0);
      WebSocketHandler webSocketHandler0 = null;
      Executor executor0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI2, webSocketHandler0, executor0);
      // Undeclared exception!
      try { 
        webSocketClient0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketHandler webSocketHandler1 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler1);
      long long0 = 2980L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      Executor executor0 = null;
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, executor0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = null;
      int int0 = 3;
      long long0 = 255L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, long0, timeUnit0, linkedBlockingDeque0, threadPoolExecutor_AbortPolicy0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      threadPoolExecutor0.setThreadFactory(threadFactory0);
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, threadPoolExecutor0);
      long long1 = (-873L);
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long1);
      // Undeclared exception!
      try { 
        webSocketClient1.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "http";
          URI uRI0 = MockURI.URI(string0);
          WebSocketHandler webSocketHandler0 = null;
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
          WebSocketClient webSocketClient1 = webSocketClient0.start();
          WebSocketClient webSocketClient2 = webSocketClient0.start();
          WebSocket webSocket0 = webSocketClient1.close();
          WebSocket webSocket1 = webSocketClient0.close();
          long long0 = 0L;
          ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
          Runnable runnable0 = null;
          String string1 = "LeK;X]u";
          MockThread mockThread0 = new MockThread(threadGroup0, runnable0, string1);
          MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
          MockThread mockThread2 = new MockThread(mockThread1);
          Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread2.getUncaughtExceptionHandler();
          WebSocket webSocket2 = webSocketClient2.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
          WebSocketClient webSocketClient3 = webSocketClient0.reconnectEvery(long0);
          ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
          MockThread mockThread3 = new MockThread();
          MockThread mockThread4 = new MockThread(threadGroup1, mockThread3);
          Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler1 = mockThread4.getUncaughtExceptionHandler();
          WebSocket webSocket3 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler1);
          WebSocket webSocket4 = webSocketClient0.close();
          MockThread.reset();
          long long1 = (-1L);
          WebSocketClient webSocketClient4 = webSocketClient2.reconnectEvery(long1);
          WebSocketClient webSocketClient5 = webSocketClient2.start();
          ThreadGroup threadGroup2 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
          MockThread mockThread5 = new MockThread(threadGroup2, mockThread2);
          Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler2 = mockThread5.getUncaughtExceptionHandler();
          WebSocket webSocket5 = webSocketClient5.uncaughtExceptionHandler(thread_UncaughtExceptionHandler2);
          WebSocket webSocket6 = webSocketClient3.close();
          WebSocket webSocket7 = webSocketClient5.close();
          WebSocket webSocket8 = webSocketClient5.close();
          byte[] byteArray0 = new byte[3];
          byte byte0 = (byte)69;
          byteArray0[0] = byte0;
          byte byte1 = (byte)98;
          byteArray0[1] = byte1;
          byte byte2 = (byte)0;
          byteArray0[2] = byte2;
          int int0 = 57;
          int int1 = (-1422);
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, int1);
          // Undeclared exception!
          try { 
            webSocketClient5.setupSsl(byteArrayInputStream0, string1);
          } catch(RuntimeException e) {
             //
             // java.io.EOFException
             //
             verifyException("org.webbitserver.helpers.SslFactory", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketHandler webSocketHandler1 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler1);
      long long0 = 0L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      StubConnection stubConnection0 = new StubConnection();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)125;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-10);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)25;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-14);
      byteArray0[5] = byte5;
      StubConnection stubConnection1 = stubConnection0.send(byteArray0);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, stubConnection1);
      long long1 = 0L;
      WebSocketClient webSocketClient2 = webSocketClient1.reconnectEvery(long1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string0 = "decoder";
      // Undeclared exception!
      try { 
        webSocketClient2.setupSsl(sequenceInputStream0, string0);
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      long long0 = 0L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      int int0 = 1586;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, scheduledThreadPoolExecutor0);
      WebSocketClient webSocketClient2 = webSocketClient1.reconnectEvery(int0);
      // Undeclared exception!
      try { 
        webSocketClient2.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      // Undeclared exception!
      try { 
        webSocketClient0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 621;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, scheduledThreadPoolExecutor0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketHandler webSocketHandler1 = null;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler1, forkJoinPool0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      URI uRI0 = MockURI.create(string0);
      URI uRI1 = MockURI.resolve(uRI0, string0);
      URI uRI2 = MockURI.normalize(uRI1);
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI2, webSocketHandler0);
      MockThread mockThread0 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      WebSocket webSocket0 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      WebSocket webSocket1 = webSocketClient0.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
      long long0 = 0L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      WebSocket webSocket2 = webSocketClient1.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = null;
          URI uRI0 = MockURI.URI(string0, string0, string0, string0, string0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
          long long0 = (-1251L);
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
          Executor executor0 = null;
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, executor0);
          // Undeclared exception!
          try { 
            webSocketClient1.start();
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          URI uRI0 = MockURI.create(string0);
          WebSocketHandler webSocketHandler0 = null;
          StubHttpRequest stubHttpRequest0 = new StubHttpRequest(string0);
          StubConnection stubConnection0 = new StubConnection(stubHttpRequest0);
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, stubConnection0);
          WebSocketClient webSocketClient1 = webSocketClient0.start();
          long long0 = 174L;
          WebSocketClient webSocketClient2 = webSocketClient1.reconnectEvery(long0);
          String string1 = "WY.h";
          String string2 = "wsencoder";
          String string3 = "localhost";
          try { 
            MockURI.URI(string0, string0, string1, string2, string3);
          } catch(URISyntaxException e) {
             //
             // Relative path in absolute URI: ://WY.h?wsencoder#localhost
             //
             verifyException("java.net.URI", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "";
          URI uRI0 = MockURI.create(string0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketHandler webSocketHandler1 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          int int0 = 4;
          TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
          LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
          ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, int0, timeUnit0, linkedTransferQueue0);
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler1, threadPoolExecutor0);
          InputStream inputStream0 = null;
          String string1 = "decoder";
          WebSocketClient webSocketClient1 = webSocketClient0.setupSsl(inputStream0, string1);
          long long0 = 0L;
          WebSocketClient webSocketClient2 = webSocketClient0.reconnectEvery(long0);
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient1, int0);
          long long1 = 2076L;
          WebSocketClient webSocketClient3 = webSocketClient1.reconnectEvery(long1);
          WebSocketClient webSocketClient4 = webSocketClient3.start();
          WebSocketClient webSocketClient5 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
          WebSocketClient webSocketClient6 = webSocketClient5.reconnectEvery(long1);
          WebSocketClient webSocketClient7 = webSocketClient3.start();
          // Undeclared exception!
          try { 
            webSocketClient6.close();
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "Accept-Encoding";
          URI uRI0 = MockURI.create(string0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
          long long0 = 0L;
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
          HttpRequest httpRequest0 = null;
          StubConnection stubConnection0 = new StubConnection(httpRequest0);
          String string1 = "wpO)a2(lV<BFsk> J)#";
          StubConnection stubConnection1 = stubConnection0.send(string1);
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, stubConnection1);
          WebSocketClient webSocketClient2 = webSocketClient1.reconnectEvery(long0);
          WebSocketClient webSocketClient3 = webSocketClient2.start();
          WebSocketClient webSocketClient4 = webSocketClient3.start();
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }
}
