/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 23:31:04 GMT 2020
 */

package org.webbitserver.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.InetSocketAddress;
import java.net.URI;
import java.security.MessageDigest;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelHandler;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.DownstreamMessageEvent;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.junit.runner.RunWith;
import org.webbitserver.WebSocket;
import org.webbitserver.WebSocketConnection;
import org.webbitserver.WebSocketHandler;
import org.webbitserver.handler.ReconnectingWebSocketHandler;
import org.webbitserver.helpers.SslFactory;
import org.webbitserver.netty.NettyHttpRequest;
import org.webbitserver.netty.NettyWebSocketConnection;
import org.webbitserver.netty.WebSocketClient;
import org.webbitserver.netty.contrib.EventSourceMessage;
import org.webbitserver.stub.StubConnection;
import org.webbitserver.stub.StubHttpRequest;
import org.webbitserver.wrapper.WebSocketConnectionWrapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketClient_ESTest extends WebSocketClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Object object0 = WebSocketClient.nextId();
      String string0 = "wv=MvZ";
      URI uRI0 = MockURI.URI(string0);
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      URI uRI2 = MockURI.relativize(uRI1, uRI0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(webSocketClient0.base64Nonce);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      InputStream inputStream0 = null;
      String string0 = "eJpmfq.ai#RD";
      WebSocketClient webSocketClient1 = webSocketClient0.setupSsl(inputStream0, string0);
      webSocketClient1.ioExceptionHandler = webSocketClient0.ioExceptionHandler;
      webSocketClient1.base64Nonce = string0;
      HttpRequest httpRequest0 = webSocketClient1.createNettyHttpRequest(webSocketClient0.base64Nonce, webSocketClient0.ACCEPT_GUID);
      byte byte0 = webSocketClient1.randomByte();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = webSocketClient1.ioExceptionHandler;
      WebSocket webSocket0 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      long long0 = (-3127L);
      WebSocketConnection webSocketConnection0 = null;
      WebSocketConnectionWrapper webSocketConnectionWrapper0 = new WebSocketConnectionWrapper(webSocketConnection0);
      String string0 = "";
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-114);
      Channel channel0 = null;
      webSocketClient0.channel = channel0;
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(string0);
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
      long long0 = 255L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      // Undeclared exception!
      try { 
        webSocketClient1.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
      long long0 = 255L;
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "'Y8";
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      WebSocket webSocket0 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      Object object0 = WebSocketClient.nextId();
      long long0 = (-2252L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      MessageDigest messageDigest0 = WebSocketClient.SHA_1;
      WebSocketClient.SHA_1 = messageDigest0;
      String string1 = "Px lEb|";
      String string2 = "org.webbitserver.helpers.QueryParameters";
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "n3";
          URI uRI0 = MockURI.create(string0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketHandler webSocketHandler1 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler1);
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, webSocketClient0.nextId);
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, webSocketClient0.executor);
          WebSocketClient webSocketClient2 = webSocketClient1.start();
          WebSocket webSocket0 = webSocketClient2.uncaughtExceptionHandler(webSocketClient0.ioExceptionHandler);
          WebSocketClient webSocketClient3 = webSocketClient2.start();
          webSocketClient3.remoteAddress = webSocketClient0.remoteAddress;
          StubConnection stubConnection0 = new StubConnection();
          WebSocketConnectionWrapper webSocketConnectionWrapper0 = new WebSocketConnectionWrapper(stubConnection0);
          String string1 = "";
          WebSocketConnectionWrapper webSocketConnectionWrapper1 = webSocketConnectionWrapper0.data(string1, (Object) webSocket0);
          String string2 = null;
          WebSocketConnectionWrapper webSocketConnectionWrapper2 = webSocketConnectionWrapper1.send(string2);
          WebSocketConnectionWrapper webSocketConnectionWrapper3 = webSocketConnectionWrapper2.underlyingControl((WebSocketConnection) webSocketConnectionWrapper1);
          // Undeclared exception!
          try { 
            webSocketConnectionWrapper3.ping(string0);
          } catch(StackOverflowError e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      WebSocketClient.ACCEPT_GUID = webSocketClient0.base64Nonce;
      WebSocket webSocket0 = webSocketClient0.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
      WebSocket webSocket1 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      byte byte0 = webSocketClient0.randomByte();
      WebSocket webSocket2 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      String string0 = webSocketClient0.base64Nonce();
      // Undeclared exception!
      try { 
        webSocketClient0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(NullPointerException e) {
         //
         // remoteAddress
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = 0L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      long long1 = 8L;
      WebSocketClient webSocketClient2 = webSocketClient0.reconnectEvery(long1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = null;
      StubConnection stubConnection0 = new StubConnection();
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, stubConnection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = null;
      int int0 = 13;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      boolean boolean0 = true;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, forkJoinPool0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
      long long0 = (-1L);
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      String string0 = null;
      String string1 = "";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = 525L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      WebSocket webSocket0 = webSocketClient0.connectionExceptionHandler(webSocketClient1.ioExceptionHandler);
      // Undeclared exception!
      try { 
        webSocketClient1.start();
      } catch(NullPointerException e) {
         //
         // remoteAddress
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      int int0 = 2;
      String string2 = "decoder";
      URI uRI0 = MockURI.URI(string0, string0, string1, int0, string2, string2, string0);
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      WebSocketHandler webSocketHandler0 = null;
      WebSocket webSocket0 = null;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, int0);
      int int1 = 4978;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int1, threadPoolExecutor_CallerRunsPolicy0);
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        webSocketClient0.createNettyHttpRequest(string1, string0);
      } catch(NullPointerException e) {
         //
         // uri
         //
         verifyException("org.jboss.netty.handler.codec.http.DefaultHttpRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-85);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-80);
      HttpRequest httpRequest0 = webSocketClient0.request;
      webSocketClient0.request = httpRequest0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)25;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byte4, byte4);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      long long0 = 0L;
      long long1 = byteArrayInputStream0.skip(long0);
      String string0 = "NRoW1[7Zvb{3sPfbTt";
      // Undeclared exception!
      try { 
        webSocketClient0.setupSsl(sequenceInputStream0, string0);
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.normalize(uRI0);
      WebSocketHandler webSocketHandler0 = null;
      WebSocket webSocket0 = null;
      long long0 = 0L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      StubHttpRequest stubHttpRequest0 = new StubHttpRequest();
      StubConnection stubConnection0 = new StubConnection(stubHttpRequest0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-74);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-67);
      byteArray0[2] = byte2;
      byte byte3 = (byte)10;
      byteArray0[3] = byte3;
      StubConnection stubConnection1 = stubConnection0.send(byteArray0);
      StubConnection stubConnection2 = stubConnection1.httpRequest((org.webbitserver.HttpRequest) stubHttpRequest0);
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0, stubConnection2);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
      long long0 = (-3021L);
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = "}fR+/UvgvruW^$v";
      // Undeclared exception!
      try { 
        webSocketClient0.setupSsl(byteArrayInputStream0, string0);
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          WebSocketClient webSocketClient0 = new WebSocketClient();
          int int0 = 0;
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int0);
          webSocketClient0.remoteAddress = (InetSocketAddress) mockInetSocketAddress0;
          // Undeclared exception!
          try { 
            webSocketClient0.start();
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocket webSocket0 = null;
      long long0 = 0L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, webSocketClient0.nextId);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      // Undeclared exception!
      try { 
        webSocketClient1.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, webSocketClient0.nextId);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      long long0 = 1020L;
      webSocketClient1.exceptionHandler = webSocketClient0.ioExceptionHandler;
      WebSocketClient webSocketClient2 = webSocketClient1.reconnectEvery(long0);
      // Undeclared exception!
      try { 
        webSocketClient2.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "n3";
          URI uRI0 = MockURI.create(string0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketHandler webSocketHandler1 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler1);
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, webSocketClient0.nextId);
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, webSocketClient0.executor);
          WebSocketClient webSocketClient2 = webSocketClient1.start();
          WebSocket webSocket0 = webSocketClient2.uncaughtExceptionHandler(webSocketClient0.ioExceptionHandler);
          WebSocketClient webSocketClient3 = webSocketClient2.start();
          webSocketClient3.remoteAddress = webSocketClient0.remoteAddress;
          StubConnection stubConnection0 = new StubConnection();
          WebSocketConnectionWrapper webSocketConnectionWrapper0 = new WebSocketConnectionWrapper(stubConnection0);
          String string1 = "";
          WebSocketConnectionWrapper webSocketConnectionWrapper1 = webSocketConnectionWrapper0.data(string1, (Object) webSocket0);
          String string2 = null;
          WebSocketConnectionWrapper webSocketConnectionWrapper2 = webSocketConnectionWrapper1.send(string2);
          WebSocketConnectionWrapper webSocketConnectionWrapper3 = webSocketConnectionWrapper2.underlyingControl((WebSocketConnection) webSocketConnectionWrapper1);
          // Undeclared exception!
          try { 
            webSocketConnectionWrapper3.ping(string0);
          } catch(StackOverflowError e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
          URI uRI0 = MockURI.aFileURI;
          URI uRI1 = MockURI.relativize(uRI0, uRI0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          EvoSuiteFile evoSuiteFile0 = null;
          String string0 = null;
          boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
          WebSocketClient webSocketClient1 = webSocketClient0.start();
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient1, webSocketClient1.nextId);
          WebSocketClient webSocketClient2 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0, webSocketClient1.executor);
          WebSocketClient webSocketClient3 = webSocketClient2.start();
          SslFactory sslFactory0 = webSocketClient2.sslFactory;
          webSocketClient2.channel = webSocketClient1.channel;
          webSocketClient3.sslFactory = sslFactory0;
          int int0 = 1334;
          Random.setNextRandom(int0);
          WebSocket webSocket0 = webSocketClient1.close();
          WebSocketClient webSocketClient4 = webSocketClient0.start();
          int int1 = (-2237);
          Random.setNextRandom(int1);
          WebSocketClient webSocketClient5 = webSocketClient0.start();
          int int2 = 872;
          Random.setNextRandom(int2);
          WebSocketClient webSocketClient6 = webSocketClient5.start();
          WebSocketClient webSocketClient7 = webSocketClient2.start();
          Random.setNextRandom(int1);
          int int3 = 9;
          Random.setNextRandom(int3);
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }
}
