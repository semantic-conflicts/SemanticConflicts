/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 23:58:46 GMT 2020
 */

package org.webbitserver.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.SocketAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.channels.FileChannel;
import java.security.MessageDigest;
import java.util.Enumeration;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.SSLContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.jboss.netty.bootstrap.ClientBootstrap;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.junit.runner.RunWith;
import org.webbitserver.WebSocket;
import org.webbitserver.WebSocketConnection;
import org.webbitserver.WebSocketHandler;
import org.webbitserver.handler.ReconnectingWebSocketHandler;
import org.webbitserver.helpers.SslFactory;
import org.webbitserver.netty.WebSocketClient;
import org.webbitserver.netty.contrib.EventSourceMessage;
import org.webbitserver.stub.StubConnection;
import org.webbitserver.stub.StubHttpRequest;
import org.webbitserver.wrapper.WebSocketConnectionWrapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketClient_ESTest extends WebSocketClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.aFileURI;
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          URI uRI1 = MockURI.relativize(uRI0, uRI0);
          StubConnection stubConnection0 = new StubConnection();
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0, stubConnection0);
          WebSocketClient webSocketClient1 = webSocketClient0.start();
          long long0 = 1363L;
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient1, long0);
          WebSocketClient webSocketClient2 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
          byte byte0 = webSocketClient2.randomByte();
          byte[] byteArray0 = new byte[9];
          reconnectingWebSocketHandler0.onClose(stubConnection0);
          byteArray0[0] = byte0;
          byteArray0[1] = byte0;
          byteArray0[2] = byte0;
          byte byte1 = (byte) (-4);
          byteArray0[3] = byte1;
          byteArray0[4] = byte0;
          byteArray0[5] = byte0;
          byteArray0[6] = byte0;
          webSocketClient1.ssl = webSocketClient0.ssl;
          byteArray0[7] = byte0;
          byteArray0[8] = byte0;
          int int0 = 817;
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, byteArray0[5]);
          String string0 = "Failed to open a datagram socket.";
          // Undeclared exception!
          try { 
            webSocketClient1.setupSsl(byteArrayInputStream0, string0);
          } catch(RuntimeException e) {
             //
             // java.io.EOFException
             //
             verifyException("org.webbitserver.helpers.SslFactory", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      long long0 = 1L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient1, long0);
      StubConnection stubConnection0 = new StubConnection();
      StubConnection stubConnection1 = stubConnection0.close();
      StubHttpRequest stubHttpRequest0 = new StubHttpRequest();
      String string0 = "YBTg91,=fX#TJ%;z";
      StubHttpRequest stubHttpRequest1 = stubHttpRequest0.method(string0);
      WebSocketClient.SHA_1 = webSocketClient1.SHA_1;
      Set<String> set0 = stubConnection1.dataKeys();
      StubHttpRequest stubHttpRequest2 = stubHttpRequest1.remoteAddress((SocketAddress) webSocketClient0.remoteAddress);
      StubConnection stubConnection2 = stubConnection1.httpRequest((org.webbitserver.HttpRequest) stubHttpRequest2);
      reconnectingWebSocketHandler0.onClose(stubConnection2);
      WebSocketClient webSocketClient2 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, webSocketClient0.executor);
      WebSocket webSocket0 = webSocketClient2.uncaughtExceptionHandler(webSocketClient1.ioExceptionHandler);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        webSocketClient2.setupSsl(dataInputStream0, webSocketClient1.base64Nonce);
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      String string0 = "Z l:34)m}@f;xL*hs0";
      String string1 = "";
      HttpRequest httpRequest0 = webSocketClient0.createNettyHttpRequest(string0, string1);
      byteArray0[0] = byte0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = byte0;
      byteArray1[5] = byte0;
      byteArray1[6] = byte0;
      byteArray1[7] = byte0;
      byteArray1[8] = byte0;
      int int0 = 172;
      // Undeclared exception!
      try { 
        pipedInputStream0.read(byteArray1, (int) byteArray1[2], int0);
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Object object0 = WebSocketClient.nextId();
      String string0 = null;
      String string1 = "eZ4k.";
      String string2 = "eWM^eJfs";
      String string3 = "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext";
      String string4 = "i4y3V]";
      URI uRI0 = MockURI.URI(string0, string1, string2, string3, string4);
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      long long0 = (-156L);
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      webSocketClient0.sslFactory = webSocketClient1.sslFactory;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient1, webSocketClient0.nextId);
      WebSocketClient webSocketClient2 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0, webSocketClient1.executor);
      webSocketClient0.remoteAddress = webSocketClient1.remoteAddress;
      WebSocket webSocket0 = webSocketClient2.connectionExceptionHandler(webSocketClient1.ioExceptionHandler);
      webSocketClient2.webSocketHandler = webSocketClient1.webSocketHandler;
      webSocketClient1.channel = webSocketClient2.channel;
      String string5 = webSocketClient1.base64Nonce();
      String string6 = webSocketClient2.base64Nonce();
      String string7 = "handshakeHandler";
      HttpRequest httpRequest0 = webSocketClient2.createNettyHttpRequest(string2, string7);
      webSocketClient1.bootstrap = webSocketClient0.bootstrap;
      Object object1 = WebSocketClient.nextId();
      byte byte0 = webSocketClient1.randomByte();
      WebSocket webSocket1 = webSocketClient1.connectionExceptionHandler(webSocketClient2.exceptionHandler);
      InputStream inputStream0 = null;
      String string8 = "";
      WebSocketClient webSocketClient3 = webSocketClient1.setupSsl(inputStream0, string8);
      // Undeclared exception!
      try { 
        webSocketClient3.createNettyHttpRequest(webSocketClient2.ACCEPT_GUID, string0);
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException("org.jboss.netty.handler.codec.http.HttpCodecUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Object object0 = WebSocketClient.nextId();
      String string0 = "#=8Lk#!";
      try { 
        MockURI.URI(string0);
      } catch(URISyntaxException e) {
         //
         // Illegal character in fragment at index 5: #=8Lk#!
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Object object0 = WebSocketClient.nextId();
      WebSocketClient webSocketClient0 = new WebSocketClient();
      boolean boolean0 = true;
      WebSocketClient.nextId = webSocketClient0.nextId;
      webSocketClient0.ssl = boolean0;
      long long0 = 1000000L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      String string0 = webSocketClient0.base64Nonce();
      boolean boolean1 = true;
      webSocketClient1.webSocketHandler = webSocketClient0.webSocketHandler;
      webSocketClient1.channel = webSocketClient0.channel;
      ClientBootstrap clientBootstrap0 = webSocketClient0.bootstrap;
      webSocketClient0.bootstrap = clientBootstrap0;
      String string1 = "localhost";
      String string2 = null;
      // Undeclared exception!
      try { 
        webSocketClient0.createNettyHttpRequest(string1, string2);
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException("org.jboss.netty.handler.codec.http.HttpCodecUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = (-2849L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0, webSocketClient0.executor);
      // Undeclared exception!
      try { 
        webSocketClient1.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = null;
      WebSocket webSocket0 = webSocketClient0.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(NullPointerException e) {
         //
         // remoteAddress
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      String string0 = "buS>%@\\}-L%.!]36";
      HttpRequest httpRequest0 = webSocketClient0.createNettyHttpRequest(string0, string0);
      InputStream inputStream0 = null;
      SslFactory sslFactory0 = new SslFactory(inputStream0, string0);
      webSocketClient0.sslFactory = sslFactory0;
      String string1 = null;
      // Undeclared exception!
      try { 
        webSocketClient0.setupSsl(inputStream0, string1);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocket webSocket0 = null;
      long long0 = 0L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      String string0 = "lANkNK)$_98gP=Gb";
      StubHttpRequest stubHttpRequest0 = new StubHttpRequest(string0);
      StubConnection stubConnection0 = new StubConnection(stubHttpRequest0);
      byte[] byteArray0 = null;
      StubConnection stubConnection1 = stubConnection0.send(byteArray0);
      String string1 = "";
      StubConnection stubConnection2 = stubConnection1.data(string1, (Object) uRI0);
      StubConnection stubConnection3 = stubConnection2.ping(string0);
      EventSourceMessage eventSourceMessage0 = new EventSourceMessage();
      long long1 = 3352L;
      EventSourceMessage eventSourceMessage1 = eventSourceMessage0.id(long1);
      Long long2 = new Long(long0);
      EventSourceMessage eventSourceMessage2 = eventSourceMessage1.retry(long2);
      StubConnection stubConnection4 = stubConnection3.send(eventSourceMessage2);
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, stubConnection4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = (-1410L);
      // Undeclared exception!
      try { 
        webSocketClient0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = 0L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      SslFactory sslFactory0 = null;
      webSocketClient0.sslFactory = sslFactory0;
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0);
      WebSocketConnection webSocketConnection0 = null;
      reconnectingWebSocketHandler0.onClose(webSocketConnection0);
      String string0 = "";
      HttpRequest httpRequest0 = webSocketClient1.createNettyHttpRequest(string0, webSocketClient0.ACCEPT_GUID);
      webSocketClient1.request = httpRequest0;
      WebSocketClient webSocketClient2 = webSocketClient1.reconnectEvery(webSocketClient0.nextId);
      // Undeclared exception!
      try { 
        webSocketClient2.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocket webSocket0 = null;
      long long0 = (-2461L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      String string0 = webSocketClient0.base64Nonce();
      long long0 = (-2262L);
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      long long1 = (-296L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketClient1.webSocketHandler, webSocketClient1, long1);
      webSocketClient1.webSocketHandler = (WebSocketHandler) reconnectingWebSocketHandler0;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler1 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient1, webSocketClient0.nextId);
      WebSocketClient webSocketClient2 = null;
      try {
        webSocketClient2 = new WebSocketClient(uRI0, reconnectingWebSocketHandler1, webSocketClient0.executor);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          URI uRI0 = MockURI.aHttpURI;
          URI uRI1 = MockURI.relativize(uRI0, uRI0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient();
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, webSocketClient0.nextId);
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0, webSocketClient0.executor);
          // Undeclared exception!
          try { 
            webSocketClient1.start();
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }
}
