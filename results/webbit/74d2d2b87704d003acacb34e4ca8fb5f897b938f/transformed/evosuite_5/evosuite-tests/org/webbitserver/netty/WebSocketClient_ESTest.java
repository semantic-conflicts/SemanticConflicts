/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 23:44:38 GMT 2020
 */

package org.webbitserver.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelHandler;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.DownstreamMessageEvent;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.junit.runner.RunWith;
import org.webbitserver.WebSocket;
import org.webbitserver.WebSocketHandler;
import org.webbitserver.handler.ReconnectingWebSocketHandler;
import org.webbitserver.netty.NettyHttpRequest;
import org.webbitserver.netty.NettyWebSocketConnection;
import org.webbitserver.netty.WebSocketClient;
import org.webbitserver.stub.StubConnection;
import org.webbitserver.stub.StubHttpRequest;
import org.webbitserver.wrapper.WebSocketConnectionWrapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketClient_ESTest extends WebSocketClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Object object0 = WebSocketClient.nextId();
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = 174L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, webSocketClient0.executor);
      // Undeclared exception!
      try { 
        webSocketClient1.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(NullPointerException e) {
         //
         // remoteAddress
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(NullPointerException e) {
         //
         // remoteAddress
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "options";
      String string1 = "Dl{#^T*7{k";
      int int0 = (-113);
      String string2 = "org.jboss.netty.buffer.CompositeChannelBuffer";
      String string3 = "";
      String string4 = null;
      try { 
        MockURI.URI(string0, string0, string1, int0, string2, string3, string4);
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: options://options@Dl{#^T*7{k:-113org.jboss.netty.buffer.CompositeChannelBuffer?
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = null;
      String string1 = "w0Y5g@=\"FsF7";
      URI uRI0 = MockURI.URI(string0, string0, string0, string1, string1);
      String string2 = "";
      URI uRI1 = MockURI.resolve(uRI0, string2);
      URI uRI2 = MockURI.relativize(uRI1, uRI1);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      StubHttpRequest stubHttpRequest0 = new StubHttpRequest();
      StubConnection stubConnection0 = new StubConnection(stubHttpRequest0);
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, stubConnection0);
      long long0 = 1L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      WebSocket webSocket0 = webSocketClient1.uncaughtExceptionHandler(webSocketClient0.exceptionHandler);
      long long1 = (-618L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long1);
      WebSocketClient webSocketClient2 = new WebSocketClient(uRI2, reconnectingWebSocketHandler0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        MockURI.resolve(uRI0, uRI0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      HttpRequest httpRequest0 = webSocketClient0.request;
      webSocketClient0.request = httpRequest0;
      String string0 = webSocketClient0.base64Nonce();
      Object object0 = WebSocketClient.nextId();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(webSocketClient0.ssl).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string1 = "";
      // Undeclared exception!
      try { 
        webSocketClient0.setupSsl(sequenceInputStream0, string1);
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Object object0 = WebSocketClient.nextId();
          String string0 = "ssl";
          URI uRI0 = MockURI.create(string0);
          WebSocketHandler webSocketHandler0 = null;
          WebSocketClient webSocketClient0 = new WebSocketClient();
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, webSocketClient0.nextId);
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, webSocketClient0.executor);
          // Undeclared exception!
          try { 
            webSocketClient1.start();
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      boolean boolean0 = false;
      webSocketClient0.ssl = boolean0;
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      WebSocket webSocket0 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      byte byte0 = webSocketClient0.randomByte();
      WebSocket webSocket1 = webSocketClient0.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
      WebSocket webSocket2 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      String string0 = "V\">kL3\"@9Z^";
      HttpRequest httpRequest0 = webSocketClient0.createNettyHttpRequest(string0, string0);
      // Undeclared exception!
      try { 
        webSocketClient0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          URI uRI0 = MockURI.URI(string0);
          URI uRI1 = MockURI.parseServerAuthority(uRI0);
          URI uRI2 = MockURI.resolve(uRI1, uRI1);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          int int0 = 0;
          ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI2, webSocketHandler0, scheduledThreadPoolExecutor0);
          WebSocketClient webSocketClient1 = webSocketClient0.start();
          long long0 = 1L;
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient1, long0);
          WebSocketClient webSocketClient2 = new WebSocketClient(uRI2, reconnectingWebSocketHandler0);
          WebSocketClient webSocketClient3 = webSocketClient2.start();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.aHttpURI;
      URI uRI2 = MockURI.relativize(uRI0, uRI1);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = (-611L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      WebSocketClient webSocketClient1 = null;
      try {
        webSocketClient1 = new WebSocketClient(uRI2, reconnectingWebSocketHandler0, webSocketClient0.executor);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketHandler webSocketHandler1 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler1);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = 911L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = (-203L);
      WebSocketClient.nextId = long0;
      String string0 = webSocketClient0.base64Nonce();
      byte byte0 = webSocketClient0.randomByte();
      // Undeclared exception!
      try { 
        webSocketClient0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel";
          URI uRI0 = MockURI.URI(string0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocket webSocket0 = null;
          long long0 = 0L;
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
          WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
          WebSocketClient webSocketClient2 = webSocketClient0.start();
          webSocketClient1.base64Nonce = webSocketClient0.ACCEPT_GUID;
          webSocketClient2.bootstrap = webSocketClient0.bootstrap;
          WebSocket webSocket1 = webSocketClient1.close();
          String string1 = webSocketClient2.base64Nonce();
          WebSocket webSocket2 = webSocketClient1.close();
          StubConnection stubConnection0 = new StubConnection();
          StubConnection stubConnection1 = stubConnection0.send(webSocketClient1.base64Nonce);
          StubConnection stubConnection2 = stubConnection0.close();
          StubHttpRequest stubHttpRequest0 = new StubHttpRequest(string1);
          StubConnection stubConnection3 = stubConnection2.httpRequest((org.webbitserver.HttpRequest) stubHttpRequest0);
          reconnectingWebSocketHandler0.onClose(stubConnection1);
          reconnectingWebSocketHandler0.onClose(stubConnection2);
          Object object0 = WebSocketClient.nextId();
          String string2 = webSocketClient0.base64Nonce();
          String string3 = webSocketClient0.base64Nonce();
          WebSocket webSocket3 = webSocketClient0.connectionExceptionHandler(webSocketClient2.exceptionHandler);
          String string4 = webSocketClient2.base64Nonce();
          int int0 = (-1016);
          PipedInputStream pipedInputStream0 = null;
          try {
            pipedInputStream0 = new PipedInputStream(int0);
          } catch(IllegalArgumentException e) {
             //
             // Pipe Size <= 0
             //
             verifyException("java.io.PipedInputStream", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      InputStream inputStream0 = null;
      String string0 = "e";
      WebSocketClient webSocketClient1 = webSocketClient0.setupSsl(inputStream0, string0);
      Object object0 = WebSocketClient.nextId();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, webSocketClient0.nextId);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0, webSocketClient0.executor);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = "";
      // Undeclared exception!
      try { 
        webSocketClient1.setupSsl(pipedInputStream0, string0);
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(NullPointerException e) {
         //
         // remoteAddress
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      StubConnection stubConnection0 = new StubConnection();
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, stubConnection0);
      long long0 = (-1L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      // Undeclared exception!
      try { 
        webSocketClient1.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, forkJoinPool0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketHandler webSocketHandler1 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = (-2191L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      StubHttpRequest stubHttpRequest0 = new StubHttpRequest(webSocketClient0.base64Nonce);
      StubConnection stubConnection0 = new StubConnection(stubHttpRequest0);
      WebSocketConnectionWrapper webSocketConnectionWrapper0 = new WebSocketConnectionWrapper(stubConnection0);
      WebSocketConnectionWrapper webSocketConnectionWrapper1 = webSocketConnectionWrapper0.close();
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0, webSocketConnectionWrapper1);
      String string0 = webSocketClient1.base64Nonce();
      // Undeclared exception!
      try { 
        webSocketClient1.createNettyHttpRequest(string0, webSocketClient0.base64Nonce);
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException("org.jboss.netty.handler.codec.http.HttpCodecUtil", e);
      }
  }
}
