/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 23:32:29 GMT 2020
 */

package org.webbitserver.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.InetSocketAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Enumeration;
import java.util.Map;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.SSLContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.junit.runner.RunWith;
import org.webbitserver.WebSocket;
import org.webbitserver.WebSocketConnection;
import org.webbitserver.WebSocketHandler;
import org.webbitserver.handler.ReconnectingWebSocketHandler;
import org.webbitserver.helpers.SslFactory;
import org.webbitserver.netty.WebSocketClient;
import org.webbitserver.netty.contrib.EventSourceMessage;
import org.webbitserver.stub.StubConnection;
import org.webbitserver.stub.StubHttpRequest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketClient_ESTest extends WebSocketClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = null;
          String string1 = "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink";
          URI uRI0 = MockURI.URI(string0, string1, string0, string1);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient();
          long long0 = (-3611L);
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, webSocketClient0.executor);
          // Undeclared exception!
          try { 
            webSocketClient1.start();
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = (-2803L);
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketHandler webSocketHandler1 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler1);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, webSocketClient0.nextId);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0, webSocketClient0.executor);
      InputStream inputStream0 = null;
      WebSocketClient webSocketClient2 = webSocketClient1.setupSsl(inputStream0, webSocketClient0.ACCEPT_GUID);
      long long0 = 0L;
      WebSocketClient webSocketClient3 = webSocketClient2.reconnectEvery(long0);
      HttpRequest httpRequest0 = webSocketClient3.createNettyHttpRequest(webSocketClient2.ACCEPT_GUID, webSocketClient1.base64Nonce);
      HttpRequest httpRequest1 = webSocketClient3.createNettyHttpRequest(webSocketClient2.ACCEPT_GUID, webSocketClient0.base64Nonce);
      // Undeclared exception!
      try { 
        webSocketClient2.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = 2999L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      webSocketClient0.exceptionHandler = webSocketClient1.exceptionHandler;
      byte byte0 = webSocketClient1.randomByte();
      String string0 = webSocketClient1.base64Nonce();
      // Undeclared exception!
      try { 
        webSocketClient0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = (-176L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      File file0 = null;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "d'd2 Ir`]Vw}k90)'";
      String string1 = "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink";
      try { 
        MockURI.URI(string0, string0, string0, string1);
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: d'd2 Ir`]Vw}k90)'://d'd2 Ir`]Vw}k90)'d'd2%20Ir%60%5DVw%7Dk90)'#org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          WebSocketClient webSocketClient0 = new WebSocketClient();
          int int0 = 333;
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int0);
          String string0 = mockInetSocketAddress0.getHostName();
          String string1 = mockInetSocketAddress0.getHostName();
          webSocketClient0.remoteAddress = (InetSocketAddress) mockInetSocketAddress0;
          // Undeclared exception!
          try { 
            webSocketClient0.start();
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      String string0 = null;
      long long0 = 736L;
      MockThread mockThread1 = null;
      try {
        mockThread1 = new MockThread(threadGroup0, mockThread0, string0, long0);
      } catch(NullPointerException e) {
         //
         // name cannot be null
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Object object0 = WebSocketClient.nextId();
      URI uRI0 = MockURI.aHttpURI;
      String string0 = "#INA;oxlP";
      URI uRI1 = MockURI.resolve(uRI0, string0);
      URI uRI2 = MockURI.resolve(uRI1, uRI1);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = (-2110L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      WebSocketClient webSocketClient1 = null;
      try {
        webSocketClient1 = new WebSocketClient(uRI2, reconnectingWebSocketHandler0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string0 = "org.webbitserver.wrapper.WebSocketConnectionWrapper";
      // Undeclared exception!
      try { 
        webSocketClient0.setupSsl(sequenceInputStream0, string0);
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      WebSocketClient.nextId = webSocketClient0.nextId;
      String string0 = "*DP";
      InetSocketAddress inetSocketAddress0 = webSocketClient0.remoteAddress;
      webSocketClient0.remoteAddress = inetSocketAddress0;
      WebSocketClient.ACCEPT_GUID = string0;
      boolean boolean0 = false;
      webSocketClient0.ssl = boolean0;
      String string1 = webSocketClient0.base64Nonce();
      String string2 = webSocketClient0.base64Nonce();
      String string3 = webSocketClient0.base64Nonce();
      // Undeclared exception!
      try { 
        webSocketClient0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string0 = "org.webbitserver.netty.WebSocketClient$1";
      // Undeclared exception!
      try { 
        webSocketClient0.setupSsl(sequenceInputStream0, string0);
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      WebSocket webSocket0 = webSocketClient0.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, webSocketClient0.nextId);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      long long0 = (-821L);
      WebSocketClient webSocketClient2 = webSocketClient1.reconnectEvery(long0);
      WebSocketClient webSocketClient3 = webSocketClient2.reconnectEvery(webSocketClient1.nextId);
      long long1 = (-5047L);
      WebSocketClient webSocketClient4 = webSocketClient2.reconnectEvery(long1);
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(NullPointerException e) {
         //
         // remoteAddress
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        webSocketClient0.createNettyHttpRequest(string0, string1);
      } catch(NullPointerException e) {
         //
         // uri
         //
         verifyException("org.jboss.netty.handler.codec.http.DefaultHttpRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          URI uRI0 = MockURI.URI(string0);
          URI uRI1 = MockURI.relativize(uRI0, uRI0);
          URI uRI2 = MockURI.normalize(uRI1);
          WebSocketHandler webSocketHandler0 = null;
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI2, webSocketHandler0);
          WebSocketClient webSocketClient1 = webSocketClient0.start();
          WebSocketClient webSocketClient2 = webSocketClient0.start();
          WebSocket webSocket0 = webSocketClient0.uncaughtExceptionHandler(webSocketClient2.ioExceptionHandler);
          WebSocket webSocket1 = webSocketClient2.connectionExceptionHandler(webSocketClient1.ioExceptionHandler);
          WebSocketClient webSocketClient3 = webSocketClient2.start();
          WebSocketClient.SHA_1 = webSocketClient2.SHA_1;
          WebSocketClient webSocketClient4 = webSocketClient2.reconnectEvery(webSocketClient3.nextId);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = null;
      StubConnection stubConnection0 = new StubConnection();
      String string0 = "Fh;gFKI2w 1%wG{(;`";
      EventSourceMessage eventSourceMessage0 = new EventSourceMessage(string0);
      StubConnection stubConnection1 = stubConnection0.send(eventSourceMessage0);
      StubHttpRequest stubHttpRequest0 = new StubHttpRequest();
      StubConnection stubConnection2 = stubConnection1.httpRequest((org.webbitserver.HttpRequest) stubHttpRequest0);
      StubConnection stubConnection3 = stubConnection2.ping(string0);
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, stubConnection3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Object object0 = WebSocketClient.nextId();
      URI uRI0 = MockURI.aFTPURI;
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      WebSocket webSocket0 = webSocketClient0.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, webSocketClient0.nextId);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, webSocketClient0.executor);
      // Undeclared exception!
      try { 
        webSocketClient1.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = 0L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      WebSocketClient webSocketClient1 = null;
      try {
        webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          URI uRI0 = MockURI.URI(string0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          URI uRI1 = MockURI.aFTPURI;
          Executor executor0 = null;
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0, executor0);
          long long0 = 0L;
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
          WebSocketClient webSocketClient2 = webSocketClient1.start();
          long long1 = (-3920L);
          WebSocketClient webSocketClient3 = webSocketClient2.reconnectEvery(long1);
          byte byte0 = webSocketClient3.randomByte();
          WebSocket webSocket0 = webSocketClient1.close();
          webSocketClient3.request = webSocketClient2.request;
          String string1 = "";
          HttpRequest httpRequest0 = webSocketClient1.createNettyHttpRequest(string1, webSocketClient3.base64Nonce);
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
          WebSocketClient.ACCEPT_GUID = webSocketClient0.ACCEPT_GUID;
          PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
          // Undeclared exception!
          try { 
            webSocketClient0.close();
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 235;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, forkJoinPool0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
}
