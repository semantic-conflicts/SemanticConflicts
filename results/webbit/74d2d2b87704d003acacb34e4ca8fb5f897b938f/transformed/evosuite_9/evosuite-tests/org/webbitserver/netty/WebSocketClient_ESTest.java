/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 23:57:25 GMT 2020
 */

package org.webbitserver.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.SSLContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.junit.runner.RunWith;
import org.webbitserver.WebSocket;
import org.webbitserver.WebSocketConnection;
import org.webbitserver.WebSocketHandler;
import org.webbitserver.handler.ReconnectingWebSocketHandler;
import org.webbitserver.helpers.SslFactory;
import org.webbitserver.netty.WebSocketClient;
import org.webbitserver.netty.contrib.EventSourceMessage;
import org.webbitserver.stub.StubConnection;
import org.webbitserver.stub.StubHttpRequest;
import org.webbitserver.wrapper.HttpRequestWrapper;
import org.webbitserver.wrapper.WebSocketConnectionWrapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketClient_ESTest extends WebSocketClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      InputStream inputStream0 = null;
      String string0 = "";
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketClient0.webSocketHandler, webSocketClient0, webSocketClient0.nextId);
      webSocketClient0.webSocketHandler = (WebSocketHandler) reconnectingWebSocketHandler0;
      WebSocketClient webSocketClient1 = webSocketClient0.setupSsl(inputStream0, string0);
      WebSocketClient.ACCEPT_GUID = webSocketClient0.ACCEPT_GUID;
      WebSocketClient webSocketClient2 = webSocketClient1.reconnectEvery(webSocketClient0.nextId);
      StubHttpRequest stubHttpRequest0 = new StubHttpRequest();
      HttpRequestWrapper httpRequestWrapper0 = new HttpRequestWrapper(stubHttpRequest0);
      HttpRequestWrapper httpRequestWrapper1 = httpRequestWrapper0.data(webSocketClient2.base64Nonce, (Object) string0);
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(NullPointerException e) {
         //
         // remoteAddress
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          URI uRI0 = MockURI.URI(string0);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          int int0 = 1600;
          ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, scheduledThreadPoolExecutor0);
          long long0 = 425L;
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
          WebSocketClient webSocketClient2 = webSocketClient1.reconnectEvery(int0);
          WebSocketClient webSocketClient3 = webSocketClient2.start();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      String string0 = "000";
      URI uRI1 = MockURI.resolve(uRI0, string0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = 237L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0);
      // Undeclared exception!
      try { 
        webSocketClient1.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          URI uRI0 = MockURI.URI(string0);
          WebSocketHandler webSocketHandler0 = null;
          StubConnection stubConnection0 = new StubConnection();
          WebSocketConnectionWrapper webSocketConnectionWrapper0 = new WebSocketConnectionWrapper(stubConnection0);
          String string1 = "Host";
          WebSocketConnectionWrapper webSocketConnectionWrapper1 = webSocketConnectionWrapper0.send(string1);
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, webSocketConnectionWrapper1);
          WebSocketClient webSocketClient1 = webSocketClient0.start();
          webSocketClient0.remoteAddress = webSocketClient1.remoteAddress;
          long long0 = 0L;
          WebSocketClient webSocketClient2 = webSocketClient1.reconnectEvery(long0);
          EventSourceMessage eventSourceMessage0 = new EventSourceMessage();
          String string2 = "http";
          EventSourceMessage eventSourceMessage1 = eventSourceMessage0.comment(string2);
          long long1 = 1L;
          EventSourceMessage eventSourceMessage2 = eventSourceMessage1.id(long1);
          EventSourceMessage eventSourceMessage3 = eventSourceMessage2.id(webSocketClient2.ACCEPT_GUID);
          String string3 = "";
          EventSourceMessage eventSourceMessage4 = eventSourceMessage3.data(string3);
          StubConnection stubConnection1 = stubConnection0.send(eventSourceMessage4);
          WebSocketClient webSocketClient3 = webSocketClient2.start();
          String string4 = "r]6E";
          StubConnection stubConnection2 = stubConnection0.send(string4);
          WebSocket webSocket0 = webSocketClient3.close();
          EventSourceMessage eventSourceMessage5 = new EventSourceMessage();
          EventSourceMessage eventSourceMessage6 = eventSourceMessage5.retry((Long) webSocketClient0.nextId);
          EventSourceMessage eventSourceMessage7 = eventSourceMessage5.id(webSocketClient0.nextId);
          Object object0 = WebSocketClient.nextId();
          EventSourceMessage eventSourceMessage8 = eventSourceMessage6.id(webSocketClient3.ACCEPT_GUID);
          EventSourceMessage eventSourceMessage9 = eventSourceMessage6.id(webSocketClient0.ACCEPT_GUID);
          StubConnection stubConnection3 = stubConnection0.send(eventSourceMessage6);
          Object object1 = WebSocketClient.nextId();
          HttpRequest httpRequest0 = webSocketClient3.createNettyHttpRequest(string0, webSocketClient1.ACCEPT_GUID);
          WebSocketClient webSocketClient4 = webSocketClient0.start();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      try { 
        MockURI.URI(string0, string1, string1);
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = 8L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient1, webSocketClient1.nextId);
      WebSocketConnection webSocketConnection0 = null;
      reconnectingWebSocketHandler0.onClose(webSocketConnection0);
      WebSocketClient webSocketClient2 = null;
      try {
        webSocketClient2 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, webSocketClient1.executor);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Object object0 = WebSocketClient.nextId();
      WebSocketClient webSocketClient0 = new WebSocketClient();
      String string0 = "l\" +d[ugJ>:f7";
      HttpRequest httpRequest0 = webSocketClient0.createNettyHttpRequest(string0, string0);
      byte byte0 = webSocketClient0.randomByte();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byte byte1 = (byte) (-22);
      byteArray0[3] = byte1;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        webSocketClient0.setupSsl(byteArrayInputStream0, string0);
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      int int0 = 443;
      Random.setNextRandom(int0);
      WebSocketClient webSocketClient0 = new WebSocketClient();
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(NullPointerException e) {
         //
         // remoteAddress
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      InputStream inputStream0 = null;
      String string0 = ":)k7@N:p";
      SslFactory sslFactory0 = new SslFactory(inputStream0, string0);
      SSLContext sSLContext0 = sslFactory0.getClientContext();
      webSocketClient0.sslFactory = sslFactory0;
      WebSocketClient webSocketClient1 = webSocketClient0.setupSsl(inputStream0, string0);
      String string1 = webSocketClient0.base64Nonce();
      webSocketClient1.sslFactory = webSocketClient0.sslFactory;
      WebSocket webSocket0 = webSocketClient1.connectionExceptionHandler(webSocketClient0.ioExceptionHandler);
      SSLContext sSLContext1 = sslFactory0.getClientContext();
      WebSocketClient webSocketClient2 = webSocketClient1.setupSsl(inputStream0, string0);
      // Undeclared exception!
      try { 
        webSocketClient1.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = (-636L);
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = webSocketClient1.exceptionHandler;
      webSocketClient1.remoteAddress = webSocketClient0.remoteAddress;
      webSocketClient0.exceptionHandler = thread_UncaughtExceptionHandler0;
      // Undeclared exception!
      try { 
        webSocketClient0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      InputStream inputStream0 = null;
      String string0 = "LK";
      WebSocketClient webSocketClient1 = webSocketClient0.setupSsl(inputStream0, string0);
      long long0 = 3593L;
      byte byte0 = webSocketClient0.randomByte();
      WebSocketClient webSocketClient2 = webSocketClient0.reconnectEvery(long0);
      webSocketClient0.base64Nonce = webSocketClient2.base64Nonce;
      webSocketClient2.sslFactory = webSocketClient0.sslFactory;
      WebSocket webSocket0 = webSocketClient2.connectionExceptionHandler(webSocketClient0.exceptionHandler);
      WebSocket webSocket1 = webSocketClient2.connectionExceptionHandler(webSocketClient0.exceptionHandler);
      InputStream inputStream1 = null;
      WebSocketClient webSocketClient3 = webSocketClient2.setupSsl(inputStream1, webSocketClient0.ACCEPT_GUID);
      String string1 = webSocketClient3.base64Nonce();
      webSocketClient3.executor = webSocketClient0.executor;
      // Undeclared exception!
      try { 
        webSocketClient2.start();
      } catch(NullPointerException e) {
         //
         // remoteAddress
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      WebSocket webSocket0 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      long long0 = 1384L;
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      WebSocketClient webSocketClient1 = null;
      try {
        webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      WebSocketHandler webSocketHandler0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      // Undeclared exception!
      try { 
        webSocketClient0.start();
      } catch(RuntimeException e) {
         //
         // Failed to initialize a pipeline.
         //
         verifyException("org.jboss.netty.bootstrap.ClientBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      int int0 = 80;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      String string0 = "+<N2$b3,vf0v8$";
      String string1 = "";
      // Undeclared exception!
      try { 
        webSocketClient0.setupSsl(pipedInputStream0, string1);
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      URI uRI0 = null;
      WebSocketClient webSocketClient1 = null;
      try {
        webSocketClient1 = new WebSocketClient(uRI0, webSocketClient0.webSocketHandler, webSocketClient0.executor);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      String string0 = "-";
      URI uRI2 = MockURI.resolve(uRI1, string0);
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      HttpRequest httpRequest0 = webSocketClient0.createNettyHttpRequest(string0, string0);
      WebSocket webSocket0 = webSocketClient0.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
      long long0 = (-111L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocket0, long0);
      WebSocketClient webSocketClient1 = null;
      try {
        webSocketClient1 = new WebSocketClient(uRI2, reconnectingWebSocketHandler0, webSocketClient0.executor);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Object object0 = WebSocketClient.nextId();
      WebSocketClient webSocketClient0 = new WebSocketClient();
      long long0 = 638L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      String string0 = "};/z3$O]3";
      // Undeclared exception!
      try { 
        webSocketClient1.createNettyHttpRequest(webSocketClient0.base64Nonce, string0);
      } catch(NullPointerException e) {
         //
         // uri
         //
         verifyException("org.jboss.netty.handler.codec.http.DefaultHttpRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = null;
          String string1 = null;
          URI uRI0 = MockURI.URI(string0, string1, string0, string0, string1);
          String string2 = "keep-alive";
          URI uRI1 = MockURI.resolve(uRI0, string2);
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient();
          long long0 = 3182L;
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI1, reconnectingWebSocketHandler0, webSocketClient0.executor);
          // Undeclared exception!
          try { 
            webSocketClient1.start();
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }
}
