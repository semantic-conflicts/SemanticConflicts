/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 10:00:19 GMT 2020
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.Parameter;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.Link;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.ArraySchema;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.parameters.RequestBody;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.responses.ApiResponse;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "!";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      boolean boolean0 = false;
      String string1 = ";(q$c1yX}!6";
      String string2 = null;
      String string3 = "L6x$;#n{8%";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[4], string2).when(externalDocumentation0).description();
      doReturn(stringArray0[1], string3).when(externalDocumentation0).url();
      int int0 = 4052;
      String string4 = "";
      int int1 = (-3736);
      String string5 = "kSwJ";
      String string6 = "K1{:!l>17U91";
      String string7 = "{-B]8.gFg~$5wu^";
      String string8 = "?J|r2xd$";
      String string9 = "io.swagge";
      String string10 = "b;";
      int int2 = 1688;
      String string11 = "tffeJ;kgF(WejzSHG{";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string8).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(stringArray0[5], string9).when(schema0).description();
      doReturn(stringArray0[3], string1, string10, stringArray0[4]).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string0, stringArray0[3]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2, int0).when(schema0).maxProperties();
      doReturn(string4).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string5).when(schema0).minimum();
      doReturn(string6, string0).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(string7, string6).when(schema0).ref();
      doReturn(stringArray0[1], string11).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String[] stringArray1 = new String[5];
      String string12 = "kZaw[YXbZ";
      stringArray1[0] = string12;
      String string13 = "com.fasterxml.jackson.databind.jsontype.SubtypeResolver";
      stringArray1[1] = string13;
      String string14 = "";
      stringArray1[2] = string14;
      String string15 = "";
      stringArray1[3] = string15;
      stringArray1[4] = string11;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray1);
      String string16 = "DOUBLE";
      String string17 = "Pia8I@:(ZO:e'";
      String string18 = "N2%q[v`1s#.O73bloq";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string18).when(linkParameters0).expression();
      doReturn(string17, stringArray0[3]).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string14).when(link0).description();
      doReturn(string16, stringArray0[2]).when(link0).operationId();
      doReturn(stringArray1[1]).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      int int0 = 1;
      int int1 = (-4632);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = new String[9];
      String string0 = "io.swagger.jaxrs2.OperationParser";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "|on{kJgICgSOWl%%";
      stringArray0[2] = string2;
      String string3 = "*/*";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      String string5 = "e9bs#If\\/oTE+pzR";
      stringArray0[5] = string5;
      String string6 = "3cr>S5IbT06b9p";
      stringArray0[6] = string6;
      String string7 = "Bpw";
      stringArray0[7] = string7;
      String string8 = "ZOC)F*/TH>eo(>~4No";
      stringArray0[8] = string8;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      Components components1 = components0.responses(hashMap0);
      ApiResponse apiResponse0 = new ApiResponse();
      Components components2 = components1.addResponses(string1, apiResponse0);
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.content(content0);
      Components components3 = components2.addParameters(stringArray0[0], parameter2);
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      Components components4 = components3.securitySchemes(hashMap1);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[7];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      Components components1 = components0.responses(hashMap0);
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional4 = OperationParser.getRequestBody(requestBody0, components1);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional5 = OperationParser.getArraySchema(arraySchema0);
      MediaType mediaType0 = new MediaType();
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType1 = mediaType0.encoding(map0);
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.parameters.Parameter> schema1 = null;
      MediaType mediaType2 = mediaType1.schema(schema1);
      String string0 = "NO\"~c";
      Example example0 = new Example();
      Object object0 = null;
      Example example1 = example0.value(object0);
      MediaType mediaType3 = mediaType2.addExamples(string0, example1);
      HashMap<String, Example> hashMap1 = new HashMap<String, Example>();
      MediaType mediaType4 = mediaType3.examples(hashMap1);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional6 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      String string0 = "io.swagger.jaxrs2.OperationParser";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Server[] serverArray0 = new Server[2];
      serverArray0[0] = server0;
      serverArray0[1] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      String string1 = "java.langio.swagger.oas.models.ExternalDocumentation";
      String string2 = "io.swagger.jaxrs2.OperationParser";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string1, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string2, (String) null).when(info0).title();
      doReturn(string2, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      Parameter[] parameterArray0 = new Parameter[6];
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      Explode explode0 = Explode.TRUE;
      String string3 = "<we:\\C,mKQi";
      String string4 = "java.langio.swagger.oas.models.security.SecurityScheme";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string5 = null;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[4] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      Components components0 = new Components();
      String string6 = "yL;Baj(ekkqp/z";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components1 = components0.addRequestBodies(string6, requestBody0);
      String string7 = ")XGte`3lq";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components2 = components1.addLinks(string7, link0);
      String string8 = "";
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional3 = OperationParser.getParametersList(parameterArray0, components1);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[7];
      String string0 = "java.lang";
      String string1 = ".VnsF|81/vKP/";
      String string2 = null;
      String string3 = "]\\bN:bOpQm60%}0o";
      String string4 = null;
      String string5 = ",";
      String string6 = "java.langio.swagger.oas.models.security.SecurityScheme";
      String string7 = "y3i(?v<EH";
      String string8 = "io.swagger.jaxrs2.OperationParser";
      String string9 = "yvqx)jJ'_8OQ-\"q9?";
      String string10 = "j=26xD&R#|`:'KPZ8";
      String string11 = "java.langio.swagger.oas.models.security.SecurityScheme";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string0, string3, string4, string3).when(exampleObject0).externalValue();
      doReturn(string0, string0, string0, string0, string1).when(exampleObject0).name();
      doReturn(string5, string6, string4, string7, string2).when(exampleObject0).summary();
      doReturn(string8, string7, string9, string10, string11).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[5] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      String string12 = "io.swagge";
      String string13 = "java.lang";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn(string6, string8, string4, string12, string13).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      String string14 = "Z)T_4P^9[6(&fN9AEiB";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string14, header0);
      String string15 = "<";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string15, pathItem0);
      MediaType mediaType0 = new MediaType();
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType1 = mediaType0.encoding(map0);
      MediaType mediaType2 = mediaType1.example(string15);
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObjectArray0[4]);
      String[] stringArray0 = new String[3];
      stringArray0[1] = string15;
      stringArray0[1] = string14;
      stringArray0[2] = string15;
      boolean boolean0 = true;
      String string16 = "y^eF&!!s0";
      boolean boolean1 = true;
      boolean boolean2 = false;
      String string17 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string18 = "QzF*9305'$~/Y";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string17, string11).when(externalDocumentation0).description();
      doReturn(string18, string9).when(externalDocumentation0).url();
      String string19 = "pw,qpH%k";
      int int0 = (-2161);
      String string20 = "!N";
      int int1 = 262144;
      String string21 = "#/components/schemas/";
      String string22 = null;
      String string23 = "/UG 55V[]3;#\"?";
      boolean boolean3 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string14, string22).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(stringArray0[1], string4).when(schema0).description();
      doReturn(string14, string16, string23, string4).when(schema0).example();
      doReturn(boolean1, boolean3).when(schema0).exclusiveMaximum();
      doReturn(boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string19, string8).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string20).when(schema0).maximum();
      doReturn(int1, int0).when(schema0).minProperties();
      doReturn(string21).when(schema0).minimum();
      doReturn(stringArray0[0]).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string22).when(schema0).ref();
      doReturn(stringArray0[2], string0).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Components components2 = components1.addCallbacks(string15, callback1);
      String string24 = "Z@CCtB@Loy4{G05<V";
      SecurityScheme securityScheme0 = new SecurityScheme();
      String string25 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      SecurityScheme securityScheme1 = securityScheme0.description(string25);
      Components components3 = components2.addSecuritySchemes(string24, securityScheme1);
      Map<String, Header> map1 = components3.getHeaders();
      Components components4 = components3.headers(map1);
      Components components5 = null;
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components5);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Link[] linkArray0 = new Link[7];
      String string0 = "jKK";
      String string1 = "G5}";
      String string2 = "";
      String string3 = "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer";
      String string4 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string5 = "java.langio.swagger.oas.models.ExternalDocumentation";
      String string6 = null;
      String string7 = "o";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string0, string1, string2).when(link0).description();
      doReturn(string2, string5, string7, string5, string3).when(link0).name();
      doReturn(string0, string3, string3, string4, string5).when(link0).operationId();
      doReturn(string1, string4, string4, string4, string6).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string8 = ",";
      String string9 = "java.langio.swagger.oas.models.ExternalDocumentation";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      String string10 = "7U'wDG ./[PcX1 ";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string11 = "^";
      String string12 = "java.lang";
      String string13 = "&m0G0+J";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string8, string10).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string5, string11).when(info0).termsOfService();
      doReturn(string0, string12).when(info0).title();
      doReturn(string9, string13).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string14 = "wIZ?W/8e";
      String string15 = "XSm[Y8/KE!Y&53";
      String string16 = "java.langio.swagger.oas.models.security.SecurityScheme";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string14, string15).when(externalDocumentation0).description();
      doReturn(string9, string16).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Server[] serverArray0 = new Server[1];
      String string17 = "string value";
      String string18 = "<";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string17, (String) null).when(server0).description();
      doReturn(string18, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "?qR%oI/aq";
      String string1 = "i";
      String string2 = "java.lang";
      String string3 = "!Scm@|";
      String string4 = "ElC/<qn[";
      String string5 = "R";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string4).when(contact0).email();
      doReturn(string3, string5).when(contact0).name();
      doReturn(string4, string5).when(contact0).url();
      String string6 = "<lAdLjJ/BRd(DO`rh@";
      String string7 = ";E@p7";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(license0).name();
      doReturn(string6, string7).when(license0).url();
      String string8 = null;
      String string9 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string1).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string1, string8).when(info0).termsOfService();
      doReturn(string0, string9).when(info0).title();
      doReturn(string2, string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string10 = "io.swagge";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string10;
      stringArray0[2] = string10;
      String string11 = "A.^3a,q%vFp6,*Bh$B";
      stringArray0[3] = string11;
      boolean boolean0 = true;
      String string12 = "tDD0`NC0iM052";
      String string13 = "";
      boolean boolean1 = true;
      String string14 = "aU";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[1], string14).when(externalDocumentation0).description();
      doReturn(stringArray0[1], string6).when(externalDocumentation0).url();
      String string15 = "INTEGER";
      int int0 = 110;
      int int1 = 2008;
      boolean boolean2 = false;
      String string16 = "";
      boolean boolean3 = false;
      boolean boolean4 = true;
      String string17 = "Problem with definition of ";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string10, string8).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string12, string12).when(schema0).description();
      doReturn(string13, stringArray0[2], string16).when(schema0).example();
      doReturn(boolean1, boolean3).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean4).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string15, string0).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, int0).when(schema0).maxProperties();
      doReturn(string11).when(schema0).maximum();
      doReturn(int1, int1).when(schema0).minProperties();
      doReturn(stringArray0[1]).when(schema0).minimum();
      doReturn(string11, string11).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(stringArray0[3], string17).when(schema0).ref();
      doReturn(string13).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      OperationParser operationParser0 = new OperationParser();
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      int int0 = (-4841);
      Class<io.swagger.oas.models.info.Contact> class0 = io.swagger.oas.models.info.Contact.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "s";
      boolean boolean1 = true;
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      boolean boolean2 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean1, boolean2).when(requestBody0).required();
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      Map<String, Header> map0 = apiResponse0.getHeaders();
      Components components1 = components0.headers(map0);
      String string1 = "";
      io.swagger.oas.models.parameters.RequestBody requestBody1 = new io.swagger.oas.models.parameters.RequestBody();
      Components components2 = components1.addRequestBodies(string1, requestBody1);
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components3 = components2.requestBodies(hashMap0);
      String string2 = "F{K`]0C!@;e3)U19e;";
      Header header0 = new Header();
      Header.StyleEnum header_StyleEnum0 = Header.StyleEnum.SIMPLE;
      Header header1 = header0.style(header_StyleEnum0);
      Header header2 = header1.example(string1);
      Components components4 = components3.addHeaders(string2, header2);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string0 = "#/components/schemas/";
      String string1 = ",";
      String string2 = "BjenQ{5qI";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string2, (String) null).when(contact0).url();
      License license0 = null;
      String string3 = "java.langio.swagger.oas.models.ExternalDocumentation";
      String string4 = "";
      String string5 = "'/.}";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string3).when(info0).termsOfService();
      doReturn(string0, string4).when(info0).title();
      doReturn(string0, string5).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[7];
      Class<io.swagger.oas.models.media.ArraySchema> class0 = io.swagger.oas.models.media.ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String string6 = "AgX-\\-b>ox|X.ym*4I";
      String string7 = "X#]_%,eq]";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0, string0).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = arraySchema0.getProperties();
      components0.setSchemas(map1);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string0 = "yw";
      String string1 = ";>;#8;B<X-h\\";
      String string2 = "java.langio.swagger.oas.models.security.SecurityScheme";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(linkParameters0).expression();
      doReturn(string0, string2).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Components components1 = components0.links(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map2 = arraySchema0.getProperties();
      Components components2 = components1.schemas(map2);
      String string3 = "";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.media.Content content1 = null;
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.content(content1);
      Components components3 = components2.addParameters(string3, parameter1);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components4 = components3.securitySchemes(hashMap0);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components4);
      OperationParser operationParser0 = new OperationParser();
      int int0 = 432;
      Class<io.swagger.oas.models.media.Content> class0 = io.swagger.oas.models.media.Content.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkParameters linkParameters1 = null;
      Map<String, String> map3 = OperationParser.getLinkParameters(linkParameters1);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[3];
      String string4 = "?f^B";
      String string5 = "QItor3MZ,R=`&";
      String string6 = "io.swagge";
      Link[] linkArray1 = new Link[0];
      String string7 = "o-";
      String string8 = null;
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0).when(apiResponse0).content();
      doReturn(string4, string5, string6, operationParser0.COMMA, string3).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string7, string2, operationParser0.DEFAULT_DESCRIPTION, string8).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components1);
      Map<String, String> map4 = OperationParser.getLinkParameters(linkParameters1);
      String string9 = "G.mp&IQ\"(({u^5N2";
      String string10 = "HY%TZ.czx/]x~O,";
      String string11 = "java.langio.swagger.oas.models.security.SecurityScheme";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string9, string10).when(externalDocumentation0).description();
      doReturn(string5, string11).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "io.swagge";
      String string1 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license1).name();
      doReturn(string1).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license1);
      MediaType mediaType0 = new MediaType();
      String string2 = null;
      Example example0 = new Example();
      Example example1 = example0.value(string2);
      MediaType mediaType1 = mediaType0.addExamples(string2, example1);
      Example example2 = example1.$ref(string2);
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.addExamples(string2, example1);
      Map<String, Example> map0 = parameter1.getExamples();
      MediaType mediaType2 = mediaType1.examples(map0);
      String string3 = "java.lang";
      Example example3 = example1.summary(string3);
      String string4 = "#/components/schemas/";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string4, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType2, exampleObject0);
      int int0 = (-1069);
      int int1 = 84;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema0);
      String string5 = "io.swagge";
      String[] stringArray1 = new String[0];
      boolean boolean1 = false;
      boolean boolean2 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string6 = "io.swagge";
      int int2 = 69;
      String string7 = "java.lang";
      String string8 = "no String-argument constructor/factory method to deserialize from String value ('%s')";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(schema1)._default();
      doReturn(stringArray1).when(schema1)._enum();
      doReturn(boolean1).when(schema1).deprecated();
      doReturn(string5, (String) null).when(schema1).description();
      doReturn(string0, string2, (String) null).when(schema1).example();
      doReturn(boolean2).when(schema1).exclusiveMaximum();
      doReturn(boolean1).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema1).externalDocs();
      doReturn(string2).when(schema1).format();
      doReturn(int0).when(schema1).maxLength();
      doReturn(string6).when(schema1).maximum();
      doReturn(int2, 0).when(schema1).minProperties();
      doReturn(string4).when(schema1).minimum();
      doReturn(string7, (String) null).when(schema1).pattern();
      doReturn(boolean0, false).when(schema1).readOnly();
      doReturn(string8, (String) null).when(schema1).ref();
      doReturn(string5, (String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional5 = OperationParser.getSchemaFromAnnotation(schema1);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string7, (String) null).when(server0).description();
      doReturn(string4, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional4 = OperationParser.getExternalDocumentation(externalDocumentation1);
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = null;
      Optional<io.swagger.oas.models.parameters.RequestBody> optional5 = OperationParser.getRequestBody(requestBody0, components0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Server[] serverArray0 = new Server[1];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional6 = OperationParser.getServers(serverArray0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<io.swagger.oas.models.media.Content> optional7 = OperationParser.getContent(content0, produces0, produces0, components0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional8 = OperationParser.getContact(contact0);
      Content[] contentArray0 = new Content[0];
      Optional<io.swagger.oas.models.media.Content> optional9 = OperationParser.getContents(contentArray0, components0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      String string0 = "^a#b*0Mz";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string0);
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.items(arraySchema0);
      mediaType0.setSchema(arraySchema2);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Link[] linkArray0 = new Link[1];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, Example> map0 = components0.getExamples();
      Components components1 = components0.examples(map0);
      String string0 = null;
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components2 = components1.addSchemas(string0, arraySchema0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components2);
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = null;
      Components components0 = new Components();
      Map<String, Callback> map0 = components0.getCallbacks();
      Components components1 = components0.callbacks(map0);
      String string0 = "spaceDelimited";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string0, securityScheme0);
      String string1 = "";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string1, pathItem0);
      String string2 = null;
      Callback callback2 = callback1.addPathItem(string2, pathItem0);
      Components components3 = components2.addCallbacks(string1, callback2);
      String string3 = "";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      String string4 = "!nCD[.VAh1veQ,j<";
      Boolean boolean0 = Boolean.valueOf(string4);
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.allowEmptyValue(boolean0);
      Example example0 = new Example();
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.addExamples(string2, example0);
      Components components4 = components3.addParameters(string3, parameter2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces1, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact>();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      String string0 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema0.items(arraySchema1);
      io.swagger.oas.models.media.ArraySchema arraySchema3 = arraySchema1.type(string0);
      boolean boolean0 = components0.equals(arraySchema3);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[5];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Header header0 = new Header();
      Components components1 = components0.addHeaders(operationParser0.COMMA, header0);
      String string0 = null;
      Example example0 = new Example();
      Components components2 = components1.addExamples(string0, example0);
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.parameters.Parameter.StyleEnum parameter_StyleEnum0 = io.swagger.oas.models.parameters.Parameter.StyleEnum.DEEPOBJECT;
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.style(parameter_StyleEnum0);
      Components components3 = components2.addParameters(string0, parameter1);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components1.getSchemas();
      Components components4 = components3.schemas(map0);
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components4);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      LinkParameters linkParameters0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Link[] linkArray0 = new Link[7];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      RequestBody requestBody0 = null;
      Components components0 = new Components();
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      Components components1 = components0.parameters(hashMap0);
      String string0 = "";
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      Components components2 = components1.addLinks(string0, link1);
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      Components components3 = components2.securitySchemes(hashMap1);
      Example example0 = new Example();
      String string1 = "no description";
      Example example1 = example0.externalValue(string1);
      String string2 = "";
      Example example2 = example1.$ref(string2);
      Components components4 = components3.addExamples(string0, example2);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Schema<io.swagger.oas.models.parameters.Parameter>> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Schema<io.swagger.oas.models.parameters.Parameter>>();
      Map<String, io.swagger.oas.models.media.Schema> map0 = schema0.getProperties();
      Components components1 = components0.schemas(map0);
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components2 = components1.requestBodies(hashMap0);
      Map<String, Callback> map1 = components2.getCallbacks();
      Components components3 = components2.callbacks(map1);
      String string0 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components4 = components3.addRequestBodies(string0, requestBody0);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Link[] linkArray0 = new Link[6];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(linkArray0[2]);
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = new Components();
      String string0 = "no description";
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      Components components1 = components0.addLinks(string0, link1);
      Map<String, Header> map2 = components1.getHeaders();
      Components components2 = components0.headers(map2);
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components3 = components2.addParameters(string0, parameter0);
      ApiResponses apiResponses0 = new ApiResponses();
      String string1 = "";
      ApiResponse apiResponse0 = new ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(string1, apiResponse0);
      Components components4 = components3.responses(apiResponses1);
      Map<String, SecurityScheme> map3 = null;
      Components components5 = components4.securitySchemes(map3);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components5);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      Server[] serverArray0 = new Server[3];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Parameter[] parameterArray0 = new Parameter[2];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      Components components0 = new Components();
      Map<String, Example> map1 = components0.getExamples();
      Components components1 = components0.examples(map1);
      String string0 = "sqD NJ`OS{";
      ApiResponse apiResponse0 = new ApiResponse();
      Components components2 = components1.addResponses(string0, apiResponse0);
      Map<String, Callback> map2 = components2.getCallbacks();
      Components components3 = components2.callbacks(map2);
      String string1 = "com.fasterxml.jackson.databind.introspect.AnnotatedClass";
      Header header0 = new Header();
      Header header1 = header0.description(string0);
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      Header header2 = header1.explode(boolean1);
      Components components4 = components3.addHeaders(string1, header2);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Parameter parameter0 = null;
      Components components0 = new Components();
      Encoding encoding0 = new Encoding();
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      Encoding encoding1 = encoding0.explode(boolean1);
      String string0 = "java.lang";
      encoding0.setStyle(string0);
      Map<String, Header> map0 = encoding1.getHeaders();
      Components components1 = components0.headers(map0);
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components1);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Optional<io.swagger.oas.models.parameters.Parameter> optional2 = OperationParser.getParameter(parameter0, components0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[4];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components1);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components1 = components0.schemas(map0);
      String string0 = "java.lang";
      SecurityScheme securityScheme0 = null;
      Components components2 = components1.addSecuritySchemes(string0, securityScheme0);
      Map<String, Header> map1 = null;
      Components components3 = components2.headers(map1);
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      String string1 = "";
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.description(string1);
      Components components4 = components2.addRequestBodies(string0, requestBody1);
      String string2 = "virtual";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      String string3 = null;
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.$ref(string3);
      String string4 = "Missing field (broken JDK (de)serialization?)";
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.description(string4);
      Components components5 = components3.addParameters(string2, parameter2);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      int int0 = (-1159);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "qx.cetB\"";
      String string1 = "h3fPRE";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string0, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      MediaType mediaType0 = new MediaType();
      String string0 = "";
      MediaType mediaType1 = mediaType0.example(string0);
      Example example0 = new Example();
      MediaType mediaType2 = mediaType1.addExamples(string0, example0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      MediaType mediaType3 = mediaType2.schema(arraySchema1);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType3, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Object object0 = new Object();
      boolean boolean0 = mediaType0.equals(object0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components1 = components0.callbacks(hashMap0);
      String string0 = "email";
      Header header0 = null;
      Components components2 = components1.addHeaders(string0, header0);
      String string1 = "";
      Callback callback0 = new Callback();
      Components components3 = components2.addCallbacks(string1, callback0);
      Map<String, SecurityScheme> map1 = components1.getSecuritySchemes();
      Components components4 = components3.securitySchemes(map1);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[1];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null).when(apiResponse0).content();
      doReturn((String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components1 = components0.addParameters(string0, parameter0);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components2 = components1.securitySchemes(hashMap0);
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Components components3 = components2.links(map0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = null;
      Components components4 = components3.requestBodies(map1);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      OperationParser operationParser0 = new OperationParser();
      Server server1 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server1);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      String string0 = "neH!m4{q1kt";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string0, example0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components1.getParameters();
      Components components2 = components0.parameters(map0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponse apiResponse0 = new ApiResponse();
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      Components components3 = components2.responses(apiResponses1);
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.description(apiResponses0.DEFAULT);
      Components components4 = components3.addParameters(operationParser0.COMMA, parameter2);
      Callback callback0 = new Callback();
      PathItem pathItem0 = null;
      Callback callback1 = callback0.addPathItem(operationParser0.DEFAULT_DESCRIPTION, pathItem0);
      PathItem pathItem1 = new PathItem();
      Callback callback2 = callback1.addPathItem(operationParser0.DEFAULT_DESCRIPTION, pathItem1);
      String string1 = ">";
      Callback callback3 = callback2.addPathItem(string1, pathItem0);
      Components components5 = components4.addCallbacks(operationParser0.MEDIA_TYPE, callback3);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "TGBa";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string0, header0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = null;
      Components components2 = components1.parameters(map0);
      Map<String, SecurityScheme> map1 = components1.getSecuritySchemes();
      Components components3 = components2.securitySchemes(map1);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      io.swagger.oas.models.links.Link link1 = link0.server(server0);
      Map<String, Header> map2 = link1.getHeaders();
      Components components4 = components3.headers(map2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      Link[] linkArray0 = new Link[5];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      OperationParser operationParser0 = new OperationParser();
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = null;
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      Components components1 = components0.addLinks(string0, link1);
      String string1 = "a5v+k{pg?V=R{c|J";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string1, pathItem0);
      Components components2 = components1.addCallbacks(string1, callback1);
      Map<String, Header> map1 = null;
      Components components3 = components2.headers(map1);
      String string2 = "";
      ApiResponse apiResponse0 = new ApiResponse();
      ApiResponse apiResponse1 = apiResponse0.headers(map1);
      Components components4 = components3.addResponses(string2, apiResponse1);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      String[] stringArray0 = new String[7];
      stringArray0[0] = operationParser0.COMMA;
      String string0 = "NON_EMPTY";
      stringArray0[1] = string0;
      String string1 = "can only convert 1-character Strings";
      stringArray0[2] = string1;
      String string2 = "A#=Pb!vEi-7";
      stringArray0[3] = string2;
      stringArray0[4] = operationParser0.COMMA;
      stringArray0[5] = operationParser0.MEDIA_TYPE;
      stringArray0[6] = operationParser0.MEDIA_TYPE;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      Link[] linkArray0 = new Link[3];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "Invalid array-delegate-creator definition for ";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string0, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      Link[] linkArray0 = new Link[1];
      String string0 = "COOKIE";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      Server[] serverArray0 = new Server[9];
      String string0 = "CI[:ZmLvw";
      String string1 = "' has value that is not of type ArrayNode (but ";
      String string2 = "nPj5{Gb0(jNe%Tl*&A";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string1, string1).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      serverArray0[8] = serverArray0[7];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      String string0 = "->";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.MEDIA_TYPE, (String) null).when(contact0).email();
      doReturn(operationParser0.COMMA, (String) null).when(contact0).name();
      doReturn(string0, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string1 = "y,'=:";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string1, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).expression();
      doReturn(operationParser0.MEDIA_TYPE, (String) null).when(linkParameters1).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMPONENTS_REF, (String) null).when(contact1).email();
      doReturn(operationParser0.COMMA, (String) null).when(contact1).name();
      doReturn(string1, (String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact1);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.parameters.RequestBody> map2 = null;
      Components components1 = components0.requestBodies(map2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces1, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "^$]g531wADFw";
      String string1 = "aK";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      OperationParser operationParser0 = new OperationParser();
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string2 = "io.swagger.jaxrs2.OperationParser";
      String string3 = null;
      String string4 = ":";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string2, string3).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string5 = ",";
      SecurityScheme securityScheme0 = null;
      Components components1 = components0.addSecuritySchemes(string5, securityScheme0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components0.getParameters();
      Components components2 = components1.parameters(map0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = components1.getRequestBodies();
      Components components3 = components2.requestBodies(map1);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components4 = components3.responses(apiResponses0);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "*/*";
      String string1 = "=x<o3W,/-W]5p:-*";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string1, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      boolean boolean0 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string1, (String) null).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components1 = components0.securitySchemes(hashMap0);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Map<String, Header> map0 = link0.getHeaders();
      Components components2 = components1.headers(map0);
      String string2 = "";
      io.swagger.oas.models.parameters.RequestBody requestBody1 = new io.swagger.oas.models.parameters.RequestBody();
      Map<String, io.swagger.oas.models.media.Schema> map1 = components2.getSchemas();
      Components components3 = components1.schemas(map1);
      io.swagger.oas.models.parameters.RequestBody requestBody2 = requestBody1.description(string2);
      Components components4 = components2.addRequestBodies(string2, requestBody2);
      HashMap<String, io.swagger.oas.models.links.Link> hashMap1 = new HashMap<String, io.swagger.oas.models.links.Link>();
      boolean boolean1 = components4.equals(link0);
      io.swagger.oas.models.links.Link link1 = hashMap1.put(string0, link0);
      String string3 = requestBody1.toString();
      Components components5 = components4.links(hashMap1);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components5);
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
      String string4 = "io.swagger.jaxrs2.OperationParser";
      RequestBody requestBody3 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody3).content();
      doReturn(string4, (String) null).when(requestBody3).description();
      doReturn(boolean0, false).when(requestBody3).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody3, components1);
      String string5 = "    url: ";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(externalDocumentation1).description();
      doReturn(string2).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation1);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      Link[] linkArray0 = new Link[2];
      String string0 = "l'J}oJ~`RfnKcs%";
      String string1 = "o\"?9A[~IK";
      String string2 = "com.fasterxml.jackson.databind.BeanDescription";
      String string3 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null).when(link0).name();
      doReturn(string0, string2, (String) null, (String) null).when(link0).operationId();
      doReturn(string2, string3).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      LinkParameters linkParameters0 = null;
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      OperationParser operationParser0 = new OperationParser();
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      String string4 = "io.swagger.jackson.SchemaSerializer";
      String string5 = "*9cqB>";
      boolean boolean1 = true;
      boolean boolean2 = true;
      ExternalDocumentation externalDocumentation0 = null;
      int int0 = 602;
      String string6 = "";
      boolean boolean3 = false;
      String string7 = "";
      String string8 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string4, (String) null).when(schema0).description();
      doReturn(string3, string5, (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean2, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string1, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string6).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string0).when(schema0).minimum();
      doReturn(operationParser0.COMPONENTS_REF, (String) null).when(schema0).pattern();
      doReturn(boolean3).when(schema0).readOnly();
      doReturn(string7).when(schema0).ref();
      doReturn(string8).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = new Content[5];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[5];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      MediaType mediaType0 = new MediaType();
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string5, example0);
      Map<String, Example> map2 = mediaType1.getExamples();
      MediaType mediaType2 = mediaType1.examples(map2);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<Integer> schema1 = new io.swagger.oas.models.media.Schema<Integer>();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema1);
      MediaType mediaType3 = mediaType2.schema(arraySchema1);
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType3, exampleObjectArray0[0]);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string0 = "#/components/schemas/";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      int int0 = (-2201);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      String string1 = null;
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      Link[] linkArray0 = new Link[4];
      String string0 = ">";
      String string1 = "ELqIq::b]c`Qe!y{?";
      String string2 = "";
      String string3 = "not a valid Integer value";
      String string4 = "";
      String string5 = "AnnotationIntrospector.";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string1, string2, (String) null).when(link0).description();
      doReturn((String) null, (String) null).when(link0).name();
      doReturn(string3, string0, string2, string4, (String) null).when(link0).operationId();
      doReturn(string1, string1, string5, string2, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      int int0 = 3853;
      int int1 = 5486;
      int int2 = 1592;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = new String[5];
      String string6 = "#/components/schemas/";
      stringArray0[0] = string6;
      String string7 = "";
      stringArray0[1] = string7;
      String string8 = "io.swagger.jaxrs2.OperationParser";
      stringArray0[2] = string8;
      String string9 = "zF=|/E3";
      stringArray0[3] = string9;
      String string10 = "JHw!{R/NY.5";
      stringArray0[4] = string10;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      MediaType mediaType0 = null;
      String string0 = "OR";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Content[] contentArray0 = new Content[3];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[3];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      Components components0 = new Components();
      HashMap<String, io.swagger.oas.models.links.Link> hashMap0 = new HashMap<String, io.swagger.oas.models.links.Link>();
      Components components1 = components0.links(hashMap0);
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap1 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      Components components2 = components1.parameters(hashMap1);
      String string0 = "io.swagger.util.ParameterDeserializer";
      Example example0 = new Example();
      Example example1 = example0.summary(string0);
      Example example2 = example1.$ref(operationParser0.MEDIA_TYPE);
      Map<String, Object> map0 = example2.getExtensions();
      components1.setExtensions(map0);
      ApiResponse apiResponse0 = new ApiResponse();
      Header header0 = new Header();
      ApiResponse apiResponse1 = apiResponse0.addHeaderObject(operationParser0.COMPONENTS_REF, header0);
      Components components3 = components2.addResponses(string0, apiResponse1);
      String string1 = "_OCY0Q#r;$";
      Example example3 = new Example();
      components0.setLinks(hashMap0);
      String string2 = "G";
      Example example4 = example3.externalValue(string2);
      Example example5 = example4.summary(operationParser0.COMPONENTS_REF);
      String string3 = "cnr8";
      String string4 = "Xp:6\"4tVWY0Qbs!\\";
      Example example6 = example5.summary(string4);
      Components components4 = components3.addExamples(string3, example6);
      OperationParser operationParser1 = new OperationParser();
      example4.setValue(operationParser1);
      Components components5 = components3.addExamples(string1, example5);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components5);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "Y~f";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Parameter[] parameterArray0 = new Parameter[9];
      boolean boolean0 = true;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      String string1 = "";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.DEFAULT;
      String string2 = "";
      String string3 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string1).when(parameter0).description();
      doReturn(explode0, explode1).when(parameter0).explode();
      doReturn(string2).when(parameter0).in();
      doReturn(string3).when(parameter0).name();
      doReturn(boolean0, false).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string1).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      Components components0 = new Components();
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components1 = components0.headers(hashMap0);
      HashMap<String, Callback> hashMap1 = new HashMap<String, Callback>();
      Components components2 = components1.callbacks(hashMap1);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[1];
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean1 = true;
      String string0 = "*/*";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema1 = null;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string0, (String) null).when(parameter0).name();
      doReturn(boolean1, false).when(parameter0).required();
      doReturn(string0, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      String string1 = "pK[SeS>Z";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components1 = components0.addRequestBodies(string1, requestBody0);
      Map<String, io.swagger.oas.models.links.Link> map0 = components0.getLinks();
      Components components2 = components1.links(map0);
      Example example0 = new Example();
      String string2 = "X\">.>}b?l6n-H4=b4V~";
      Example example1 = example0.externalValue(string2);
      Components components3 = components2.addExamples(string1, example1);
      Callback callback0 = new Callback();
      String string3 = "";
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string3, pathItem0);
      Components components4 = components3.addCallbacks(string2, callback1);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.*_/*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "y+7q%},hhcr r";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.example(string0);
      Example example1 = example0.value(mediaType1);
      String string1 = "";
      Example example2 = example1.summary(string1);
      String string2 = "@a )/mC";
      Example example3 = example2.$ref(string2);
      String string3 = "";
      example3.setExternalValue(string0);
      Example example4 = example3.externalValue(string3);
      MediaType mediaType2 = mediaType0.addExamples(string0, example4);
      String string4 = "B/u";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string4, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      boolean boolean0 = true;
      String string1 = "";
      String string2 = "**K}gE(?.fpr {V{";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = null;
      int int0 = 1;
      int int1 = (-1780);
      String string3 = "#/components/schemas/";
      boolean boolean2 = true;
      String string4 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string2, string2, (String) null, (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string0).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(stringArray0[0]).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string3).when(schema0).minimum();
      doReturn(string2, (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(stringArray0[0]).when(schema0).ref();
      doReturn(string4).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[1]).when(link0).description();
      doReturn(string3, (String) null).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      boolean boolean3 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string3, (String) null).when(requestBody0).description();
      doReturn(boolean3, false).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components1 = components0.securitySchemes(map0);
      String string5 = " r;+Hc W(zh?TL";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components2 = components1.addParameters(string5, parameter0);
      String string6 = "G0{S";
      Callback callback0 = new Callback();
      String string7 = "java.lang";
      String string8 = "";
      components2.addExtension(string8, optional0);
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string7, pathItem0);
      Components components3 = components2.addCallbacks(string6, callback1);
      SecurityScheme securityScheme0 = null;
      ApiResponse apiResponse0 = new ApiResponse();
      String string9 = "v-,w!Q";
      ApiResponse apiResponse1 = apiResponse0.$ref(string9);
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      ApiResponse apiResponse2 = apiResponse1.link(string6, link1);
      io.swagger.oas.models.media.Content content0 = null;
      ApiResponse apiResponse3 = apiResponse2.content(content0);
      Map<String, Header> map1 = apiResponse3.getHeaders();
      components3.setHeaders(map1);
      PathItem pathItem1 = callback1.put(string9, pathItem0);
      Components components4 = components3.addSecuritySchemes(string5, securityScheme0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components4);
      Parameter[] parameterArray0 = new Parameter[0];
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional3 = OperationParser.getParametersList(parameterArray0, components0);
      OperationParser operationParser0 = new OperationParser();
      int int2 = 0;
      int int3 = (-1794);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int2, int3).when(arraySchema0).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean1, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema0);
      String string10 = "7BUri@";
      String string11 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string10, (String) null).when(license0).name();
      doReturn(string11).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional5 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(contact0).email();
      doReturn(string0).when(contact0).name();
      doReturn(string0).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      boolean boolean0 = true;
      String string1 = "";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string2 = "";
      int int0 = 1020;
      String string3 = "com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer";
      String string4 = "";
      String string5 = "{";
      String string6 = "no array delegate creator specified";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(stringArray0[0]).when(schema0).description();
      doReturn(string1, stringArray0[0]).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string3).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string5, (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(stringArray0[0]).when(schema0).ref();
      doReturn(string6, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      int int1 = (-1238);
      int int2 = 4;
      int int3 = (-1193);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean2 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int1).when(arraySchema0).maxItems();
      doReturn(int2, int3).when(arraySchema0).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean2, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      boolean boolean3 = false;
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(server0).description();
      doReturn(string0).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      boolean boolean0 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string1 = "IF.ci77nN-oBWx(_gd";
      int int0 = 146;
      int int1 = (-1254);
      String string2 = "Multiple back-reference properties with name '";
      boolean boolean1 = true;
      String string3 = "cS/\"4d[!";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(stringArray0[0]).when(schema0).description();
      doReturn(stringArray0[1], string0).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string1, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(stringArray0[0]).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string0).when(schema0).minimum();
      doReturn(string2, (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(string3, (String) null).when(schema0).ref();
      doReturn(stringArray0[1]).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      String string4 = "i'J7XJ:Af/tn4Wc";
      String string5 = "/pTAsO";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string4, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string5, (String) null).when(info0).termsOfService();
      doReturn(stringArray0[0]).when(info0).title();
      doReturn(string1, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      String string6 = "]fAj]ahD\"^";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string6, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string7 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string8 = "java.lang";
      String string9 = null;
      String string10 = ",";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string8, (String) null, (String) null).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string2, stringArray0[1], (String) null).when(link0).operationId();
      doReturn(string9, string10, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).expression();
      doReturn(string3, (String) null).when(linkParameters1).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
      boolean boolean2 = true;
      String string11 = null;
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      String string12 = "'BkiSb";
      int int2 = 2;
      String string13 = "Y(j8$sI5*\\!8niz";
      boolean boolean3 = true;
      String string14 = ":b";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string8, (String) null).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean2, false).when(schema1).deprecated();
      doReturn(string0).when(schema1).description();
      doReturn(string8, string11, (String) null).when(schema1).example();
      doReturn(boolean0, false).when(schema1).exclusiveMaximum();
      doReturn(boolean2, false).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema1).externalDocs();
      doReturn(string1, (String) null).when(schema1).format();
      doReturn(int1).when(schema1).maxLength();
      doReturn(string12).when(schema1).maximum();
      doReturn(int2, 0).when(schema1).minProperties();
      doReturn(string4).when(schema1).minimum();
      doReturn(string13, (String) null).when(schema1).pattern();
      doReturn(boolean3, false).when(schema1).readOnly();
      doReturn(string3, (String) null).when(schema1).ref();
      doReturn(string14, (String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema1);
      Link[] linkArray0 = new Link[1];
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional5 = OperationParser.getServers(serverArray0);
      boolean boolean4 = true;
      String string15 = "0*yG2nr";
      String string16 = "0gl~|X_]SpV";
      ExternalDocumentation externalDocumentation2 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation2).description();
      doReturn((String) null).when(externalDocumentation2).url();
      String string17 = ",^0C";
      int int3 = 555;
      int int4 = 2008;
      String string18 = "~c~)Bc85NHY{Q*>;M4";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string10, (String) null).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean4, false).when(schema2).deprecated();
      doReturn(string15, (String) null).when(schema2).description();
      doReturn(string16, string10, (String) null, (String) null).when(schema2).example();
      doReturn(boolean4, false).when(schema2).exclusiveMaximum();
      doReturn(boolean2, false).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation2).when(schema2).externalDocs();
      doReturn(string17, (String) null).when(schema2).format();
      doReturn(int3).when(schema2).maxLength();
      doReturn(0).when(schema2).maxProperties();
      doReturn(string10).when(schema2).maximum();
      doReturn(int4, 0).when(schema2).minProperties();
      doReturn(string18).when(schema2).minimum();
      doReturn(string11).when(schema2).pattern();
      doReturn(boolean0, false).when(schema2).readOnly();
      doReturn(string11).when(schema2).ref();
      doReturn(string3, (String) null).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional6 = OperationParser.getSchemaFromAnnotation(schema2);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string15, (String) null).when(license0).name();
      doReturn(string9).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional7 = OperationParser.getLicense(license0);
      String string19 = "";
      String string20 = "JnJ$>B9KT@7so\\o1FHF";
      String string21 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string19).when(contact0).email();
      doReturn(string20, (String) null).when(contact0).name();
      doReturn(string21).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional8 = OperationParser.getContact(contact0);
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map3 = components0.getSchemas();
      Components components1 = components0.schemas(map3);
      String string22 = "3(Jg";
      Example example0 = new Example();
      String string23 = "";
      Example example1 = example0.summary(string23);
      Components components2 = components1.addExamples(string22, example1);
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components3 = components2.requestBodies(hashMap0);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional9 = OperationParser.getParametersList(parameterArray0, components3);
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      Class<SecurityScheme> class0 = SecurityScheme.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces1).value();
      Components components0 = new Components();
      String string0 = "^P)0VN";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string0, callback0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponse apiResponse0 = new ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(apiResponses0.DEFAULT, apiResponse0);
      String string1 = "1!";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      String string2 = "";
      io.swagger.oas.models.links.Link link1 = link0.$ref(string2);
      String string3 = "Lf5XL~!2z|*Ng]ll";
      io.swagger.oas.models.links.Link link2 = link1.description(string3);
      String string4 = "";
      io.swagger.oas.models.links.Link link3 = link2.parameters(apiResponses0.DEFAULT, string4);
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Boolean boolean0 = Boolean.TRUE;
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.required(boolean0);
      io.swagger.oas.models.parameters.RequestBody requestBody2 = requestBody1.$ref(apiResponses1.DEFAULT);
      io.swagger.oas.models.links.Link link4 = link3.requestBody(requestBody2);
      Map<String, Header> map0 = components0.getHeaders();
      io.swagger.oas.models.links.Link link5 = link4.headers(map0);
      Components components2 = components1.addLinks(string1, link4);
      Components components3 = components1.responses(apiResponses1);
      String string5 = null;
      Example example0 = new Example();
      String string6 = "";
      Example example1 = example0.value(string6);
      Components components4 = components3.addExamples(string5, example1);
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = components3.getParameters();
      Components components5 = components4.parameters(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces1, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      boolean boolean0 = true;
      String string1 = "";
      String string2 = "**K}gE(?.fpr {V{";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = null;
      int int0 = 1;
      int int1 = (-1780);
      String string3 = "#/components/schemas/";
      boolean boolean2 = true;
      String string4 = "";
      String string5 = "h$y\"yoMVxR4p1";
      int int2 = 64;
      boolean boolean3 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema1 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema1);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[1]).when(link0).description();
      doReturn(string3, string1).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      boolean boolean4 = true;
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string3, string0).when(requestBody0).description();
      doReturn(boolean4, boolean4).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components1 = components0.securitySchemes(map0);
      String string6 = " r;+Hc W(zh?TL";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components2 = components1.addParameters(string6, parameter0);
      String string7 = "G0{S";
      Callback callback0 = new Callback();
      String string8 = "java.lang";
      String string9 = "";
      components2.addExtension(string9, optional0);
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string8, pathItem0);
      Components components3 = components2.addCallbacks(string7, callback1);
      SecurityScheme securityScheme0 = null;
      ApiResponse apiResponse0 = new ApiResponse();
      String string10 = "v-,w!Q";
      ApiResponse apiResponse1 = apiResponse0.$ref(string10);
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      ApiResponse apiResponse2 = apiResponse1.link(string7, link1);
      io.swagger.oas.models.media.Content content1 = null;
      ApiResponse apiResponse3 = apiResponse2.content(content1);
      Map<String, Header> map1 = apiResponse3.getHeaders();
      components3.setHeaders(map1);
      PathItem pathItem1 = callback1.put(string10, pathItem0);
      Components components4 = components3.addSecuritySchemes(string6, securityScheme0);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "?qR%oI/aq";
      String string1 = "i";
      String string2 = "java.lang";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string3 = null;
      String string4 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string1).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string1, string3).when(info0).termsOfService();
      doReturn(string0, string4).when(info0).title();
      doReturn(string2, string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string5 = "io.swagge";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string5;
      stringArray0[2] = string5;
      String string6 = "A.^3a,q%vFp6,*Bh$B";
      stringArray0[3] = string6;
      boolean boolean0 = true;
      String string7 = "tDD0`NC0iM052";
      String string8 = "";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[1], (String) null).when(externalDocumentation0).description();
      doReturn(stringArray0[1], (String) null).when(externalDocumentation0).url();
      String string9 = "INTEGER";
      int int0 = 110;
      int int1 = 2008;
      boolean boolean2 = false;
      String string10 = "";
      boolean boolean3 = true;
      boolean boolean4 = true;
      String string11 = "Problem with definition of ";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string3).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string7, string7).when(schema0).description();
      doReturn(string8, stringArray0[2], string10).when(schema0).example();
      doReturn(boolean1, boolean3).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean4).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string9, string0).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, 0).when(schema0).maxProperties();
      doReturn(string6).when(schema0).maximum();
      doReturn(int1, int1).when(schema0).minProperties();
      doReturn(stringArray0[1]).when(schema0).minimum();
      doReturn(string6, string6).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(stringArray0[3], string11).when(schema0).ref();
      doReturn(string8).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      OperationParser operationParser0 = new OperationParser();
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "fLZ0%uaIn8w<o=~Ph-";
      stringArray0[2] = string2;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      MediaType mediaType0 = new MediaType();
      String string3 = "jd{}a)WUx<~8R };";
      MediaType mediaType1 = mediaType0.example(string3);
      Map<String, Encoding> map0 = mediaType1.getEncoding();
      MediaType mediaType2 = mediaType0.encoding(map0);
      MediaType mediaType3 = mediaType0.example(string0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(exampleObject0).externalValue();
      doReturn(string2, stringArray0[1], string2).when(exampleObject0).name();
      doReturn(stringArray0[0]).when(exampleObject0).summary();
      doReturn(stringArray0[1]).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType0, exampleObject0);
      boolean boolean0 = true;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      String string4 = null;
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.FALSE;
      String string5 = "kaYst:q*<#{=};ZV";
      String string6 = "Y=mq'p*X! LE";
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Link[] linkArray0 = new Link[0];
      String string7 = "qEiEx\\PuKG4";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string0 = "java.lang";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Components components1 = components0.links(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map2 = arraySchema0.getProperties();
      Components components2 = components1.schemas(map2);
      String string1 = "";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.media.Content content1 = null;
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.content(content1);
      Components components3 = components2.addParameters(string1, parameter1);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components4 = components3.securitySchemes(hashMap0);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components4);
      OperationParser operationParser0 = new OperationParser();
      int int0 = (-2642);
      int int1 = (-1589);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema1).maxItems();
      doReturn(int1, int0).when(arraySchema1).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean0, false).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema1);
      LinkParameters linkParameters1 = null;
      Map<String, String> map3 = OperationParser.getLinkParameters(linkParameters1);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[3];
      String string2 = "9+HkQB2L9";
      String string3 = "1Mij0bxZ01S4/S";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0).when(apiResponse0).content();
      doReturn(string2, operationParser0.DEFAULT_DESCRIPTION, string3, (String) null, (String) null).when(apiResponse0).description();
      doReturn((Object) null, (Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components1);
      Map<String, String> map4 = OperationParser.getLinkParameters(linkParameters1);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(externalDocumentation0).description();
      doReturn(string3, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation0);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string0 = "java.lang";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string0).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Components components1 = components0.links(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map2 = arraySchema0.getProperties();
      Components components2 = components1.schemas(map2);
      String string1 = "";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.media.Content content1 = null;
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.content(content1);
      Components components3 = components2.addParameters(string1, parameter1);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components4 = components3.securitySchemes(hashMap0);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components4);
      OperationParser operationParser0 = new OperationParser();
      int int0 = (-2642);
      int int1 = (-1589);
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean1 = false;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema1).maxItems();
      doReturn(int1, int0).when(arraySchema1).minItems();
      doReturn(schema0, schema1).when(arraySchema1).schema();
      doReturn(boolean0, boolean1).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema1);
      LinkParameters linkParameters1 = null;
      Map<String, String> map3 = OperationParser.getLinkParameters(linkParameters1);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[3];
      String string2 = "9+HkQB2L9";
      String string3 = "1Mij0bxZ01S4/S";
      String string4 = "Fq<";
      String string5 = "java.lang";
      Link[] linkArray1 = null;
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0).when(apiResponse0).content();
      doReturn(string2, operationParser0.DEFAULT_DESCRIPTION, string3, string4, string5).when(apiResponse0).description();
      doReturn((Object) linkArray1, (Object) linkArray0, (Object) linkArray1).when(apiResponse0).links();
      doReturn(string5, operationParser0.DEFAULT_DESCRIPTION, operationParser0.DEFAULT_DESCRIPTION, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components1);
      Map<String, String> map4 = OperationParser.getLinkParameters(linkParameters1);
      String string6 = "4!5 WQ^+T~o6p\\!g}";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string6).when(externalDocumentation0).description();
      doReturn(string3, string6).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation0);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      Link[] linkArray0 = new Link[4];
      String string0 = "";
      String string1 = "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$6";
      String string2 = null;
      String string3 = "y D}'1hTIEP]IHmsF";
      String string4 = "$(fe/eAAeEn$";
      String string5 = "-2A";
      String string6 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string0, string1, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string2, string0, string3, string1, (String) null).when(link0).operationId();
      doReturn(string4, string5, string6, string1, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      int int0 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = new String[5];
      String string7 = "#/components/schemas/";
      stringArray0[0] = string7;
      String string8 = "";
      stringArray0[1] = string8;
      String string9 = "io.swagger.jaxrs2.OperationParser";
      stringArray0[2] = string9;
      String string10 = "zF=|/E3";
      stringArray0[3] = string10;
      String string11 = "JHw!{R/NY.5";
      stringArray0[4] = string11;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      int int0 = 66;
      int int1 = 5486;
      Class<Tag> class0 = Tag.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int2 = 1263;
      String string0 = "io.swagge";
      String string1 = "Ztmdb";
      String string2 = "java.langio.swagger.oas.models.security.SecurityScheme";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(linkParameters0).expression();
      doReturn(string0, string2).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      String string3 = "io.swagger.jaxrs2.OperationParser";
      String string4 = null;
      String string5 = "Can not construct SimpleType for a Map (class: ";
      String string6 = "^T]2O7F?w,9xaN)pj";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string3, string4, string5, string6, (String) null).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      Components components0 = new Components();
      String string7 = "M";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components1 = components0.addRequestBodies(string7, requestBody0);
      Operation operation0 = new Operation();
      Map<String, Callback> map1 = operation0.getCallbacks();
      Components components2 = components1.callbacks(map1);
      Example example0 = null;
      Components components3 = components2.addExamples(string7, example0);
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      String string8 = "le[3@m";
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.description(string8);
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.links.Link> schema1 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.links.Link>();
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.schema(schema1);
      Components components4 = components3.addParameters(string7, parameter2);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      String string2 = "fLZ0%uaIn8w<o=~Ph-";
      stringArray0[2] = string2;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      MediaType mediaType0 = new MediaType();
      String string3 = "jd{}a)WUx<~8R };";
      MediaType mediaType1 = mediaType0.example(string3);
      Map<String, Encoding> map0 = mediaType1.getEncoding();
      MediaType mediaType2 = mediaType0.encoding(map0);
      MediaType mediaType3 = mediaType0.example(string0);
      String string4 = "*/*";
      String string5 = "java.langio.swagger.oas.models.security.SecurityScheme";
      String string6 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0]).when(exampleObject0).externalValue();
      doReturn(string2, string4, stringArray0[2], string5).when(exampleObject0).name();
      doReturn(stringArray0[2], (String) null).when(exampleObject0).summary();
      doReturn(string6).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType0, exampleObject0);
      boolean boolean0 = true;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      String string7 = null;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.FALSE;
      String string8 = "kaYst:q*<#{=};ZV";
      String string9 = "Y=mq'p*X! LE";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      String string10 = "qEiEx\\PuKG4";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses(string7, apiResponse0);
      String string11 = "";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components2 = components1.addRequestBodies(string11, requestBody0);
      Map<String, io.swagger.oas.models.media.Schema> map2 = components1.getSchemas();
      Components components3 = components2.schemas(map2);
      String string12 = null;
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.parameters.Parameter.StyleEnum parameter_StyleEnum0 = io.swagger.oas.models.parameters.Parameter.StyleEnum.LABEL;
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.style(parameter_StyleEnum0);
      io.swagger.oas.models.parameters.Parameter parameter3 = parameter2.$ref(string6);
      Components components4 = components3.addParameters(string12, parameter3);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = "io.swagge";
      String string1 = "";
      String string2 = "java.lang";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(license0).name();
      doReturn(string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string3 = ".sBqWc";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string3).when(license1).name();
      doReturn(string1).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license1);
      MediaType mediaType0 = new MediaType();
      String string4 = null;
      Example example0 = new Example();
      Example example1 = example0.value(string4);
      MediaType mediaType1 = mediaType0.addExamples(string4, example1);
      Example example2 = example1.$ref(string4);
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.addExamples(string4, example1);
      Map<String, Example> map0 = parameter1.getExamples();
      MediaType mediaType2 = mediaType1.examples(map0);
      String string5 = "java\\lang";
      Example example3 = example1.summary(string5);
      String string6 = "#/components/schemas/";
      String string7 = "min";
      String string8 = "io.swagge";
      String string9 = ",";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string7, (String) null).when(exampleObject0).externalValue();
      doReturn(string6, string0, string8, string5).when(exampleObject0).name();
      doReturn(string0, (String) null).when(exampleObject0).summary();
      doReturn(string9, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType2, exampleObject0);
      int int0 = (-1069);
      int int1 = 84;
      Class<Header> class0 = Header.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      String string10 = "io.swagge";
      String[] stringArray0 = new String[0];
      boolean boolean2 = false;
      boolean boolean3 = false;
      String string11 = "I";
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = "io.swagge";
      String string1 = "";
      String string2 = "pQNAt)TfL,h0";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(license0).name();
      doReturn(string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(license1).name();
      doReturn(string1).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license1);
      MediaType mediaType0 = new MediaType();
      String string3 = null;
      Example example0 = new Example();
      Example example1 = example0.value(string3);
      MediaType mediaType1 = mediaType0.addExamples(string3, example1);
      Example example2 = example1.$ref(string3);
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.addExamples(string3, example1);
      Map<String, Example> map0 = parameter1.getExamples();
      MediaType mediaType2 = mediaType1.examples(map0);
      String string4 = "java.lang";
      Example example3 = example1.summary(string4);
      String string5 = "#/components/schemas/";
      String string6 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string6).when(exampleObject0).externalValue();
      doReturn(string5, string6, string3).when(exampleObject0).name();
      doReturn(string4, (String) null).when(exampleObject0).summary();
      doReturn(string2, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType2, exampleObject0);
      int int0 = (-1069);
      int int1 = 84;
      Class<Tag> class0 = Tag.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = null;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      Link[] linkArray0 = new Link[4];
      String string0 = "d.M\\Mta7 +L1b:t";
      String string1 = "java.langio.swagger.oas.models.security.SecurityScheme";
      String string2 = "IXX-;:kowha~)3_JB";
      String string3 = "";
      String string4 = "#/components/schemas/";
      String string5 = " not Java Enum type";
      String string6 = null;
      String string7 = null;
      String string8 = "D$";
      String string9 = "*/*";
      String string10 = "java.langio.swagger.oas.models.security.SecurityScheme";
      String string11 = "java.langio.swagger.oas.models.security.SecurityScheme";
      String string12 = "java.langio.swagger.oas.models.security.SecurityScheme";
      String string13 = "java.lang";
      String string14 = null;
      String string15 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(linkParameters0).expression();
      doReturn(string13, string14, string15, string0, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string2, string3, string5).when(link0).description();
      doReturn(string9, string10, string11, string12).when(link0).name();
      doReturn(string4, string4, string5, string0, string10).when(link0).operationId();
      doReturn(string6, string7, string8, string6).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      int int0 = 146;
      int int1 = 0;
      int int2 = 64;
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
      String[] stringArray0 = new String[5];
      String string16 = "#/components/schemas/";
      stringArray0[0] = string16;
      String string17 = "";
      stringArray0[1] = string17;
      String string18 = "io.swagger.jaxrs2.OperationParser";
      stringArray0[2] = string18;
      String string19 = "zF=|/E3";
      stringArray0[3] = string19;
      String string20 = "JHw!{R/NY.5";
      stringArray0[4] = string20;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = "y2%1m?nIl~ZXsxf:";
      String string1 = "T;bom5Z";
      ServerVariable[] serverVariableArray0 = new ServerVariable[7];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      serverVariableArray0[6] = serverVariableArray0[5];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string0, string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      MediaType mediaType0 = new MediaType();
      String string2 = "<e%NPw?-kV_nb1Ypr?";
      MediaType mediaType1 = mediaType0.example(string2);
      String string3 = "kn+8Q{a0=^ANU";
      Example example0 = new Example();
      MediaType mediaType2 = mediaType1.addExamples(string3, example0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      MediaType mediaType3 = mediaType2.examples(hashMap0);
      String string4 = "";
      Encoding encoding0 = new Encoding();
      Encoding encoding1 = encoding0.contentType(string2);
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      Encoding encoding2 = encoding1.explode(boolean1);
      MediaType mediaType4 = mediaType3.example(string0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string0 = "#/components/schemas/";
      String string1 = ",";
      String string2 = "BjenQ{5qI";
      String string3 = "io.swagge";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(contact0).email();
      doReturn(string1, string3).when(contact0).name();
      doReturn(string2, string1).when(contact0).url();
      License license0 = null;
      String string4 = "java.langio.swagger.oas.models.ExternalDocumentation";
      String string5 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string4).when(info0).termsOfService();
      doReturn(string0, string5).when(info0).title();
      doReturn(string0, string0).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[7];
      Class<io.swagger.oas.models.media.ArraySchema> class0 = io.swagger.oas.models.media.ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String string6 = "AgX-\\-b>ox|X.ym*4I";
      String string7 = "X#]_%,eq]";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0, string0).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      String[] stringArray0 = new String[6];
      stringArray0[0] = string6;
      stringArray0[1] = string6;
      stringArray0[2] = string3;
      String string8 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      stringArray0[3] = string8;
      stringArray0[4] = string6;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Operation operation0 = new Operation();
      Map<String, Callback> map1 = operation0.getCallbacks();
      Components components1 = components0.callbacks(map1);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components2 = components1.securitySchemes(hashMap0);
      String string9 = "D=U!PMx4zQot't";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string5, pathItem0);
      Components components3 = components2.addCallbacks(string9, callback1);
      Map<String, Example> map2 = components3.getExamples();
      Components components4 = components3.examples(map2);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }
}
