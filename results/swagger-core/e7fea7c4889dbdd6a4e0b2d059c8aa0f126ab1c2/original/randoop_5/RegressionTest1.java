import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test501");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass21 = tagSetOptional20.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test502");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass31 = serverListOptional30.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test503");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        javax.ws.rs.Produces produces41 = null;
        javax.ws.rs.Produces produces42 = null;
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional44 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces41, produces42, components43);
        javax.ws.rs.Produces produces45 = null;
        javax.ws.rs.Produces produces46 = null;
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional48 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces45, produces46, components47);
        javax.ws.rs.Produces produces49 = null;
        javax.ws.rs.Produces produces50 = null;
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional52 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces49, produces50, components51);
        javax.ws.rs.Produces produces53 = null;
        javax.ws.rs.Produces produces54 = null;
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional56 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces53, produces54, components55);
        javax.ws.rs.Produces produces57 = null;
        javax.ws.rs.Produces produces58 = null;
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional60 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces57, produces58, components59);
        javax.ws.rs.Produces produces61 = null;
        javax.ws.rs.Produces produces62 = null;
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional64 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces61, produces62, components63);
        javax.ws.rs.Produces produces65 = null;
        javax.ws.rs.Produces produces66 = null;
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional68 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces65, produces66, components67);
        javax.ws.rs.Produces produces69 = null;
        javax.ws.rs.Produces produces70 = null;
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional72 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces69, produces70, components71);
        javax.ws.rs.Produces produces73 = null;
        javax.ws.rs.Produces produces74 = null;
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional76 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces73, produces74, components75);
        java.lang.Class<?> wildcardClass77 = apiResponseArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test504");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass13 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test505");
        java.lang.String[] strArray1 = new java.lang.String[] { "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass4 = tagSetOptional3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test506");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass10 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test507");
        java.lang.String[] strArray2 = new java.lang.String[] { ",", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass6 = tagSetOptional5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test508");
        java.lang.String[] strArray2 = new java.lang.String[] { ",", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass5 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test509");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        java.lang.Class<?> wildcardClass35 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test510");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass19 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test511");
        java.lang.String[] strArray6 = new java.lang.String[] { "*/*", ",", "no description", "*/*", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test512");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass24 = strMap23.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test513");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        java.lang.Class<?> wildcardClass79 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test514");
        io.swagger.oas.annotations.media.ArraySchema arraySchema0 = null;
        java.util.Optional<io.swagger.oas.models.media.ArraySchema> arraySchemaOptional1 = io.swagger.jaxrs2.OperationParser.getArraySchema(arraySchema0);
        java.lang.Class<?> wildcardClass2 = arraySchemaOptional1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(arraySchemaOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test515");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass14 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test516");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass5 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test517");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        java.lang.Class<?> wildcardClass27 = parameterListOptional26.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test518");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test519");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass8 = tagSetOptional7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test520");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass4 = tagSetOptional3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test521");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "*/*", "#/components/schemas/", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass9 = tagSetOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test522");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass2 = serverListOptional1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test523");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass24 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test524");
        java.lang.String[] strArray3 = new java.lang.String[] { ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass15 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test525");
        java.lang.String[] strArray1 = new java.lang.String[] { "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass4 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test526");
        java.lang.String[] strArray2 = new java.lang.String[] { ",", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test527");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "*/*", "#/components/schemas/", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass10 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test528");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test529");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        java.lang.Class<?> wildcardClass77 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test530");
        java.lang.String[] strArray3 = new java.lang.String[] { ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass5 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test531");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        java.lang.Class<?> wildcardClass54 = parameterListOptional53.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test532");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", ",", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test533");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass17 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test534");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        java.lang.Class<?> wildcardClass63 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test535");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        java.lang.Class<?> wildcardClass71 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test536");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass17 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test537");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        java.lang.Class<?> wildcardClass61 = contentOptional60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test538");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass32 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test539");
        java.lang.String[] strArray5 = new java.lang.String[] { "*/*", "#/components/schemas/", "hi!", "#/components/schemas/", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass11 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test540");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass25 = serverListOptional24.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test541");
        java.lang.String[] strArray4 = new java.lang.String[] { "no description", "", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test542");
        java.lang.String[] strArray5 = new java.lang.String[] { "*/*", "#/components/schemas/", "hi!", "#/components/schemas/", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test543");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass6 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test544");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass30 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test545");
        java.lang.String[] strArray6 = new java.lang.String[] { "*/*", ",", "no description", "*/*", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass16 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test546");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass6 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test547");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        java.lang.Class<?> wildcardClass13 = apiResponseArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test548");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test549");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass4 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test550");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass33 = strMap32.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test551");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass15 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test552");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass10 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test553");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass30 = serverListOptional29.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test554");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass37 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test555");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        javax.ws.rs.Produces produces41 = null;
        javax.ws.rs.Produces produces42 = null;
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional44 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces41, produces42, components43);
        javax.ws.rs.Produces produces45 = null;
        javax.ws.rs.Produces produces46 = null;
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional48 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces45, produces46, components47);
        javax.ws.rs.Produces produces49 = null;
        javax.ws.rs.Produces produces50 = null;
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional52 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces49, produces50, components51);
        javax.ws.rs.Produces produces53 = null;
        javax.ws.rs.Produces produces54 = null;
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional56 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces53, produces54, components55);
        javax.ws.rs.Produces produces57 = null;
        javax.ws.rs.Produces produces58 = null;
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional60 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces57, produces58, components59);
        javax.ws.rs.Produces produces61 = null;
        javax.ws.rs.Produces produces62 = null;
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional64 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces61, produces62, components63);
        javax.ws.rs.Produces produces65 = null;
        javax.ws.rs.Produces produces66 = null;
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional68 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces65, produces66, components67);
        java.lang.Class<?> wildcardClass69 = apiResponseArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test556");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass22 = tagSetOptional21.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test557");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        java.lang.Class<?> wildcardClass30 = parameterListOptional29.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test558");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass33 = serverListOptional32.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test559");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        java.lang.Class<?> wildcardClass30 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test560");
        java.lang.String[] strArray2 = new java.lang.String[] { ",", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass5 = tagSetOptional4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test561");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass9 = strMap8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test562");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        java.lang.Class<?> wildcardClass43 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test563");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        java.lang.Class<?> wildcardClass45 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test564");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        java.lang.Class<?> wildcardClass57 = contentOptional56.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test565");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass8 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test566");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        java.lang.Class<?> wildcardClass49 = contentOptional48.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test567");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        java.lang.Class<?> wildcardClass83 = contentOptional82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test568");
        java.lang.String[] strArray6 = new java.lang.String[] { "*/*", ",", "no description", "*/*", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test569");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass17 = strMap16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test570");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "*/*", "#/components/schemas/", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test571");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test572");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass30 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test573");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        java.lang.Class<?> wildcardClass49 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test574");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", ",", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass7 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test575");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass5 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test576");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass34 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test577");
        java.lang.String[] strArray3 = new java.lang.String[] { ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test578");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass11 = serverListOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test579");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        java.lang.Class<?> wildcardClass35 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test580");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test581");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass23 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test582");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass10 = serverListOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test583");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass21 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test584");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass40 = serverListOptional39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test585");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass28 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test586");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        javax.ws.rs.Produces produces41 = null;
        javax.ws.rs.Produces produces42 = null;
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional44 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces41, produces42, components43);
        javax.ws.rs.Produces produces45 = null;
        javax.ws.rs.Produces produces46 = null;
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional48 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces45, produces46, components47);
        javax.ws.rs.Produces produces49 = null;
        javax.ws.rs.Produces produces50 = null;
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional52 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces49, produces50, components51);
        javax.ws.rs.Produces produces53 = null;
        javax.ws.rs.Produces produces54 = null;
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional56 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces53, produces54, components55);
        javax.ws.rs.Produces produces57 = null;
        javax.ws.rs.Produces produces58 = null;
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional60 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces57, produces58, components59);
        javax.ws.rs.Produces produces61 = null;
        javax.ws.rs.Produces produces62 = null;
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional64 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces61, produces62, components63);
        javax.ws.rs.Produces produces65 = null;
        javax.ws.rs.Produces produces66 = null;
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional68 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces65, produces66, components67);
        javax.ws.rs.Produces produces69 = null;
        javax.ws.rs.Produces produces70 = null;
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional72 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces69, produces70, components71);
        javax.ws.rs.Produces produces73 = null;
        javax.ws.rs.Produces produces74 = null;
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional76 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces73, produces74, components75);
        javax.ws.rs.Produces produces77 = null;
        javax.ws.rs.Produces produces78 = null;
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional80 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces77, produces78, components79);
        javax.ws.rs.Produces produces81 = null;
        javax.ws.rs.Produces produces82 = null;
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional84 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces81, produces82, components83);
        javax.ws.rs.Produces produces85 = null;
        javax.ws.rs.Produces produces86 = null;
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional88 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces85, produces86, components87);
        javax.ws.rs.Produces produces89 = null;
        javax.ws.rs.Produces produces90 = null;
        io.swagger.oas.models.Components components91 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional92 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces89, produces90, components91);
        java.lang.Class<?> wildcardClass93 = apiResponsesOptional92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test587");
        java.lang.String[] strArray6 = new java.lang.String[] { "*/*", ",", "no description", "*/*", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test588");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass25 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test589");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "hi!", "#/components/schemas/", ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass13 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test590");
        java.lang.String[] strArray3 = new java.lang.String[] { ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass16 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test591");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass24 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test592");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass39 = serverListOptional38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test593");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass7 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test594");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass34 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test595");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "*/*", "#/components/schemas/", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test596");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        java.lang.Class<?> wildcardClass87 = contentOptional86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test597");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass11 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test598");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass28 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test599");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass9 = tagSetOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test600");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass17 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test601");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        java.lang.Class<?> wildcardClass85 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test602");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass29 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test603");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass34 = serverListOptional33.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test604");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass27 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test605");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass27 = serverListOptional26.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test606");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        java.lang.Class<?> wildcardClass58 = parameterListOptional57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test607");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        java.lang.Class<?> wildcardClass65 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test608");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        java.lang.Class<?> wildcardClass11 = contentOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test609");
        java.lang.String[] strArray2 = new java.lang.String[] { ",", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass11 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test610");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        java.lang.Class<?> wildcardClass79 = contentOptional78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test611");
        java.lang.String[] strArray5 = new java.lang.String[] { "*/*", "#/components/schemas/", "hi!", "#/components/schemas/", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass7 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test612");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass41 = serverListOptional40.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test613");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass32 = strMap31.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test614");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass36 = strMap35.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test615");
        java.lang.String[] strArray4 = new java.lang.String[] { "no description", "", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test616");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass25 = strMap24.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test617");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass5 = tagSetOptional4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test618");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass41 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test619");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test620");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass25 = serverListOptional24.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test621");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass25 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test622");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass20 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test623");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass26 = serverListOptional25.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test624");
        java.lang.String[] strArray4 = new java.lang.String[] { "no description", "", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test625");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass36 = serverListOptional35.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test626");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass39 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test627");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test628");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass15 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test629");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass18 = serverListOptional17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test630");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass25 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test631");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "*/*", "#/components/schemas/", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass14 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test632");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass40 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test633");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass5 = tagSetOptional4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test634");
        java.lang.String[] strArray6 = new java.lang.String[] { "*/*", ",", "no description", "*/*", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass8 = tagSetOptional7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test635");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "#/components/schemas/", "", "hi!", "hi!", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass9 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test636");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass30 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test637");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass3 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test638");
        java.lang.String[] strArray6 = new java.lang.String[] { "*/*", ",", "no description", "*/*", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass18 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test639");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass38 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test640");
        java.lang.String[] strArray1 = new java.lang.String[] { "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass3 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test641");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass17 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test642");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "hi!", "#/components/schemas/", ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test643");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        java.lang.Class<?> wildcardClass26 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test644");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass8 = tagSetOptional7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test645");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass11 = strMap10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test646");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "*/*", "#/components/schemas/", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test647");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass7 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test648");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        java.lang.Class<?> wildcardClass5 = apiResponseArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test649");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        java.lang.Class<?> wildcardClass67 = contentOptional66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test650");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass14 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test651");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass42 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test652");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test653");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass9 = tagSetOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test654");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        java.lang.Class<?> wildcardClass5 = parameterListOptional4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test655");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        javax.ws.rs.Produces produces41 = null;
        javax.ws.rs.Produces produces42 = null;
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional44 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces41, produces42, components43);
        javax.ws.rs.Produces produces45 = null;
        javax.ws.rs.Produces produces46 = null;
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional48 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces45, produces46, components47);
        javax.ws.rs.Produces produces49 = null;
        javax.ws.rs.Produces produces50 = null;
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional52 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces49, produces50, components51);
        javax.ws.rs.Produces produces53 = null;
        javax.ws.rs.Produces produces54 = null;
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional56 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces53, produces54, components55);
        javax.ws.rs.Produces produces57 = null;
        javax.ws.rs.Produces produces58 = null;
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional60 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces57, produces58, components59);
        javax.ws.rs.Produces produces61 = null;
        javax.ws.rs.Produces produces62 = null;
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional64 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces61, produces62, components63);
        javax.ws.rs.Produces produces65 = null;
        javax.ws.rs.Produces produces66 = null;
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional68 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces65, produces66, components67);
        javax.ws.rs.Produces produces69 = null;
        javax.ws.rs.Produces produces70 = null;
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional72 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces69, produces70, components71);
        javax.ws.rs.Produces produces73 = null;
        javax.ws.rs.Produces produces74 = null;
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional76 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces73, produces74, components75);
        javax.ws.rs.Produces produces77 = null;
        javax.ws.rs.Produces produces78 = null;
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional80 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces77, produces78, components79);
        javax.ws.rs.Produces produces81 = null;
        javax.ws.rs.Produces produces82 = null;
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional84 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces81, produces82, components83);
        javax.ws.rs.Produces produces85 = null;
        javax.ws.rs.Produces produces86 = null;
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional88 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces85, produces86, components87);
        javax.ws.rs.Produces produces89 = null;
        javax.ws.rs.Produces produces90 = null;
        io.swagger.oas.models.Components components91 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional92 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces89, produces90, components91);
        java.lang.Class<?> wildcardClass93 = apiResponseArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test656");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass6 = serverListOptional5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test657");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        java.lang.Class<?> wildcardClass41 = parameterListOptional40.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test658");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        java.lang.Class<?> wildcardClass37 = parameterListOptional36.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test659");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass9 = tagSetOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test660");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test661");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass45 = serverListOptional44.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test662");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass9 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test663");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass37 = serverListOptional36.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test664");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "hi!", "#/components/schemas/", ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass10 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test665");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        java.lang.Class<?> wildcardClass75 = contentOptional74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test666");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass35 = strMap34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test667");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        java.lang.Class<?> wildcardClass53 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test668");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        java.lang.Class<?> wildcardClass44 = parameterListOptional43.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test669");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass23 = tagSetOptional22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test670");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        java.lang.Class<?> wildcardClass23 = parameterListOptional22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test671");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass39 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test672");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass24 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test673");
        java.lang.String[] strArray4 = new java.lang.String[] { "no description", "", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass21 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test674");
        java.lang.String[] strArray1 = new java.lang.String[] { "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass5 = tagSetOptional4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test675");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional88 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components87);
        io.swagger.oas.models.Components components89 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional90 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components89);
        java.lang.Class<?> wildcardClass91 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test676");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        java.lang.Class<?> wildcardClass58 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test677");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        java.lang.Class<?> wildcardClass87 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test678");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass31 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test679");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass38 = serverListOptional37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test680");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass45 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test681");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass24 = tagSetOptional23.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test682");
        java.lang.String[] strArray4 = new java.lang.String[] { "no description", "", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test683");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass43 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test684");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional88 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components87);
        io.swagger.oas.models.Components components89 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional90 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components89);
        io.swagger.oas.models.Components components91 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional92 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components91);
        java.lang.Class<?> wildcardClass93 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test685");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        java.lang.Class<?> wildcardClass68 = parameterListOptional67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test686");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        java.lang.Class<?> wildcardClass76 = parameterListOptional75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test687");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "*/*", "#/components/schemas/", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass12 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test688");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass20 = tagSetOptional19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test689");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        java.lang.Class<?> wildcardClass37 = apiResponsesOptional36.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test690");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass25 = tagSetOptional24.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test691");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass15 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test692");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass9 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test693");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass36 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test694");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass11 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test695");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass41 = strMap40.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test696");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass10 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test697");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass11 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test698");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass38 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test699");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        java.lang.Class<?> wildcardClass81 = contentOptional80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test700");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "hi!", "#/components/schemas/", ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test701");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass32 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test702");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        java.lang.Class<?> wildcardClass72 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test703");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        java.lang.Class<?> wildcardClass77 = contentOptional76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test704");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass20 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test705");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass38 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test706");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "hi!", "#/components/schemas/", ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass15 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test707");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass20 = tagSetOptional19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test708");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional45 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional46 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional47 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional48 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional49 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass50 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test709");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        java.lang.Class<?> wildcardClass47 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test710");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional45 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional46 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional47 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional48 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional49 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional50 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass51 = serverListOptional50.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test711");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "no description", "hi!", "", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
    }

    @Test
    public void test712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test712");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test713");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass33 = strMap32.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test714");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional45 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional46 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional47 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional48 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional49 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass50 = serverListOptional49.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test715");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        java.lang.Class<?> wildcardClass39 = parameterListOptional38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test716");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass26 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test717");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass34 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test718");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass18 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test719");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass19 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test720");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        java.lang.Class<?> wildcardClass27 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test721");
        java.lang.String[] strArray4 = new java.lang.String[] { "no description", "", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass21 = tagSetOptional20.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test722");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass11 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test723");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "no description", "hi!", "", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass8 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test724");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass31 = strMap30.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test725");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "#/components/schemas/", "", "hi!", "hi!", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass9 = tagSetOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test726");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass23 = serverListOptional22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test727");
        java.lang.String[] strArray1 = new java.lang.String[] { "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass6 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test728");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass26 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test729");
        java.lang.String[] strArray4 = new java.lang.String[] { "no description", "", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass9 = tagSetOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test730");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass8 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test731");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass7 = strMap6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test732");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        java.lang.Class<?> wildcardClass73 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test733");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass20 = serverListOptional19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test734");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        java.lang.Class<?> wildcardClass71 = contentOptional70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test735");
        java.lang.String[] strArray3 = new java.lang.String[] { ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass8 = tagSetOptional7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test736");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass19 = tagSetOptional18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test737");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass20 = strMap19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test738");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        java.lang.Class<?> wildcardClass74 = parameterListOptional73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test739");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass29 = strMap28.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test740");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass22 = serverListOptional21.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test741");
        java.lang.String[] strArray3 = new java.lang.String[] { ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test742");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass14 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test743");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass9 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test744");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass19 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test745");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        java.lang.Class<?> wildcardClass64 = parameterListOptional63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test746");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass18 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test747");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass3 = strArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test748");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass32 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test749");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass18 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test750");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass31 = strMap30.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test751");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass27 = strMap26.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test752");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass9 = tagSetOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test753");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass19 = tagSetOptional18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test754");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass7 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test755");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        java.lang.Class<?> wildcardClass59 = contentOptional58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test756");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "#/components/schemas/", "", "hi!", "hi!", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass10 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test757");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "hi!", "#/components/schemas/", ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test758");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass24 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test759");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass6 = strMap5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test760");
        java.lang.String[] strArray2 = new java.lang.String[] { ",", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass12 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test761");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass29 = serverListOptional28.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test762");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass23 = serverListOptional22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test763");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test764");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "hi!", "#/components/schemas/", ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test765");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass9 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test766");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass35 = serverListOptional34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test767");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        java.lang.Class<?> wildcardClass56 = parameterListOptional55.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test768");
        java.lang.String[] strArray5 = new java.lang.String[] { "*/*", "#/components/schemas/", "hi!", "#/components/schemas/", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test769");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional70 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional72 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional74 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional76 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components75);
        java.lang.Class<?> wildcardClass77 = parameterListOptional76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test770");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        java.lang.Class<?> wildcardClass81 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test771");
        java.lang.String[] strArray1 = new java.lang.String[] { "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test772");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "no description", "hi!", "", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test773");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional45 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional46 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass47 = serverListOptional46.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test774");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "hi!", "#/components/schemas/", ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test775");
        java.lang.String[] strArray3 = new java.lang.String[] { ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass14 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test776");
        java.lang.String[] strArray2 = new java.lang.String[] { ",", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test777");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass37 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test778");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass28 = serverListOptional27.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test779");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional70 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional72 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional74 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional76 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional78 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional80 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional82 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components81);
        java.lang.Class<?> wildcardClass83 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test780");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "hi!", "#/components/schemas/", ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass14 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test781");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass16 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test782");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass9 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test783");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test784");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", ",", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass9 = tagSetOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test785");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
    }

    @Test
    public void test786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test786");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        java.lang.Class<?> wildcardClass65 = contentOptional64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test787");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        java.lang.Class<?> wildcardClass66 = parameterListOptional65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test788");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass40 = strMap39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test789");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass29 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test790");
        java.lang.String[] strArray4 = new java.lang.String[] { "no description", "", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test791");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass41 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test792");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional45 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional46 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional47 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass48 = serverListOptional47.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test793");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional70 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional72 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional74 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional76 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components75);
        java.lang.Class<?> wildcardClass77 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test794");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        java.lang.Class<?> wildcardClass67 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test795");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "#/components/schemas/", "", "hi!", "hi!", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass8 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test796");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass14 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test797");
        java.lang.String[] strArray6 = new java.lang.String[] { "*/*", ",", "no description", "*/*", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
    }

    @Test
    public void test798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test798");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "*/*", "#/components/schemas/", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test799");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "*/*", "#/components/schemas/", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test800");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional70 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional72 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional74 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional76 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional78 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional80 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional82 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components81);
        java.lang.Class<?> wildcardClass83 = parameterListOptional82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test801");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        java.lang.Class<?> wildcardClass85 = contentOptional84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test802");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        java.lang.Class<?> wildcardClass37 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test803");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass37 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test804");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional88 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components87);
        java.lang.Class<?> wildcardClass89 = contentOptional88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test805");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        java.lang.Class<?> wildcardClass41 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test806");
        java.lang.String[] strArray2 = new java.lang.String[] { ",", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test807");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass29 = tagSetOptional28.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test808");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass32 = serverListOptional31.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test809");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass11 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test810");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass39 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test811");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass10 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test812");
        java.lang.String[] strArray3 = new java.lang.String[] { ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass12 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test813");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", ",", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test814");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass43 = strMap42.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test815");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional45 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass46 = serverListOptional45.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test816");
        java.lang.String[] strArray4 = new java.lang.String[] { "no description", "", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass22 = tagSetOptional21.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test817");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        java.lang.Class<?> wildcardClass63 = parameterListOptional62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test818");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass31 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test819");
        java.lang.String[] strArray3 = new java.lang.String[] { ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test820");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "*/*", "#/components/schemas/", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test821");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", ",", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass9 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test822");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass14 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test823");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional70 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional72 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional74 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional76 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional78 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional80 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional82 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional84 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional86 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional88 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components87);
        java.lang.Class<?> wildcardClass89 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test824");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass33 = serverListOptional32.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test825");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass20 = tagSetOptional19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test826");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass23 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test827");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional45 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional46 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional47 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional48 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional49 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional50 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional51 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional52 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional53 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional53);
    }

    @Test
    public void test828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test828");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass2 = tagSetOptional1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test829");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        java.lang.Class<?> wildcardClass53 = parameterListOptional52.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test830");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", ",", "*/*", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test831");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass12 = serverListOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test832");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        java.lang.Class<?> wildcardClass17 = apiResponseArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test833");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
    }

    @Test
    public void test834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test834");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass12 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test835");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test836");
        java.lang.String[] strArray3 = new java.lang.String[] { ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass10 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test837");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass38 = strMap37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test838");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        java.lang.Class<?> wildcardClass69 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test839");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass3 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test840");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        java.lang.Class<?> wildcardClass25 = contentOptional24.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test841");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        java.lang.Class<?> wildcardClass28 = parameterListOptional27.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test842");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass39 = strMap38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test843");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional70 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional72 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional74 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional76 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional78 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional80 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional82 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional84 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional86 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional88 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components87);
        io.swagger.oas.models.Components components89 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional90 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components89);
        io.swagger.oas.models.Components components91 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional92 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components91);
        io.swagger.oas.models.Components components93 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional94 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components93);
        io.swagger.oas.models.Components components95 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional96 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components95);
        io.swagger.oas.models.Components components97 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional98 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional98);
    }

    @Test
    public void test844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test844");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        java.lang.Class<?> wildcardClass51 = contentOptional50.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test845");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass26 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test846");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        java.lang.Class<?> wildcardClass12 = parameterListOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test847");
        java.lang.String[] strArray2 = new java.lang.String[] { ",", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test848");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        java.lang.Class<?> wildcardClass10 = parameterListOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test849");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass10 = tagSetOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test850");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        java.lang.Class<?> wildcardClass9 = apiResponseArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test851");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass30 = tagSetOptional29.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test852");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        io.swagger.oas.models.Components components76 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional77 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components76);
        io.swagger.oas.models.Components components78 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional79 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components78);
        io.swagger.oas.models.Components components80 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional81 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components80);
        java.lang.Class<?> wildcardClass82 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test853");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        java.lang.Class<?> wildcardClass64 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test854");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "*/*", "#/components/schemas/", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass19 = tagSetOptional18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test855");
        java.lang.String[] strArray6 = new java.lang.String[] { "*/*", ",", "no description", "*/*", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass18 = tagSetOptional17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test856");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional88 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components87);
        io.swagger.oas.models.Components components89 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional90 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components89);
        io.swagger.oas.models.Components components91 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional92 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components91);
        io.swagger.oas.models.Components components93 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional94 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components93);
        io.swagger.oas.models.Components components95 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional96 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components95);
        io.swagger.oas.models.Components components97 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional98 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components97);
        java.lang.Class<?> wildcardClass99 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test857");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
    }

    @Test
    public void test858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test858");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass22 = tagSetOptional21.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test859");
        java.lang.String[] strArray3 = new java.lang.String[] { ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test860");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap44 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass45 = strMap44.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test861");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass23 = strMap22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test862");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "hi!", "#/components/schemas/", ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test863");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        io.swagger.oas.models.Components components76 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional77 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components76);
        io.swagger.oas.models.Components components78 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional79 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components78);
        java.lang.Class<?> wildcardClass80 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test864");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass44 = strMap43.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test865");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test866");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional45 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional46 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional47 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional48 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional49 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional50 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass51 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test867");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", ",", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
    }

    @Test
    public void test868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test868");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass30 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test869");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass19 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test870");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass35 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test871");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass19 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test872");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test873");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass44 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test874");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional45 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional46 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional47 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional48 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional49 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional50 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional51 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass52 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test875");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
    }

    @Test
    public void test876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test876");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        java.lang.Class<?> wildcardClass69 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test877");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass21 = tagSetOptional20.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test878");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass9 = tagSetOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test879");
        java.lang.String[] strArray4 = new java.lang.String[] { "no description", "", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass25 = tagSetOptional24.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test880");
        java.lang.String[] strArray5 = new java.lang.String[] { "*/*", "#/components/schemas/", "hi!", "#/components/schemas/", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test881");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass35 = strMap34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test882");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass28 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test883");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass20 = tagSetOptional19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test884");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        java.lang.Class<?> wildcardClass57 = parameterListOptional56.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test885");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass44 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test886");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        io.swagger.oas.models.Components components76 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional77 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components76);
        io.swagger.oas.models.Components components78 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional79 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components78);
        io.swagger.oas.models.Components components80 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional81 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components80);
        io.swagger.oas.models.Components components82 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional83 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components82);
        io.swagger.oas.models.Components components84 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional85 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components84);
        io.swagger.oas.models.Components components86 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional87 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components86);
        io.swagger.oas.models.Components components88 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional89 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional89);
    }

    @Test
    public void test887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test887");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass24 = tagSetOptional23.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test888");
        java.lang.String[] strArray5 = new java.lang.String[] { "*/*", "#/components/schemas/", "hi!", "#/components/schemas/", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass16 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test889");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass16 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test890");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass12 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test891");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap44 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass45 = strMap44.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test892");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        java.lang.Class<?> wildcardClass70 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test893");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        io.swagger.oas.models.Components components76 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional77 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components76);
        io.swagger.oas.models.Components components78 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional79 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components78);
        io.swagger.oas.models.Components components80 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional81 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components80);
        io.swagger.oas.models.Components components82 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional83 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components82);
        io.swagger.oas.models.Components components84 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional85 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components84);
        io.swagger.oas.models.Components components86 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional87 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components86);
        java.lang.Class<?> wildcardClass88 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test894");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap44 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap45 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap46 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap47 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap47);
    }

    @Test
    public void test895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test895");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass30 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test896");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional70 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional72 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional74 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional76 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional78 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional80 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional82 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional84 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional86 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional88 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components87);
        io.swagger.oas.models.Components components89 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional90 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components89);
        io.swagger.oas.models.Components components91 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional92 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components91);
        java.lang.Class<?> wildcardClass93 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test897");
        java.lang.String[] strArray2 = new java.lang.String[] { ",", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass8 = tagSetOptional7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test898");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap44 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass45 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test899");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
    }

    @Test
    public void test900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test900");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass23 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test901");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass19 = serverListOptional18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test902");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass24 = serverListOptional23.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test903");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass22 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test904");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass44 = strMap43.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test905");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
    }

    @Test
    public void test906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test906");
        java.lang.String[] strArray6 = new java.lang.String[] { "no description", "hi!", "#/components/schemas/", ",", "no description", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test907");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional70 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional72 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional74 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional76 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional78 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional80 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components79);
        java.lang.Class<?> wildcardClass81 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test908");
        java.lang.String[] strArray6 = new java.lang.String[] { "*/*", ",", "no description", "", "no description", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
    }

    @Test
    public void test909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test909");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass8 = tagSetOptional7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test910");
        java.lang.String[] strArray5 = new java.lang.String[] { "*/*", "#/components/schemas/", "hi!", "#/components/schemas/", "no description" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass9 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test911");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass38 = strMap37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test912");
        java.lang.String[] strArray4 = new java.lang.String[] { "*/*", "*/*", "*/*", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
    }

    @Test
    public void test913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test913");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", ",", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass13 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test914");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass39 = strMap38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test915");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional88 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components87);
        io.swagger.oas.models.Components components89 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional90 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components89);
        io.swagger.oas.models.Components components91 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional92 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components91);
        io.swagger.oas.models.Components components93 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional94 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components93);
        io.swagger.oas.models.Components components95 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional96 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components95);
        io.swagger.oas.models.Components components97 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional98 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components97);
        java.lang.Class<?> wildcardClass99 = contentOptional98.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test916");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", ",", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass8 = tagSetOptional7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test917");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "*/*", "#/components/schemas/", "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass18 = tagSetOptional17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test918");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass11 = serverListOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test919");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass38 = serverListOptional37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test920");
        java.lang.String[] strArray4 = new java.lang.String[] { "no description", "", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass27 = tagSetOptional26.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test921");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
    }

    @Test
    public void test922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test922");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", ",", "hi!", "," };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
    }

    @Test
    public void test923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test923");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        javax.ws.rs.Produces produces41 = null;
        javax.ws.rs.Produces produces42 = null;
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional44 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces41, produces42, components43);
        java.lang.Class<?> wildcardClass45 = apiResponseArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test924");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap44 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap45 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap46 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap47 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap47);
    }

    @Test
    public void test925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test925");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass44 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test926");
        java.lang.String[] strArray1 = new java.lang.String[] { "*/*" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
    }

    @Test
    public void test927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test927");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass42 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test928");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional45 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional46 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional47 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional48 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass49 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test929");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", ",", "*/*", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
    }

    @Test
    public void test930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test930");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass32 = tagSetOptional31.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test931");
        io.swagger.oas.annotations.links.LinkParameters linkParameters0 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap1 = io.swagger.jaxrs2.OperationParser.getLinkParameters(linkParameters0);
        java.lang.Class<?> wildcardClass2 = strMap1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test932");
        java.lang.String[] strArray4 = new java.lang.String[] { "", ",", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional32 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional32);
    }

    @Test
    public void test933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test933");
        java.lang.String[] strArray3 = new java.lang.String[] { "#/components/schemas/", ",", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass8 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test934");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional88 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components87);
        io.swagger.oas.models.Components components89 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional90 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components89);
        java.lang.Class<?> wildcardClass91 = contentOptional90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test935");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        java.lang.Class<?> wildcardClass65 = parameterListOptional64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test936");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass42 = strMap41.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }
}

