/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 09:38:00 GMT 2020
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.Parameter;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.Link;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.parameters.RequestBody;
import io.swagger.oas.annotations.responses.ApiResponse;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.info.Info;
import io.swagger.oas.models.media.ArraySchema;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.media.XML;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.OAuthFlow;
import io.swagger.oas.models.security.OAuthFlows;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.servers.ServerVariables;
import io.swagger.oas.models.tags.Tag;
import io.swagger.util.Json;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Link link0 = null;
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      MediaType mediaType0 = new MediaType();
      Components components0 = new Components();
      Map<String, Example> map1 = components0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map1);
      Map<String, Encoding> map2 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map2);
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      ArraySchema arraySchema0 = new ArraySchema();
      mediaType1.setSchema(arraySchema0);
      MediaType mediaType3 = mediaType2.example(string0);
      ArraySchema arraySchema1 = new ArraySchema();
      MediaType mediaType4 = mediaType1.encoding(map2);
      MediaType mediaType5 = mediaType3.schema(arraySchema1);
      mediaType0.setEncoding(map2);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Class<Info> class0 = Info.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String string1 = null;
      String string2 = null;
      String string3 = null;
      String string4 = null;
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "java.langio.swagger.oas.models.media.ArraySchema";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string1 = "^C";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string1;
      String string2 = "^%n@l~;hOZ";
      stringArray0[1] = string2;
      stringArray0[2] = string1;
      String string3 = "N";
      stringArray0[3] = string3;
      boolean boolean0 = false;
      String string4 = "[hRbHjR-";
      String string5 = "java.langio.swagger.oas.models.parameters.Parameter";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 548;
      String string6 = "6<e";
      String string7 = "java.langio.swagger.oas.models.parameters.Parameter";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string3, (String) null).when(schema0).description();
      doReturn(string4, string5, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string4, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string6).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(string4, (String) null).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(string2, (String) null).when(schema0).ref();
      doReturn(string7, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      String string8 = "-6W:8M_h6";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string7, (String) null).when(externalDocumentation1).description();
      doReturn(string8, (String) null).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation1);
      String string9 = "";
      String string10 = "java.langio.swagger.oas.models.media.ArraySchema";
      ExternalDocumentation externalDocumentation2 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string9).when(externalDocumentation2).description();
      doReturn(string10, (String) null).when(externalDocumentation2).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation2);
      OperationParser operationParser0 = new OperationParser();
      Link[] linkArray0 = new Link[9];
      String string11 = "java.lang";
      String string12 = "";
      String string13 = "java.langio.swagger.oas.models.parameters.Parameter";
      String string14 = "=|Dg*C}jVcjXk3mX";
      String string15 = "#/components/schemas/";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string6, operationParser0.MEDIA_TYPE, string11, string12, string13).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, string12, string7, string12, stringArray0[2]).when(link0).operationId();
      doReturn(stringArray0[1], string14, string3, string8, string15).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      String string16 = null;
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string16).when(link1).description();
      doReturn(string10, (String) null).when(link1).operationId();
      doReturn(stringArray0[3]).when(link1).operationRef();
      doReturn((LinkParameters) null).when(link1).parameters();
      Optional<io.swagger.oas.models.links.Link> optional4 = OperationParser.getLink(link1);
      boolean boolean1 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(operationParser0.COMPONENTS_REF, (String) null).when(requestBody0).description();
      doReturn(boolean1, false).when(requestBody0).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional5 = OperationParser.getRequestBody(requestBody0, components0);
      String string17 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string17).when(license0).name();
      doReturn(string16).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional6 = OperationParser.getLicense(license0);
      String string18 = "`Y/5T3ue~O;Xy/{?i";
      String string19 = "#/components/schemas/";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string18, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string19, (String) null).when(info0).termsOfService();
      doReturn(string13, (String) null).when(info0).title();
      doReturn(string11, (String) null).when(info0).version();
      Optional<Info> optional7 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "%6^#O 9Cax";
      boolean boolean0 = false;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = null;
      boolean boolean1 = true;
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.DEFAULT;
      String string1 = "}hvX'ep_EZ`}b+X.";
      boolean boolean2 = true;
      Schema schema0 = null;
      String string2 = "";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(arraySchema0).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(explode0, explode0).when(parameter0).explode();
      doReturn(string1, (String) null).when(parameter0).in();
      doReturn(string0, (String) null).when(parameter0).name();
      doReturn(boolean2, false).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string2).when(parameter0).style();
      Components components0 = new Components();
      Map<String, Example> map0 = null;
      Components components1 = components0.examples(map0);
      String string3 = null;
      Example example0 = new Example();
      Components components2 = components1.addExamples(string3, example0);
      Header header0 = new Header();
      Header header1 = header0.example(string3);
      Components components3 = components2.addHeaders(string3, header1);
      ArraySchema arraySchema1 = new ArraySchema();
      String string4 = "\"ryU^2nXA9@whh\\%#BV";
      ArraySchema arraySchema2 = arraySchema1.type(string4);
      Components components4 = components3.addSchemas(string3, arraySchema2);
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components4);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "CQwdO?Ul";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      boolean boolean0 = true;
      String string1 = "";
      String string2 = "4'_*V_<icLm";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 1;
      String string3 = "a\\Q9d|3G[v!";
      String string4 = "io.swagger.jaxrs2.OperationParser";
      String string5 = "_VahfSA6gJ";
      boolean boolean1 = true;
      String string6 = "_12\\ocQ+_%^)ThZ2?9$";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string2, string1, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[0], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string3).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string5, (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(string6, (String) null).when(schema0).ref();
      doReturn(string1).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Server[] serverArray0 = new Server[8];
      String string7 = null;
      String string8 = "*/*";
      String string9 = null;
      String string10 = "java.langio.swagger.oas.models.media.ArraySchema";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string5, string8).when(server0).description();
      doReturn(string1, string5, string4).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string0 = "q[$%.=y1&2R\"E46jHe,";
      String string1 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string2 = "F-ME^j";
      String string3 = "java.langio.swagger.oas.models.media.ArraySchema";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(contact0).email();
      doReturn(string0, string3).when(contact0).name();
      doReturn(string1, string0).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[3];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[3];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      String string4 = ":%Ibr";
      boolean boolean1 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string5 = "Cn}TUoQt)Cg";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components1 = components0.addParameters(string5, parameter0);
      Link[] linkArray0 = new Link[3];
      String string6 = "com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer";
      String string7 = "";
      String string8 = "gns021?:@?lFad %i";
      String string9 = "x/\"WD";
      String string10 = "~`%z.#i)ZYE@LfP";
      String string11 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string12 = "|H^3l~ZMbN`>d([P";
      String string13 = "com.fasterxml.jackson.databind.cfg.MapperConfigBase";
      String string14 = "YGw>";
      String string15 = "h";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(linkParameters0).expression();
      doReturn(string5, string0, string15, (String) null, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string5, string6, string11, string10).when(link0).description();
      doReturn(string1, string12, string3).when(link0).name();
      doReturn(string7, string6, string8, string11, string13).when(link0).operationId();
      doReturn(string9, string10, string8, string14).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.links(map0);
      String string16 = "#bW%6";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Header header0 = new Header();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.addHeaderObject(string5, header0);
      Components components3 = components2.addResponses(string16, apiResponse1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[3];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((io.swagger.oas.annotations.media.ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType1 = mediaType0.encoding(map0);
      String string0 = "bJd\"i5r*c@B3U_K 1&^";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(string0, encoding0);
      ArraySchema arraySchema0 = new ArraySchema();
      io.swagger.oas.models.media.Schema<Void> schema0 = new io.swagger.oas.models.media.Schema<Void>();
      ArraySchema arraySchema1 = arraySchema0.items(schema0);
      String string1 = null;
      ArraySchema arraySchema2 = arraySchema1.type(string1);
      Boolean boolean0 = arraySchema2.getExclusiveMinimum();
      Boolean boolean1 = arraySchema0.getWriteOnly();
      encoding0.setExplode(boolean1);
      encoding0.setAllowReserved(boolean0);
      String string2 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string3 = "io.swagge";
      String string4 = "java.langio.swagger.oas.models.links.Link";
      String string5 = "EqStx,.5";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(exampleObject0).externalValue();
      doReturn(string2, string0, string3, string3).when(exampleObject0).name();
      doReturn(string4, (String) null).when(exampleObject0).summary();
      doReturn(string5, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      String string6 = "java.langio.swagger.oas.models.info.Info";
      String string7 = "java.langio.swagger.oas.models.parameters.Parameter";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string6).when(license0).name();
      doReturn(string2, string7).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      String string8 = "c<'";
      String string9 = ".qMK";
      String string10 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      String string11 = "P'h|C<_E&b8g.6b5m*";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string7).when(info0).description();
      doReturn(license1).when(info0).license();
      doReturn(string8, string11).when(info0).termsOfService();
      doReturn(string9, string6).when(info0).title();
      doReturn(string10).when(info0).version();
      Optional<Info> optional2 = OperationParser.getInfo(info0);
      String string12 = " ";
      String string13 = ",nJsWb)so";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string12).when(linkParameters0).expression();
      doReturn(string9, string13).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      Server[] serverArray0 = new Server[1];
      String string14 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(server0).description();
      doReturn(string14).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      Link[] linkArray0 = new Link[1];
      String string15 = "io.swagger.jaxrs2.OperationParser";
      String string16 = "OHAw9vGis'1o{k";
      String string17 = "java.langio.swagger.oas.models.parameters.Parameter";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string9, string14).when(link0).description();
      doReturn(string16).when(link0).name();
      doReturn(string8, string17).when(link0).operationId();
      doReturn(string15).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      String string18 = "";
      stringArray0[5] = string18;
      Optional<Set<Tag>> optional4 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.ser.std.CollectionSerializer";
      String string1 = null;
      String string2 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[7];
      String string3 = "*/*";
      String string4 = "V<8";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string1, string1, string3, string1, string4).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components0);
      String[] stringArray0 = new String[3];
      String string5 = "e9gf(>]0";
      stringArray0[0] = string5;
      String string6 = "^g9";
      stringArray0[1] = string6;
      String string7 = "M{}|";
      stringArray0[2] = string7;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = null;
      Components components1 = new Components();
      ArraySchema arraySchema0 = new ArraySchema();
      Components components2 = components1.addSchemas(stringArray0[2], arraySchema0);
      String string8 = "java.langio.swagger.oas.models.parameters.Parameter";
      Header header0 = new Header();
      Components components3 = components2.addHeaders(string8, header0);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components4 = components3.callbacks(hashMap0);
      ApiResponses apiResponses0 = new ApiResponses();
      String string9 = "java.langjava.lang.String";
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(string9, apiResponse1);
      String string10 = "bQUmmT!7kpZETxq*";
      ApiResponses apiResponses2 = apiResponses1.addApiResponse(string10, apiResponse1);
      Components components5 = components4.responses(apiResponses2);
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components5);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = ">h=Oyq9G2WCp1$R";
      String string1 = "xx\"6mMe~ERcN#";
      ServerVariable[] serverVariableArray0 = new ServerVariable[4];
      String string2 = "";
      String string3 = "";
      String string4 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string5 = null;
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string1, string2, string3, (String) null).when(serverVariable0).description();
      doReturn(string3, string4, string0, string5).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server0).description();
      doReturn(string0, string0).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      MediaType mediaType0 = new MediaType();
      String string6 = "#/components/schemas/";
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string6, encoding0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string4, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType0, exampleObject0);
      int int0 = 4018;
      int int1 = 100;
      int int2 = 3989;
      Class<io.swagger.oas.models.media.Content> class0 = io.swagger.oas.models.media.Content.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      Server server1 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string6, (String) null).when(server1).description();
      doReturn(string6, (String) null).when(server1).url();
      doReturn((ServerVariable[]) null).when(server1).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      Content content0 = null;
      String string0 = "1uwoWxHNe";
      String string1 = "o7.lV$%.+0lUn|T";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string1, string0, string0).when(apiResponse0).description();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components0);
      Content content1 = null;
      Produces produces2 = null;
      Produces produces3 = null;
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContent(content1, produces2, produces3, components0);
      int int0 = 2924;
      int int1 = (-240);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional4 = OperationParser.getLink(link0);
      Parameter[] parameterArray0 = new Parameter[13];
      io.swagger.oas.annotations.media.ArraySchema arraySchema1 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[8];
      contentArray0[0] = content1;
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Parameter[] parameterArray0 = new Parameter[7];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((io.swagger.oas.annotations.media.ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      Components components0 = new Components();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Header> map0 = apiResponse0.getHeaders();
      Components components1 = components0.headers(map0);
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap0 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      Components components2 = components1.responses(hashMap0);
      String string0 = "\"&(9twLhVS/";
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      Header header0 = new Header();
      io.swagger.oas.models.links.Link link2 = link1.addHeaderObject(string0, header0);
      Components components3 = components2.addLinks(string0, link2);
      String string1 = "*/*";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.description(string1);
      Components components4 = components3.addRequestBodies(string1, requestBody1);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RequestBody requestBody0 = null;
      Components components0 = new Components();
      String string0 = null;
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string0, pathItem0);
      Components components1 = components0.addCallbacks(string0, callback1);
      Example example0 = new Example();
      Example example1 = example0.$ref(string0);
      Components components2 = components1.addExamples(string0, example1);
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components3 = components2.requestBodies(hashMap0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components3);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = null;
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Server[] serverArray0 = new Server[1];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      OperationParser operationParser0 = new OperationParser();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Parameter parameter0 = null;
      Components components0 = new Components();
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components0);
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.info.Info info1 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info1).description();
      doReturn((String) null).when(info1).termsOfService();
      doReturn((String) null).when(info1).title();
      doReturn((String) null).when(info1).version();
      Optional<Info> optional1 = OperationParser.getInfo(info1);
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((io.swagger.oas.annotations.media.ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Link[] linkArray0 = new Link[6];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = null;
      MediaType mediaType1 = mediaType0.example(string0);
      Map<String, Encoding> map0 = mediaType1.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map0);
      Example example0 = new Example();
      String string1 = "8D";
      Example example1 = example0.summary(string1);
      MediaType mediaType3 = mediaType2.addExamples(string0, example1);
      Components components0 = new Components();
      String string2 = null;
      io.swagger.oas.models.parameters.Parameter parameter0 = null;
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme.In securityScheme_In0 = SecurityScheme.In.QUERY;
      SecurityScheme securityScheme1 = securityScheme0.in(securityScheme_In0);
      String string3 = "";
      SecurityScheme securityScheme2 = securityScheme1.description(string3);
      OAuthFlows oAuthFlows0 = new OAuthFlows();
      OAuthFlow oAuthFlow0 = new OAuthFlow();
      OAuthFlows oAuthFlows1 = oAuthFlows0.clientCredentials(oAuthFlow0);
      SecurityScheme securityScheme3 = securityScheme2.flows(oAuthFlows1);
      SecurityScheme securityScheme4 = securityScheme3.bearerFormat(string2);
      Components components1 = components0.addSecuritySchemes(string0, securityScheme4);
      Components components2 = components0.addParameters(string2, parameter0);
      Map<String, Example> map1 = components2.getExamples();
      MediaType mediaType4 = mediaType3.examples(map1);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      MediaType mediaType0 = new MediaType();
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType0, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[8];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((io.swagger.oas.annotations.media.ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = components0.getResponses();
      Components components1 = components0.responses(map0);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Map<String, Header> map1 = link0.getHeaders();
      Components components2 = components1.headers(map1);
      String string0 = ",";
      Example example0 = new Example();
      Example example1 = example0.summary(string0);
      String string1 = null;
      Example example2 = example1.summary(string1);
      Components components3 = components2.addExamples(string0, example1);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.headers(map1);
      Header header0 = new Header();
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.addHeaderObject(string0, header0);
      Components components4 = components3.addResponses(string0, apiResponse2);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = null;
      Components components1 = components0.parameters(map0);
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components2 = components1.requestBodies(hashMap0);
      Link[] linkArray0 = new Link[7];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      Components components3 = components2.links(map1);
      String string0 = "U#u5jI}7";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string0, pathItem0);
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.head(operation0);
      Callback callback2 = callback1.addPathItem(string0, pathItem1);
      Components components4 = components3.addCallbacks(string0, callback2);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((io.swagger.oas.annotations.media.ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components1 = components0.schemas(map0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = components1.getRequestBodies();
      Components components2 = components0.requestBodies(map1);
      String string0 = "E_RF2I>6l";
      Callback callback0 = new Callback();
      Components components3 = components1.addCallbacks(string0, callback0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map2 = components3.getParameters();
      Components components4 = components2.parameters(map2);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      io.swagger.oas.models.links.Link link1 = link0.requestBody(requestBody0);
      io.swagger.oas.models.links.Link link2 = link1.operationRef(string0);
      Components components5 = components4.addLinks(string0, link2);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = null;
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string0 = "ybj@Wy~";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = new Components();
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Map<String, Header> map0 = link0.getHeaders();
      Components components1 = components0.headers(map0);
      String string0 = "io.swagger.oas.models.headers.Header";
      ArraySchema arraySchema0 = new ArraySchema();
      Components components2 = components1.addSchemas(string0, arraySchema0);
      String string1 = "tq7p";
      Callback callback0 = new Callback();
      Components components3 = components2.addCallbacks(string1, callback0);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components4 = components3.securitySchemes(hashMap0);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "NI+-1~^Ur+g1G_U";
      stringArray0[2] = string2;
      String string3 = "g#zTXM'i@--o";
      stringArray0[3] = string3;
      String string4 = "6#w'F:J";
      stringArray0[4] = string4;
      String string5 = "d5>PX=rru4jq|v>7&";
      stringArray0[5] = string5;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      io.swagger.oas.annotations.info.Info info0 = null;
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = null;
      Optional<ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Optional<ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      MediaType mediaType0 = new MediaType();
      String string0 = "";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string0, example0);
      Map<String, Example> map2 = mediaType1.getExamples();
      components0.setExamples(map2);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional3 = OperationParser.getRequestBody(requestBody0, components0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      Link[] linkArray0 = new Link[4];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      Components components1 = components0.responses(apiResponses1);
      String string0 = "";
      Components components2 = components1.addResponses(string0, apiResponse0);
      Encoding encoding0 = new Encoding();
      Map<String, Header> map1 = encoding0.getHeaders();
      Components components3 = components2.headers(map1);
      ArraySchema arraySchema0 = new ArraySchema();
      Header header0 = new Header();
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      Header header1 = header0.required(boolean1);
      List<Example> list0 = header1.getExamples();
      Header header2 = header1.examples(list0);
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Content content2 = content1.addMediaType(string0, mediaType0);
      String string1 = "Can not deserialize Class ";
      io.swagger.oas.models.media.Content content3 = content2.addMediaType(string1, mediaType0);
      Header header3 = header2.content(content3);
      Header header4 = header3.schema(arraySchema0);
      Components components4 = components1.addHeaders(apiResponses0.DEFAULT, header4);
      String string2 = ":*Fa]^XVs8}SW|jTle";
      ArraySchema arraySchema1 = arraySchema0.type(string2);
      ArraySchema arraySchema2 = arraySchema1.items(arraySchema0);
      Components components5 = components3.addSchemas(string0, arraySchema2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "class StringSchema {\n";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string0, header0);
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components2 = components1.examples(map0);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components3 = components0.addLinks(string0, link0);
      Map<String, io.swagger.oas.models.links.Link> map1 = components3.getLinks();
      Components components4 = components2.links(map1);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components5 = components4.callbacks(hashMap0);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContent(content0, produces0, produces0, components5);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional4 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Parameter[] parameterArray0 = new Parameter[2];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((io.swagger.oas.annotations.media.ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
      LinkParameters linkParameters2 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters2).name();
      Map<String, String> map2 = OperationParser.getLinkParameters(linkParameters2);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = null;
      Components components0 = new Components();
      String string0 = "@34Su";
      ArraySchema arraySchema0 = new ArraySchema();
      Components components1 = components0.addSchemas(string0, arraySchema0);
      Example example0 = new Example();
      Components components2 = components1.addExamples(string0, example0);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components3 = components2.securitySchemes(hashMap0);
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = null;
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      ApiResponses apiResponses2 = apiResponses1._default(apiResponse0);
      String string1 = "";
      ApiResponses apiResponses3 = apiResponses2.addApiResponse(string1, apiResponse0);
      ApiResponses apiResponses4 = apiResponses3._default(apiResponse0);
      Components components4 = components3.responses(apiResponses4);
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      String string0 = "no description";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components1 = components0.addParameters(string0, parameter0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string0, securityScheme0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components0.getParameters();
      Components components3 = components2.parameters(map0);
      ArraySchema arraySchema0 = new ArraySchema();
      ArraySchema arraySchema1 = arraySchema0.type(string0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = arraySchema1.getProperties();
      Components components4 = components3.schemas(map1);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.responses.ApiResponse> map1 = null;
      Components components1 = components0.responses(map1);
      String string0 = "[KFgFj(x{bUHZ]2";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components2 = components1.addParameters(string0, parameter0);
      Map<String, io.swagger.oas.models.media.Schema> map2 = components0.getSchemas();
      Components components3 = components2.schemas(map2);
      Components components4 = components3.links(map0);
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components4);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components1 = components0.addLinks(string0, link0);
      String string1 = "}";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components2 = components1.addParameters(string1, parameter0);
      ArraySchema arraySchema0 = new ArraySchema();
      Components components3 = components2.addSchemas(string1, arraySchema0);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components4 = components3.responses(apiResponses0);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      Components components0 = new Components();
      String string0 = "(kglK4";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components2 = components1.headers(hashMap0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map0 = components0.getRequestBodies();
      Components components3 = components2.requestBodies(map0);
      Example example0 = new Example();
      Example example1 = example0.$ref(string0);
      Components components4 = components3.addExamples(string0, example1);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      LinkParameters linkParameters0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Server[] serverArray0 = new Server[8];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      String string0 = ".$B*3{{mQh&}9Ec";
      Callback callback0 = new Callback();
      String string1 = null;
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string1, pathItem0);
      Components components1 = components0.addCallbacks(string0, callback1);
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string1, header0);
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap0 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      Components components3 = components2.responses(hashMap0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Header> map0 = null;
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.headers(map0);
      Components components4 = components3.addResponses(string0, apiResponse1);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[0];
      Produces produces0 = null;
      Components components0 = new Components();
      Operation operation0 = new Operation();
      Map<String, Callback> map0 = operation0.getCallbacks();
      Components components1 = components0.callbacks(map0);
      String string0 = "yE-\\a^oOk";
      ArraySchema arraySchema0 = new ArraySchema();
      Components components2 = components1.addSchemas(string0, arraySchema0);
      String string1 = "";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      String string2 = null;
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.description(string2);
      Boolean boolean0 = Boolean.TRUE;
      io.swagger.oas.models.parameters.RequestBody requestBody2 = requestBody1.required(boolean0);
      boolean boolean1 = requestBody2.equals(string2);
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Content content1 = content0.addMediaType(string0, mediaType0);
      io.swagger.oas.models.parameters.RequestBody requestBody3 = requestBody2.content(content1);
      String string3 = components2.toString();
      Components components3 = components2.addRequestBodies(string1, requestBody3);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
      String string4 = "|1";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string4, (String) null).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(string2).when(info0).version();
      Optional<Info> optional1 = OperationParser.getInfo(info0);
      RequestBody requestBody4 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody4).content();
      doReturn(string4, (String) null).when(requestBody4).description();
      doReturn(boolean1).when(requestBody4).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody4, components1);
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[9];
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "(locale: ";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      boolean boolean0 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string1 = "";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components1 = components0.addLinks(string1, link0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = components0.getSchemas();
      Components components2 = components1.schemas(map1);
      Example example0 = new Example();
      String string2 = "Unexpected token '";
      Map<String, Callback> map2 = components0.getCallbacks();
      HashMap<String, Callback> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, Callback>(map2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      int int0 = Integer.MAX_VALUE;
      int int1 = 3504;
      Schema schema0 = null;
      boolean boolean0 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int0).when(arraySchema0).minItems();
      doReturn(schema0).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "FSa6LkKAj>%:}a7SK";
      String string1 = "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string1, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(operationParser0.COMPONENTS_REF, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string2 = "";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string2, example0);
      Link[] linkArray0 = new Link[4];
      String string3 = "}/NrQ";
      String string4 = ":r9/;XroZ$r0\\H~s";
      String string5 = "Failed to widen type %s with annotation (value %s), from '%s': %s";
      String string6 = "";
      String string7 = "R#orm";
      String string8 = "*/*";
      String string9 = "0gqY+ecUfw\"~s";
      String string10 = "`'?My:</&FcF5 SC7";
      String string11 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Schema<String> schema0 = new io.swagger.oas.models.media.Schema<String>();
      MediaType mediaType1 = mediaType0.schema(schema0);
      XML xML0 = new XML();
      ArraySchema arraySchema0 = new ArraySchema();
      ArraySchema arraySchema1 = arraySchema0.items(schema0);
      Boolean boolean0 = arraySchema1.getWriteOnly();
      XML xML1 = xML0.attribute(boolean0);
      schema0.setXml(xML1);
      String string0 = "S8]$E^Jq9n85{bS|";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[4];
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObject0;
      exampleObjectArray0[2] = exampleObject0;
      exampleObjectArray0[3] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = components0.getResponses();
      Components components1 = components0.responses(map0);
      String string1 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = null;
      Components components2 = components1.addResponses(string1, apiResponse0);
      String string2 = "Invalid type definition for type %s: %s";
      SecurityScheme securityScheme0 = null;
      Components components3 = components2.addSecuritySchemes(string2, securityScheme0);
      Map<String, Example> map1 = mediaType0.getExamples();
      Components components4 = components3.examples(map1);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      Server[] serverArray0 = new Server[5];
      String string0 = "kZwdi";
      String string1 = "no description";
      String string2 = "";
      String string3 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string4 = "n3g6Hoh5fb+4C'CpBC0";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string1, string0).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType1 = mediaType0.encoding(map0);
      String string0 = "bJd\"i5r*c@B3U_K 1&^";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(string0, encoding0);
      ArraySchema arraySchema0 = new ArraySchema();
      io.swagger.oas.models.media.Schema<Void> schema0 = new io.swagger.oas.models.media.Schema<Void>();
      ArraySchema arraySchema1 = arraySchema0.items(schema0);
      String string1 = null;
      ArraySchema arraySchema2 = arraySchema1.type(string1);
      Boolean boolean0 = arraySchema2.getExclusiveMinimum();
      Boolean boolean1 = arraySchema0.getWriteOnly();
      encoding0.setExplode(boolean1);
      encoding0.setAllowReserved(boolean0);
      String string2 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(license0).name();
      doReturn(string2, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      String string3 = "c<'";
      String string4 = ".qMK";
      String string5 = "";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string3, (String) null).when(info0).termsOfService();
      doReturn(string4, (String) null).when(info0).title();
      doReturn(string5).when(info0).version();
      Optional<Info> optional2 = OperationParser.getInfo(info0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string4, (String) null).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      Server[] serverArray0 = new Server[1];
      String string6 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(server0).description();
      doReturn(string6).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      Link[] linkArray0 = new Link[1];
      String string7 = "io.swagger.jaxrs2.OperationParser";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string3, (String) null).when(link0).operationId();
      doReturn(string7).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      String string8 = "";
      stringArray0[5] = string8;
      Optional<Set<Tag>> optional4 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[0];
      Produces produces0 = null;
      Components components0 = new Components();
      Operation operation0 = new Operation();
      Map<String, Callback> map0 = operation0.getCallbacks();
      Components components1 = components0.callbacks(map0);
      String string0 = "yE-\\a^oOk";
      ArraySchema arraySchema0 = new ArraySchema();
      Components components2 = components1.addSchemas(string0, arraySchema0);
      String string1 = "";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      String string2 = null;
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.description(string2);
      Boolean boolean0 = Boolean.TRUE;
      io.swagger.oas.models.parameters.RequestBody requestBody2 = requestBody1.required(boolean0);
      boolean boolean1 = requestBody2.equals(string2);
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Content content1 = content0.addMediaType(string0, mediaType0);
      io.swagger.oas.models.parameters.RequestBody requestBody3 = requestBody2.content(content1);
      String string3 = components2.toString();
      Components components3 = components2.addRequestBodies(string1, requestBody3);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
      String string4 = "";
      String string5 = "    allowReserved: ";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string2).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string4).when(info0).title();
      doReturn(string5, (String) null).when(info0).version();
      Optional<Info> optional1 = OperationParser.getInfo(info0);
      String string6 = null;
      boolean boolean2 = true;
      RequestBody requestBody4 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody4).content();
      doReturn(string6).when(requestBody4).description();
      doReturn(boolean2, false).when(requestBody4).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody4, components1);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.ser.impl.StringArraySerializer";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string1 = "}(ktT2";
      String string2 = "no description";
      String string3 = "&D;@#ktX8EWXtO$`";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string1, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string2, (String) null).when(info0).title();
      doReturn(string3, (String) null).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = new Components();
      String string4 = "";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components1 = components0.addParameters(string4, parameter0);
      String string5 = "?=wO7~";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components2 = components1.addRequestBodies(string5, requestBody0);
      String string6 = ":WjFv";
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme securityScheme1 = securityScheme0.bearerFormat(string5);
      Components components3 = components2.addSecuritySchemes(string6, securityScheme1);
      Example example0 = new Example();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Header header0 = new Header();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.addHeaderObject(string4, header0);
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.description(string5);
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      MediaType mediaType0 = null;
      io.swagger.oas.models.media.Content content1 = content0.addMediaType(string2, mediaType0);
      io.swagger.oas.models.responses.ApiResponse apiResponse3 = apiResponse2.content(content1);
      Map<String, Header> map1 = apiResponse3.getHeaders();
      components3.setHeaders(map1);
      String string7 = "F6G[l";
      Example example1 = example0.description(string7);
      Components components4 = components3.addExamples(string4, example1);
      HashMap<String, io.swagger.oas.models.links.Link> hashMap0 = new HashMap<String, io.swagger.oas.models.links.Link>();
      ArraySchema arraySchema0 = new ArraySchema();
      String string8 = ") out of range of Java short";
      Map<String, io.swagger.oas.models.media.Schema> map2 = arraySchema0.getProperties();
      Components components5 = components2.schemas(map2);
      ArraySchema arraySchema1 = arraySchema0.type(string8);
      ArraySchema arraySchema2 = arraySchema0.items(arraySchema1);
      Integer integer0 = arraySchema2.getMaxItems();
      boolean boolean0 = components4.equals(integer0);
      Components components6 = components4.links(hashMap0);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components4);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string6, (String) null).when(server0).description();
      doReturn(string8, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      MediaType mediaType0 = new MediaType();
      Components components0 = new Components();
      Map<String, Example> map1 = components0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map1);
      Map<String, Encoding> map2 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map2);
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      MediaType mediaType3 = mediaType2.example(string0);
      ArraySchema arraySchema0 = new ArraySchema();
      MediaType mediaType4 = mediaType0.example(string0);
      MediaType mediaType5 = mediaType3.schema(arraySchema0);
      mediaType0.setEncoding(map2);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType5, exampleObject0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string1 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Operation operation0 = new Operation();
      Map<String, Callback> map0 = operation0.getCallbacks();
      Components components1 = components0.callbacks(map0);
      String string0 = null;
      Callback callback0 = null;
      Components components2 = components1.addCallbacks(string0, callback0);
      Header header0 = new Header();
      ArraySchema arraySchema0 = new ArraySchema();
      Header header1 = header0.schema(arraySchema0);
      String string1 = "";
      arraySchema0.setPattern(string1);
      Components components3 = components2.addHeaders(string0, header1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      int int0 = 8;
      int int1 = (-817);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "no description";
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string1, example0);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components2 = components1.addLinks(string1, link0);
      String string2 = "";
      Map<String, Header> map0 = components2.getHeaders();
      Components components3 = components0.headers(map0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme securityScheme1 = securityScheme0.name(string1);
      Components components4 = components2.addSecuritySchemes(string2, securityScheme1);
      Map<String, SecurityScheme> map1 = components0.getSecuritySchemes();
      components2.setSecuritySchemes(map1);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = null;
      Components components5 = components4.addResponses(string1, apiResponse0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components5);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema1).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "#/components/schemas/";
      String string1 = "\\H7uo|p}bN>].7j";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      String string2 = "";
      Header header0 = new Header();
      ArraySchema arraySchema0 = new ArraySchema();
      Boolean boolean0 = arraySchema0.getExclusiveMinimum();
      header0.setDeprecated(boolean0);
      String string3 = "#/components/schemas/";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.in(string2);
      io.swagger.oas.models.parameters.Parameter.StyleEnum parameter_StyleEnum0 = io.swagger.oas.models.parameters.Parameter.StyleEnum.LABEL;
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      String string2 = "tWq}0vdoF";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1).when(info0).termsOfService();
      doReturn(string2, (String) null).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      Content[] contentArray0 = new Content[6];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[4];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[1] = contentArray0[0];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = null;
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      Link[] linkArray0 = new Link[7];
      String string3 = "LX6xj*b/1>Aq";
      String string4 = "";
      String string5 = "H";
      String string6 = "Pov/`\\F|*vC#z%5tc";
      String string7 = "B)8Uhzv<T'";
      String string8 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3, string0, string0, string4).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string4, string5, string4, string3, string5).when(link0).operationId();
      doReturn(string6, string0, string7, string8, string0).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[0];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.links(map1);
      String string9 = "U#u5jI}7";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = new Callback();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.head(operation0);
      Callback callback2 = callback1.addPathItem(string9, pathItem1);
      Components components3 = components2.addCallbacks(string9, callback2);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "bF%pp;akW`>";
      boolean boolean0 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components1 = components0.callbacks(hashMap0);
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components2 = components1.securitySchemes(map0);
      String string1 = "Operation not supported by parser of type ";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      String string2 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.models.links.Link link1 = link0.operationRef(string2);
      Components components3 = components2.addLinks(string1, link1);
      String string3 = "com.fasterxml.jackson.databind.deser.DeserializerCache";
      io.swagger.oas.models.links.Link link2 = link1.operationRef(string3);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components4 = components2.addSecuritySchemes(string3, securityScheme0);
      Link[] linkArray0 = new Link[4];
      String string4 = "ysT`s*S&=Z4A{G:vbD)";
      String string5 = ",";
      String string6 = null;
      String string7 = "wD";
      String string8 = "#/components/schemas/";
      String string9 = "[i~iJM ";
      String string10 = "H+3da~cyzWu,eqW";
      String string11 = "";
      String string12 = "";
      String string13 = "";
      Link link3 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string5, string6, string4, (String) null).when(link3).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link3).name();
      doReturn(string7, string8, string9, string9, (String) null).when(link3).operationId();
      doReturn(string10, string11, string12, string13).when(link3).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link3).parameters();
      linkArray0[0] = link3;
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      ServerVariables serverVariables0 = new ServerVariables();
      String string14 = "vqc'";
      io.swagger.oas.models.servers.ServerVariable serverVariable0 = new io.swagger.oas.models.servers.ServerVariable();
      ServerVariables serverVariables1 = serverVariables0.addServerVariable(string14, serverVariable0);
      io.swagger.oas.models.servers.Server server1 = server0.variables(serverVariables1);
      io.swagger.oas.models.links.Link link4 = link0.server(server1);
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      Components components5 = components3.links(map1);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components5);
      String string15 = "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string8;
      stringArray0[1] = string11;
      stringArray0[2] = string12;
      boolean boolean1 = false;
      boolean boolean2 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string16 = "";
      int int0 = 76;
      String string17 = "mi%4L>1|4KBD17#:QE";
      boolean boolean3 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string15, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean1).when(schema0).deprecated();
      doReturn(string2, (String) null).when(schema0).description();
      doReturn(string13, string9, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string16).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(stringArray0[2]).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string5).when(schema0).minimum();
      doReturn(string17, (String) null).when(schema0).pattern();
      doReturn(boolean3).when(schema0).readOnly();
      doReturn(string13).when(schema0).ref();
      doReturn(string9, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Server[] serverArray0 = new Server[3];
      String string18 = "";
      String string19 = "";
      Server server2 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string12).when(server2).description();
      doReturn(string11).when(server2).url();
      doReturn((ServerVariable[]) null).when(server2).variables();
      serverArray0[0] = server2;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "1_O>mKF";
      boolean boolean0 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components1 = components0.callbacks(hashMap0);
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components2 = components1.securitySchemes(map0);
      String string1 = "Operation not supported by parser of type ";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      String string2 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.models.links.Link link1 = link0.operationRef(string2);
      Components components3 = components2.addLinks(string1, link1);
      String string3 = "com.fasterxml.jackson.databind.deser.DeserializerCache";
      io.swagger.oas.models.links.Link link2 = link1.operationRef(string3);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components4 = components2.addSecuritySchemes(string3, securityScheme0);
      Link[] linkArray0 = new Link[4];
      String string4 = "M/)l_%%Le/$?XO[|";
      String string5 = "";
      String string6 = "#9";
      String string7 = "yc,SyE+6G.m[A1";
      String string8 = "O+zFH8Z4G+#$sKyK*0";
      Link link3 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string2, string3, string4, (String) null).when(link3).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link3).name();
      doReturn(string1, string5, string2, string6, (String) null).when(link3).operationId();
      doReturn(string7, string8, string0, string6).when(link3).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link3).parameters();
      linkArray0[0] = link3;
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      ServerVariables serverVariables0 = new ServerVariables();
      String string9 = "vqc'";
      io.swagger.oas.models.servers.ServerVariable serverVariable0 = new io.swagger.oas.models.servers.ServerVariable();
      ServerVariables serverVariables1 = serverVariables0.addServerVariable(string9, serverVariable0);
      io.swagger.oas.models.servers.Server server1 = server0.variables(serverVariables1);
      io.swagger.oas.models.links.Link link4 = link0.server(server1);
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      Components components5 = components3.links(map1);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components5);
      String string10 = "_XA^\\Dgu IV";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string3;
      stringArray0[1] = string5;
      stringArray0[2] = string3;
      stringArray0[3] = string10;
      String string11 = "";
      stringArray0[4] = string11;
      String string12 = "iqxV2$l,` )1>]";
      stringArray0[5] = string12;
      stringArray0[6] = string5;
      stringArray0[7] = string1;
      boolean boolean1 = false;
      String string13 = "Z@vyc{";
      String string14 = "io.swagger.jaxrs2.OperationParser";
      boolean boolean2 = true;
      boolean boolean3 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 1292;
      String string15 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      boolean boolean4 = true;
      String string16 = ",";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string10, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean1).when(schema0).deprecated();
      doReturn(string13, (String) null).when(schema0).description();
      doReturn(stringArray0[6], string14, (String) null).when(schema0).example();
      doReturn(boolean2, false).when(schema0).exclusiveMaximum();
      doReturn(boolean3, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[3], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string15).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string11).when(schema0).minimum();
      doReturn(stringArray0[6]).when(schema0).pattern();
      doReturn(boolean4, false).when(schema0).readOnly();
      doReturn(string16, (String) null).when(schema0).ref();
      doReturn(string4, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Server[] serverArray0 = new Server[3];
      String string17 = "";
      String string18 = " )X c2GJ$\"we*gRpw";
      Server server2 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string9, string17).when(server2).description();
      doReturn(string8, stringArray0[2]).when(server2).url();
      doReturn((ServerVariable[]) null).when(server2).variables();
      serverArray0[0] = server2;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "fZ.Q";
      String string1 = "*/*";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      OperationParser operationParser0 = new OperationParser();
      ObjectMapper objectMapper0 = Json.mapper();
      MediaType mediaType0 = null;
      String string2 = "' (code 0x";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      boolean boolean0 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      boolean boolean1 = true;
      String string0 = "no description";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.TRUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      String string1 = "";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(explode0, explode1).when(parameter0).explode();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string0, (String) null).when(parameter0).name();
      doReturn(boolean0, false).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string1).when(parameter0).style();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = components0.getResponses();
      Components components1 = components0.responses(map0);
      String string2 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components2 = components1.addResponses(string2, apiResponse0);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Map<String, Header> map1 = link0.getHeaders();
      Components components3 = components2.headers(map1);
      String string3 = "object";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components4 = components3.addRequestBodies(string3, requestBody0);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "TM";
      String string1 = "";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      String string2 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      stringArray0[1] = string2;
      boolean boolean0 = false;
      String string3 = "*/*";
      String string4 = "T-WD0o";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string5 = "";
      int int0 = 2444;
      boolean boolean2 = true;
      String string6 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string3, (String) null).when(schema0).description();
      doReturn(string0, string4, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string5).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string4).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string5).when(schema0).minimum();
      doReturn(string3, (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(string0, (String) null).when(schema0).ref();
      doReturn(string6).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      String[] stringArray1 = new String[8];
      String string7 = "";
      stringArray1[0] = string7;
      String string8 = "x";
      stringArray1[1] = string8;
      String string9 = "";
      stringArray1[2] = string9;
      String string10 = ",";
      stringArray1[3] = string10;
      String string11 = "";
      stringArray1[4] = string11;
      String string12 = "";
      stringArray1[5] = string12;
      String string13 = "i)tm";
      stringArray1[6] = string13;
      String string14 = " does not override `withBeanProperties()`, needs to";
      stringArray1[7] = string14;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray1);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema1);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional4 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "}kBR67?A:bXl$K.@";
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      String string1 = "java.";
      String string2 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 26;
      String string3 = "=oj+]\"ir{R";
      String string4 = "CzUu/Y\\^yIk";
      boolean boolean1 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(string0, string2, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string1, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string1).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string3).when(schema0).minimum();
      doReturn(string4, (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(string3, (String) null).when(schema0).ref();
      doReturn(string4, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      boolean boolean2 = false;
      Components components0 = null;
      Link[] linkArray0 = new Link[4];
      String string5 = "aKb}i7N";
      String string6 = "was expecting either '*' or '/' for a comment";
      String string7 = "{)[bG|d~C2`mHZR$,!";
      String string8 = "";
      String string9 = "";
      String string10 = "No1/U";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2, string5, string6, string7).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string6, string7, string7, string2, string3).when(link0).operationId();
      doReturn(string8, string5, string0, string9, string10).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(linkArray0[1]);
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      boolean boolean3 = false;
      Boolean boolean4 = new Boolean(boolean3);
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.deprecated(boolean4);
      Map<String, Example> map1 = parameter1.getExamples();
      MediaType mediaType1 = mediaType0.examples(map1);
      String string11 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string11).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType1, exampleObject0);
      String string12 = ".Dl><kXN";
      MediaType mediaType2 = mediaType0.example(string12);
      ExampleObject exampleObject1 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject1).externalValue();
      doReturn(string5, (String) null, (String) null, (String) null).when(exampleObject1).name();
      doReturn((String) null).when(exampleObject1).summary();
      doReturn((String) null).when(exampleObject1).value();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType2, exampleObject1);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      int int0 = (-1);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "w\\Rk%:MQ2";
      boolean boolean0 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components1 = components0.callbacks(hashMap0);
      String string1 = "0123456789abcdef";
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string1, header0);
      String string2 = "";
      Example example0 = new Example();
      Example example1 = example0.summary(string2);
      SecurityScheme securityScheme0 = new SecurityScheme();
      String string3 = "g";
      SecurityScheme securityScheme1 = securityScheme0.description(string3);
      SecurityScheme securityScheme2 = securityScheme1.name(string2);
      securityScheme0.setDescription(string3);
      SecurityScheme.In securityScheme_In0 = SecurityScheme.In.COOKIE;
      SecurityScheme securityScheme3 = securityScheme2.in(securityScheme_In0);
      SecurityScheme securityScheme4 = securityScheme3.bearerFormat(string3);
      Components components3 = components0.addSecuritySchemes(string1, securityScheme4);
      Components components4 = components2.addExamples(string2, example1);
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact>();
      Header header1 = header0.schema(schema0);
      String string4 = " KB;pos4oH.<";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      link0.setOperationRef(string1);
      io.swagger.oas.models.links.Link link1 = link0.addHeaderObject(string2, header0);
      io.swagger.oas.models.links.Link link2 = link1.parameters(string3, string1);
      String string5 = "";
      io.swagger.oas.models.links.Link link3 = link1.operationRef(string5);
      Components components5 = components4.addLinks(string4, link3);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components5);
      int int0 = Integer.MAX_VALUE;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      OperationParser operationParser0 = new OperationParser();
      Link link4 = null;
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link4);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "bF%pp;akW`>";
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      String string1 = "";
      boolean boolean1 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, string1).when(requestBody0).description();
      doReturn(boolean0, boolean1).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components1 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components2 = components1.securitySchemes(map0);
      String string2 = "Operation not supported by parser of type ";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      String string3 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.models.links.Link link1 = link0.operationRef(string3);
      Components components3 = components2.addLinks(string2, link1);
      String string4 = "com.fasterxml.jackson.databind.deser.DeserializerCache";
      io.swagger.oas.models.links.Link link2 = link1.operationRef(string4);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components4 = components2.addSecuritySchemes(string4, securityScheme0);
      Link[] linkArray0 = new Link[4];
      String string5 = "ysT`s*S&=Z4A{G:vbD)";
      String string6 = ",";
      String string7 = null;
      String string8 = "wD";
      String string9 = "#/components/schemas/";
      String string10 = "[i~iJM ";
      String string11 = "H+3da~cyzWu,eqW";
      String string12 = "";
      String string13 = "";
      String string14 = "";
      String string15 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string16 = "!^2L";
      String string17 = "com.fasterxml.jackson.databind.ser.std.StringSerializer";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(linkParameters0).name();
      Link link3 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string6, string7, string5, string13).when(link3).description();
      doReturn(string9, string15, string10, string16).when(link3).name();
      doReturn(string8, string9, string10, string10, string17).when(link3).operationId();
      doReturn(string11, string12, string13, string14).when(link3).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link3).parameters();
      linkArray0[0] = link3;
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      ServerVariables serverVariables0 = new ServerVariables();
      String string18 = "vqc'";
      io.swagger.oas.models.servers.ServerVariable serverVariable0 = new io.swagger.oas.models.servers.ServerVariable();
      ServerVariables serverVariables1 = serverVariables0.addServerVariable(string18, serverVariable0);
      io.swagger.oas.models.servers.Server server1 = server0.variables(serverVariables1);
      io.swagger.oas.models.links.Link link4 = link0.server(server1);
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      Components components5 = components3.links(map1);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[6];
      boolean boolean0 = false;
      boolean boolean1 = false;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(arraySchema0).maxItems();
      doReturn(0, 0, 0, 0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null, (Schema) null).when(arraySchema0).schema();
      doReturn(false, false, false, false, false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = null;
      boolean boolean2 = false;
      String string0 = null;
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.TRUE;
      boolean boolean3 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null, (Class) null, (Class) null, (Class) null, (Class) null).when(schema0).implementation();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false, false, false, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false, false, false, false).when(parameter0).allowReserved();
      doReturn(arraySchema0, (io.swagger.oas.annotations.media.ArraySchema) null, (io.swagger.oas.annotations.media.ArraySchema) null, (io.swagger.oas.annotations.media.ArraySchema) null, (io.swagger.oas.annotations.media.ArraySchema) null).when(parameter0).array();
      doReturn((Object) contentArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(parameter0).content();
      doReturn(boolean2, false, false, false, false).when(parameter0).deprecated();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).description();
      doReturn(explode0, explode0, explode1, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).in();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(boolean3, false, false, false, false).when(parameter0).required();
      doReturn(schema0, schema0, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      Components components0 = new Components();
      String string1 = "|Fo5_jFJB+F.";
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      Components components1 = components0.addParameters(string1, parameter1);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map0 = mediaType0.getExamples();
      Components components2 = components1.examples(map0);
      Example example0 = new Example();
      String string2 = "{2Ojh%W|8M>{[d^$0@t";
      Example example1 = example0.$ref(string2);
      String string3 = "";
      Example example2 = example1.description(string3);
      Components components3 = components2.addExamples(string1, example2);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components3);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType1 = mediaType0.encoding(map0);
      String string0 = "bJd\"i5r*c@B3U_K 1&^";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(string0, encoding0);
      ArraySchema arraySchema0 = new ArraySchema();
      io.swagger.oas.models.media.Schema<Void> schema0 = new io.swagger.oas.models.media.Schema<Void>();
      ArraySchema arraySchema1 = arraySchema0.items(schema0);
      String string1 = null;
      ArraySchema arraySchema2 = arraySchema1.type(string1);
      Boolean boolean0 = arraySchema2.getExclusiveMinimum();
      Boolean boolean1 = arraySchema0.getWriteOnly();
      encoding0.setExplode(boolean1);
      encoding0.setAllowReserved(boolean0);
      String string2 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string3 = "7z\"h}e92`o)sy,MEm{o";
      String string4 = ",";
      String string5 = "p Dk<bE9Y";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(exampleObject0).externalValue();
      doReturn(string2, string3, string4, string0).when(exampleObject0).name();
      doReturn(string5, (String) null).when(exampleObject0).summary();
      doReturn(string1).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string5).when(license0).name();
      doReturn(string2, string0).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      String string6 = "c<'";
      String string7 = ".qMK";
      String string8 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      String string9 = "";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      String string10 = "io.swagger.jaxrs2.util.ReaderUtils";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string9).when(info0).description();
      doReturn(license1).when(info0).license();
      doReturn(string6, string0).when(info0).termsOfService();
      doReturn(string7, string10).when(info0).title();
      doReturn(string8).when(info0).version();
      Optional<Info> optional2 = OperationParser.getInfo(info0);
      String string11 = "Ww*\\;|J;>-^egSx3+";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string9).when(linkParameters0).expression();
      doReturn(string7, string11).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      Server[] serverArray0 = new Server[1];
      String string12 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(server0).description();
      doReturn(string12).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      Link[] linkArray0 = new Link[1];
      String string13 = "io.swagger.jaxrs2.OperationParser";
      String string14 = "MK4rb?TNx#MKk$]";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string14).when(link0).description();
      doReturn(string13).when(link0).name();
      doReturn(string6, string5).when(link0).operationId();
      doReturn(string13).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      String string15 = "";
      stringArray0[5] = string15;
      Optional<Set<Tag>> optional4 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType1 = mediaType0.encoding(map0);
      String string0 = "bJd\"i5r*c@B3U_K 1&^";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(string0, encoding0);
      ArraySchema arraySchema0 = new ArraySchema();
      io.swagger.oas.models.media.Schema<Void> schema0 = new io.swagger.oas.models.media.Schema<Void>();
      ArraySchema arraySchema1 = arraySchema0.items(schema0);
      String string1 = null;
      ArraySchema arraySchema2 = arraySchema1.type(string1);
      Boolean boolean0 = arraySchema2.getExclusiveMinimum();
      Boolean boolean1 = arraySchema0.getWriteOnly();
      encoding0.setExplode(boolean1);
      encoding0.setAllowReserved(boolean0);
      String string2 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string3 = "R^c3)5+GfjVX@Nn4/0";
      String string4 = "&Znz@GY&PSiU!";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(exampleObject0).externalValue();
      doReturn(string2, string1, string0).when(exampleObject0).name();
      doReturn(string3, (String) null).when(exampleObject0).summary();
      doReturn(string4, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      String string5 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string2).when(license0).name();
      doReturn(string2, string5).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      String string6 = "c<'";
      String string7 = ".qMK";
      String string8 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      String string9 = "f";
      String string10 = "";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string6).when(info0).description();
      doReturn(license1).when(info0).license();
      doReturn(string6, string9).when(info0).termsOfService();
      doReturn(string7, string10).when(info0).title();
      doReturn(string8).when(info0).version();
      Optional<Info> optional2 = OperationParser.getInfo(info0);
      String string11 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string7, string11).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      Server[] serverArray0 = new Server[1];
      String string12 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(server0).description();
      doReturn(string12).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      Link[] linkArray0 = new Link[1];
      String string13 = "io.swagger.jaxrs2.OperationParser";
      String string14 = "no description";
      String string15 = "0w}&V";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string14).when(link0).description();
      doReturn(string3).when(link0).name();
      doReturn(string6, string15).when(link0).operationId();
      doReturn(string13).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      String string16 = "";
      stringArray0[5] = string16;
      Optional<Set<Tag>> optional4 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType1 = mediaType0.encoding(map0);
      String string0 = "bJd\"i5r*c@B3U_K 1&^";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(string0, encoding0);
      ArraySchema arraySchema0 = new ArraySchema();
      io.swagger.oas.models.media.Schema<Void> schema0 = new io.swagger.oas.models.media.Schema<Void>();
      ArraySchema arraySchema1 = arraySchema0.items(schema0);
      String string1 = null;
      ArraySchema arraySchema2 = arraySchema1.type(string1);
      Boolean boolean0 = arraySchema2.getExclusiveMinimum();
      Boolean boolean1 = arraySchema0.getWriteOnly();
      encoding0.setExplode(boolean1);
      encoding0.setAllowReserved(boolean0);
      String string2 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string3 = "was expecting double-quote to start field name";
      String string4 = "VrB^Pz$c:D2aj|50";
      String string5 = "";
      String string6 = "f6Cm-7yuhr|F_2QSuEto";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(exampleObject0).externalValue();
      doReturn(string2, string0, string4, string5).when(exampleObject0).name();
      doReturn(string4, (String) null).when(exampleObject0).summary();
      doReturn(string6, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      String string7 = "";
      String string8 = "*eB?z)";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string7).when(license0).name();
      doReturn(string2, string8).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      String string9 = "c<'";
      String string10 = ".qMK";
      String string11 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string6).when(info0).description();
      doReturn(license1).when(info0).license();
      doReturn(string9, string3).when(info0).termsOfService();
      doReturn(string10, string11).when(info0).title();
      doReturn(string11).when(info0).version();
      Optional<Info> optional2 = OperationParser.getInfo(info0);
      String string12 = null;
      String string13 = ";EA(Lb5oC<\\`OW<&5(\"";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string12).when(linkParameters0).expression();
      doReturn(string10, string13).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      Server[] serverArray0 = new Server[1];
      String string14 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(server0).description();
      doReturn(string14).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      Link[] linkArray0 = new Link[1];
      String string15 = "io.swagger.jaxrs2.OperationParser";
      String string16 = "I/OVa'w+^s\\\"";
      String string17 = null;
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string10, string16).when(link0).description();
      doReturn(string12).when(link0).name();
      doReturn(string9, string17).when(link0).operationId();
      doReturn(string15).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      String string18 = "";
      stringArray0[5] = string18;
      Optional<Set<Tag>> optional4 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      MediaType mediaType0 = new MediaType();
      Components components0 = new Components();
      Map<String, Example> map1 = components0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map1);
      Map<String, Encoding> map2 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map2);
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      ArraySchema arraySchema0 = new ArraySchema();
      mediaType1.setSchema(arraySchema0);
      MediaType mediaType3 = mediaType2.example(string0);
      ArraySchema arraySchema1 = new ArraySchema();
      MediaType mediaType4 = mediaType0.example(string0);
      MediaType mediaType5 = mediaType3.schema(arraySchema1);
      mediaType0.setEncoding(map2);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Class<ArraySchema> class0 = ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String string1 = null;
      String string2 = null;
      String string3 = null;
      String string4 = null;
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = "TM";
      String string1 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string2 = null;
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string2).when(info0).termsOfService();
      doReturn(string0, string2).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      String string3 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      stringArray0[1] = string3;
      boolean boolean0 = false;
      String string4 = "*/*";
      String string5 = "T-WD0o";
      boolean boolean1 = false;
      String string6 = "kiN.g`&Y]p2]M";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string6, (String) null).when(externalDocumentation0).description();
      doReturn(string4, (String) null).when(externalDocumentation0).url();
      String string7 = "";
      int int0 = 2444;
      boolean boolean2 = true;
      String string8 = "";
      String string9 = "h!AKe*3xQ";
      String string10 = "_~MV2M94*Xq4<?rE=5";
      int int1 = 65;
      int int2 = 554;
      String string11 = "b^ll1fg<U?2*5e~\\";
      boolean boolean3 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string4, string3).when(schema0).description();
      doReturn(string0, string5, string9, string10).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string7).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1, 0).when(schema0).maxProperties();
      doReturn(string5).when(schema0).maximum();
      doReturn(int0, int2).when(schema0).minProperties();
      doReturn(string7).when(schema0).minimum();
      doReturn(string4, string11).when(schema0).pattern();
      doReturn(boolean2, boolean3).when(schema0).readOnly();
      doReturn(string0, stringArray0[1]).when(schema0).ref();
      doReturn(string8).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      String[] stringArray1 = new String[8];
      String string12 = "";
      stringArray1[0] = string12;
      String string13 = "x";
      stringArray1[1] = string13;
      String string14 = "";
      stringArray1[2] = string14;
      String string15 = ",";
      stringArray1[3] = string15;
      String string16 = "";
      stringArray1[4] = string16;
      String string17 = "";
      stringArray1[5] = string17;
      String string18 = "i)tm";
      stringArray1[6] = string18;
      String string19 = " does not override `withBeanProperties()`, needs to";
      stringArray1[7] = string19;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray1);
      String string20 = "";
      boolean boolean4 = false;
      String string21 = "JL|)9MD~q(!";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      String string22 = "#/components/schemas/";
      int int3 = 1491;
      String string23 = "no description";
      String string24 = "H\\/ *vKNX;";
      boolean boolean5 = false;
      String string25 = "_,X!Y&};:P-/q7";
      String string26 = "@{d)o%$7Q";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string20).when(schema1)._default();
      doReturn(stringArray1).when(schema1)._enum();
      doReturn(boolean4).when(schema1).deprecated();
      doReturn(stringArray1[4]).when(schema1).description();
      doReturn(string7, string21, (String) null).when(schema1).example();
      doReturn(boolean1).when(schema1).exclusiveMaximum();
      doReturn(boolean3).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema1).externalDocs();
      doReturn(string22, (String) null).when(schema1).format();
      doReturn(int3).when(schema1).maxLength();
      doReturn(0).when(schema1).maxProperties();
      doReturn(string23).when(schema1).maximum();
      doReturn(int0, 0).when(schema1).minProperties();
      doReturn(string24).when(schema1).minimum();
      doReturn(string19, (String) null).when(schema1).pattern();
      doReturn(boolean5).when(schema1).readOnly();
      doReturn(string25, (String) null).when(schema1).ref();
      doReturn(string26, (String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema1);
      String string27 = "com.fasterxml.jackson.core.util.TextBuffer";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string27, (String) null).when(server0).description();
      doReturn(stringArray1[3], (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      int int0 = 2;
      Class<io.swagger.oas.models.ExternalDocumentation> class0 = io.swagger.oas.models.ExternalDocumentation.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      int int1 = 1692;
      Schema schema1 = null;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[6];
      boolean boolean0 = false;
      boolean boolean1 = false;
      int int0 = (-1453);
      int int1 = (-387);
      int int2 = Integer.MAX_VALUE;
      int int3 = Integer.MAX_VALUE;
      int int4 = 4090;
      int int5 = 3294;
      int int6 = 1971;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean2 = true;
      boolean boolean3 = true;
      boolean boolean4 = false;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int3).when(arraySchema0).minItems();
      doReturn(schema0, schema0).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = null;
      boolean boolean5 = false;
      String string0 = null;
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.TRUE;
      boolean boolean6 = false;
      Class<ArraySchema> class0 = ArraySchema.class;
      Class<MediaType> class1 = MediaType.class;
      Class<ArraySchema> class2 = ArraySchema.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0, class0).when(schema1).implementation();
      boolean boolean7 = false;
      boolean boolean8 = true;
      boolean boolean9 = false;
      boolean boolean10 = true;
      boolean boolean11 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema1 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray1 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray1[0] = content0;
      contentArray1[1] = contentArray1[0];
      contentArray1[2] = contentArray1[1];
      contentArray1[3] = contentArray1[2];
      contentArray1[4] = contentArray1[3];
      contentArray1[5] = contentArray1[4];
      contentArray1[6] = contentArray1[5];
      boolean boolean12 = false;
      String string1 = "expected a hex-digit for character escape sequence";
      String string2 = "Operation not supported by generator of type ";
      String string3 = "%";
      String string4 = "";
      String string5 = "d7_l3[=^Iyg";
      String string6 = "io.swagge";
      String string7 = "N3h:1c2**r/EnT_hV";
      String string8 = "uvLe{}B:C";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string9 = null;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean5).when(parameter0).allowEmptyValue();
      doReturn(boolean1, boolean5).when(parameter0).allowReserved();
      doReturn(arraySchema0).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean5, boolean0).when(parameter0).deprecated();
      doReturn(string0, string1, string0).when(parameter0).description();
      doReturn(explode0, explode0, explode1).when(parameter0).explode();
      doReturn(string0, string4).when(parameter0).in();
      doReturn(string0, string7, string6).when(parameter0).name();
      doReturn(boolean6, boolean11, boolean2).when(parameter0).required();
      doReturn(schema1, schema1).when(parameter0).schema();
      doReturn(string0, string1, string7).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      Components components0 = new Components();
      String string10 = "|Fo5_jFJB+F.";
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      Components components1 = components0.addParameters(string10, parameter1);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map0 = mediaType0.getExamples();
      Components components2 = components1.examples(map0);
      Example example0 = new Example();
      String string11 = "{2Ojh%W|8M>{[d^$0@t";
      Example example1 = example0.$ref(string11);
      String string12 = "";
      Example example2 = example1.description(string12);
      Components components3 = components2.addExamples(string10, example2);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components3);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.N3H:1C2**R/ENT_HV
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      Link[] linkArray0 = new Link[2];
      String string0 = null;
      String string1 = "";
      String string2 = "0BSw}=Fj\\v r 1F";
      String string3 = "4QaL.=F$;";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn((String) null, (String) null).when(link0).name();
      doReturn(string1, string0).when(link0).operationId();
      doReturn(string2, string3, (String) null, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(contact0).email();
      doReturn(string3, (String) null).when(contact0).name();
      doReturn(string2, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String[] stringArray0 = new String[6];
      String string4 = "^7'TvaL&j";
      stringArray0[0] = string4;
      String string5 = "{,/+)/X9UU]bmxyLp";
      stringArray0[1] = string5;
      String string6 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      stringArray0[2] = string6;
      String string7 = "";
      stringArray0[3] = string7;
      String string8 = "";
      stringArray0[4] = string8;
      String string9 = "_0yH4q";
      stringArray0[5] = string9;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Content content0 = null;
      String string10 = "java.lang";
      String string11 = "(";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0).when(apiResponse0).content();
      doReturn(string10, string11, (String) null, (String) null).when(apiResponse0).description();
      doReturn((Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      Components components1 = components0.responses(apiResponses0);
      ArraySchema arraySchema0 = new ArraySchema();
      String string12 = "G5v[91\"[4";
      ArraySchema arraySchema1 = arraySchema0.type(string12);
      Components components2 = components1.addSchemas(stringArray0[1], arraySchema1);
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      Components components3 = components2.parameters(hashMap0);
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components3);
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      int int0 = (-3689);
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Class<Integer> class1 = Integer.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      boolean boolean1 = false;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "";
      String string1 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(operationParser0.COMMA, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMMA, operationParser0.MEDIA_TYPE).when(link0).description();
      doReturn(string0).when(link0).operationId();
      doReturn(operationParser0.MEDIA_TYPE, string1).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = operationParser0.MEDIA_TYPE;
      stringArray0[1] = operationParser0.COMMA;
      stringArray0[2] = operationParser0.COMMA;
      stringArray0[3] = operationParser0.MEDIA_TYPE;
      stringArray0[4] = operationParser0.MEDIA_TYPE;
      stringArray0[5] = operationParser0.COMPONENTS_REF;
      boolean boolean2 = true;
      String string2 = "5jD(;Y";
      String string3 = ")Jgs2*/uH>9I`>ZK$[(";
      String string4 = "N[RR:q_Xbugd&6X(~";
      String string5 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0], string5).when(externalDocumentation0).description();
      doReturn(string5).when(externalDocumentation0).url();
      String string6 = ",";
      int int1 = 0;
      int int2 = (-1);
      String string7 = "NUMBER_INT";
      String string8 = "k96{lx8";
      String string9 = "io.swagge";
      String string10 = ", copied ";
      boolean boolean3 = false;
      String string11 = "!jjhGsy=";
      String string12 = "io.swagge";
      boolean boolean4 = false;
      String string13 = "java.lang";
      String string14 = "fj!";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean2, boolean2).when(schema2).deprecated();
      doReturn(string2, string9).when(schema2).description();
      doReturn(string3, string4, stringArray0[0], string10).when(schema2).example();
      doReturn(boolean0, boolean3).when(schema2).exclusiveMaximum();
      doReturn(boolean0, boolean2).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema2).externalDocs();
      doReturn(string6, string11).when(schema2).format();
      doReturn(int1).when(schema2).maxLength();
      doReturn(operationParser0.COMMA).when(schema2).maximum();
      doReturn(int2).when(schema2).minProperties();
      doReturn(string7).when(schema2).minimum();
      doReturn(string8, string12).when(schema2).pattern();
      doReturn(boolean0, boolean4).when(schema2).readOnly();
      doReturn(string2, string13).when(schema2).ref();
      doReturn(stringArray0[3], string14).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema2);
      String string15 = null;
      String string16 = "java.lang";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMMA, (String) null).when(contact0).email();
      doReturn(string16, (String) null).when(contact0).name();
      doReturn(operationParser0.MEDIA_TYPE, (String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0], (String) null).when(license0).name();
      doReturn(stringArray0[1], (String) null).when(license0).url();
      String string17 = "java.langio.swagger.oas.models.media.ArraySchema";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string15).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(operationParser0.COMPONENTS_REF, string17).when(info0).termsOfService();
      doReturn(string2, string6).when(info0).title();
      doReturn(operationParser0.COMMA, string10).when(info0).version();
      Optional<Info> optional3 = OperationParser.getInfo(info0);
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.example(operationParser0.DEFAULT_DESCRIPTION);
      Example example0 = new Example();
      MediaType mediaType2 = mediaType1.addExamples(operationParser0.COMMA, example0);
      ArraySchema arraySchema1 = new ArraySchema();
      MediaType mediaType3 = mediaType2.schema(arraySchema1);
      String string18 = "tAuDc-I7\\F<u";
      Encoding encoding0 = new Encoding();
      Boolean boolean5 = Boolean.valueOf(operationParser0.COMPONENTS_REF);
      Encoding encoding1 = encoding0.allowReserved(boolean5);
      Components components0 = new Components();
      Map<String, Header> map0 = components0.getHeaders();
      Encoding encoding2 = encoding1.headers(map0);
      MediaType mediaType4 = mediaType3.addEncoding(string18, encoding2);
      String string19 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string20 = "[AnnotedClass ";
      String string21 = "z,x!(SMQ)c}22_";
      String string22 = "java.lang";
      String string23 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string13, string21).when(exampleObject0).externalValue();
      doReturn(operationParser0.MEDIA_TYPE, string19, string5).when(exampleObject0).name();
      doReturn(string9, string22).when(exampleObject0).summary();
      doReturn(string20, string23).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType4, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      MediaType mediaType0 = new MediaType();
      Components components0 = new Components();
      Map<String, Example> map1 = components0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map1);
      Map<String, Encoding> map2 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map2);
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      ArraySchema arraySchema0 = new ArraySchema();
      mediaType1.setSchema(arraySchema0);
      MediaType mediaType3 = mediaType2.example(string0);
      ArraySchema arraySchema1 = new ArraySchema();
      MediaType mediaType4 = mediaType0.example(string0);
      MediaType mediaType5 = mediaType3.schema(arraySchema1);
      mediaType0.setEncoding(map2);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Class<ArraySchema> class0 = ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string1 = "annotation";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string1, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String string2 = null;
      String string3 = null;
      String string4 = null;
      String string5 = null;
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string2).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = ">h=Oyq9G2WCp1$R";
      String string1 = "io.swagger.jaxrs2.OperationParser";
      String string2 = "USE_DEFAULTS";
      Server[] serverArray0 = new Server[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      ServerVariable[] serverVariableArray0 = new ServerVariable[2];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      Server server1 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server1).description();
      doReturn(string0, string2).when(server1).url();
      doReturn(serverVariableArray0).when(server1).variables();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server1);
      MediaType mediaType0 = new MediaType();
      String string3 = "#/components/schemas/";
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string3, encoding0);
      String string4 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType0, exampleObject0);
      int int0 = 4018;
      int int1 = 100;
      int int2 = 3989;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      Server server2 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(server2).description();
      doReturn(string4).when(server2).url();
      Optional<io.swagger.oas.models.servers.Server> optional4 = OperationParser.getServer(server2);
      ExampleObject exampleObject1 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject1).externalValue();
      doReturn(string3, (String) null, (String) null, (String) null).when(exampleObject1).name();
      doReturn((String) null).when(exampleObject1).summary();
      doReturn((String) null).when(exampleObject1).value();
      Optional<MediaType> optional5 = OperationParser.getMediaType(mediaType1, exampleObject1);
      Link[] linkArray0 = new Link[9];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = ":71VMe3";
      String[] stringArray0 = null;
      boolean boolean0 = true;
      String string1 = "java.lang";
      String string2 = "8;HtR]Pt0Ht>6E=u";
      String string3 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      int int0 = (-2448);
      int int1 = (-1777);
      String string4 = " Y0kytRAUv'cti";
      String string5 = "$SY)[+v{hRug(S";
      String string6 = null;
      boolean boolean1 = false;
      String string7 = "qf";
      String string8 = "d>U.5(GnwTBeh=)";
      boolean boolean2 = true;
      String string9 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string5).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string1, string1).when(schema0).description();
      doReturn(string0, string2, string0, string6).when(schema0).example();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, string7).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string1).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string5, string8).when(schema0).pattern();
      doReturn(boolean0, boolean2).when(schema0).readOnly();
      doReturn(string6).when(schema0).ref();
      doReturn(string1, string9).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Server[] serverArray0 = new Server[8];
      String string10 = ",t7MCfam> SWKV?";
      String string11 = "";
      String string12 = "Lu``+";
      String string13 = "P(OOJ)7qE";
      String string14 = "T(53,87j^pe9LRFB?";
      ServerVariable[] serverVariableArray0 = new ServerVariable[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string10, (String) null, (String) null, (String) null).when(server0).description();
      doReturn(string0, string11, (String) null, (String) null, (String) null).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      Link link0 = null;
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      MediaType mediaType0 = new MediaType();
      Components components0 = new Components();
      Map<String, Example> map1 = components0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map1);
      Map<String, Encoding> map2 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map2);
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      ArraySchema arraySchema0 = new ArraySchema();
      mediaType1.setSchema(arraySchema0);
      MediaType mediaType3 = mediaType2.example(string0);
      MediaType mediaType4 = mediaType0.example(string0);
      MediaType mediaType5 = mediaType3.schema(arraySchema0);
      mediaType0.setEncoding(map2);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String string1 = null;
      String string2 = null;
      String string3 = null;
      String string4 = null;
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      String string0 = "?-7oghA9(R<zz";
      String string1 = "WHo`SO.g{;o?uX{YPFR";
      String string2 = "io.swagge";
      String string3 = ">o@\"%K";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string3, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string1, string2).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[3];
      String string4 = " does not override `withBeanProperties()`, needs to";
      String string5 = "ZFukA|&`C*&;";
      String string6 = "3VG/(aS\"+@5;kflej";
      String string7 = "0";
      String string8 = "F5qb";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string1, string3, string1, string1).when(exampleObject0).externalValue();
      doReturn(string1, string0, string0, string0, string2).when(exampleObject0).name();
      doReturn(string4, string5, string6, string5, string1).when(exampleObject0).summary();
      doReturn(string4, string7, string0, string4, string8).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      String string9 = "L,!N\\1C0_(J@LEq~";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string6, string8, string9).when(content0).mediaType();
      contentArray0[0] = content0;
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      Link link0 = null;
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      MediaType mediaType0 = new MediaType();
      Components components0 = new Components();
      Map<String, Example> map1 = components0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map1);
      Map<String, Encoding> map2 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map2);
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      ArraySchema arraySchema0 = new ArraySchema();
      mediaType1.setSchema(arraySchema0);
      MediaType mediaType3 = mediaType2.example(string0);
      ArraySchema arraySchema1 = new ArraySchema();
      MediaType mediaType4 = mediaType1.encoding(map2);
      MediaType mediaType5 = mediaType3.schema(arraySchema1);
      mediaType0.setEncoding(map2);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Class<Info> class0 = Info.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string1 = "";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string1).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String string2 = null;
      String string3 = null;
      String string4 = null;
      String string5 = null;
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string2).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[1];
      stringArray0[0] = string2;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      MediaType mediaType0 = new MediaType();
      Components components0 = new Components();
      Map<String, Example> map1 = components0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map1);
      Map<String, Encoding> map2 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map2);
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      ArraySchema arraySchema0 = new ArraySchema();
      mediaType1.setSchema(arraySchema0);
      MediaType mediaType3 = mediaType2.example(string0);
      ArraySchema arraySchema1 = new ArraySchema();
      MediaType mediaType4 = new MediaType();
      MediaType mediaType5 = mediaType3.schema(arraySchema1);
      mediaType0.setEncoding(map2);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Class<ArraySchema> class0 = ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null, (Class) null).when(schema0).implementation();
      String string1 = "annotation";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null).when(content0).examples();
      doReturn(string1, string1, (String) null, (String) null).when(content0).mediaType();
      doReturn(schema0, (Schema) null, (Schema) null).when(content0).schema();
      String string2 = null;
      String string3 = null;
      String string4 = null;
      String string5 = null;
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn(string2, (String) null, (String) null).when(apiResponse0).description();
      doReturn((Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      Content content0 = null;
      String string0 = "1uwoWxHNe";
      String string1 = "o7.lV$%.+0lUn|T";
      Link[] linkArray0 = new Link[6];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      String string2 = "Unexpected IOException (of type %s): %s";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string1, string0, string0).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string1, string0, string2, string0, string2).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components0);
      Content content1 = null;
      Produces produces2 = null;
      Produces produces3 = null;
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContent(content1, produces2, produces3, components0);
      int int0 = 2924;
      int int1 = (-240);
      Class<io.swagger.oas.models.parameters.RequestBody> class0 = io.swagger.oas.models.parameters.RequestBody.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      Link link1 = null;
      Optional<io.swagger.oas.models.links.Link> optional4 = OperationParser.getLink(link1);
      Parameter[] parameterArray0 = new Parameter[13];
      io.swagger.oas.annotations.media.ArraySchema arraySchema1 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[8];
      contentArray0[0] = content1;
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      Content content0 = null;
      String string0 = "1uwoWxHNe";
      String string1 = "o7.lV$%.+0lUn|T";
      Link[] linkArray0 = new Link[6];
      String string2 = null;
      String string3 = "write a boolean value";
      String string4 = "UNWRAP_ROOT_VALUE";
      String string5 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string1, string1, string1, string2).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string3, string3, string3, string4, string5).when(link0).operationId();
      doReturn(string0, string0, string4, string2, string3).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      String string6 = "Unexpected IOException (of type %s): %s";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string1, string0, string0).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string1, string0, string6, string0, string6).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components0);
      Content content1 = null;
      Produces produces2 = null;
      Produces produces3 = null;
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContent(content1, produces2, produces3, components0);
      int int0 = 2924;
      int int1 = (-240);
      Class<io.swagger.oas.models.parameters.RequestBody> class0 = io.swagger.oas.models.parameters.RequestBody.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Class<ArraySchema> class1 = ArraySchema.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      Link link1 = null;
      Optional<io.swagger.oas.models.links.Link> optional4 = OperationParser.getLink(link1);
      Parameter[] parameterArray0 = new Parameter[13];
      io.swagger.oas.annotations.media.ArraySchema arraySchema1 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[8];
      contentArray0[0] = content1;
  }
}
