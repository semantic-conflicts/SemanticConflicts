/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 09:34:26 GMT 2020
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.Parameter;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.Link;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.ArraySchema;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.parameters.RequestBody;
import io.swagger.oas.annotations.responses.ApiResponse;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.OAuthFlows;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "a2`B";
      String string1 = "java.lang";
      String string2 = "t!3";
      String string3 = "._yr9RU!ouBed#";
      String string4 = "kWv.'MteH=_";
      String string5 = null;
      String string6 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string1, string0, string1).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string0, string2, string1, string3, string4).when(link0).operationId();
      doReturn(string0, string5, string6, string2, string5).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Link[] linkArray0 = new Link[8];
      linkArray0[0] = link0;
      linkArray0[1] = link0;
      linkArray0[2] = link0;
      linkArray0[3] = link0;
      linkArray0[4] = link0;
      linkArray0[5] = link0;
      linkArray0[6] = link0;
      linkArray0[7] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      int int0 = 1;
      int int1 = (-3192);
      int int2 = (-4589);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      stringArray0[3] = string4;
      stringArray0[4] = string2;
      stringArray0[5] = string2;
      String string7 = "java.langjava.lang.String";
      String string8 = "java.langio.swagger.oas.models.responses.ApiResponses";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int3 = (-1026);
      int int4 = 8;
      String string9 = "io.swagge";
      String string10 = "$PEQVN\\h|O";
      boolean boolean2 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean0, false).when(schema1).deprecated();
      doReturn(stringArray0[4], (String) null).when(schema1).description();
      doReturn(string7, string8, (String) null, (String) null).when(schema1).example();
      doReturn(boolean0, false).when(schema1).exclusiveMaximum();
      doReturn(boolean1).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema1).externalDocs();
      doReturn(string3, (String) null).when(schema1).format();
      doReturn(int3).when(schema1).maxLength();
      doReturn(string0).when(schema1).maximum();
      doReturn(int4, 0).when(schema1).minProperties();
      doReturn(string9).when(schema1).minimum();
      doReturn(string10, (String) null).when(schema1).pattern();
      doReturn(boolean2, false).when(schema1).readOnly();
      doReturn(string2, (String) null).when(schema1).ref();
      doReturn(string3, (String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema1);
      boolean boolean3 = true;
      boolean boolean4 = true;
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      int int5 = (-732);
      String string11 = "p~~&";
      int int6 = (-69);
      String string12 = "com.fasterxml.jackson.databind.JsonNode";
      String string13 = "com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer";
      boolean boolean5 = true;
      String string14 = "hvu1,|!";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[2], (String) null).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean1).when(schema2).deprecated();
      doReturn(string3, (String) null).when(schema2).description();
      doReturn(stringArray0[3], stringArray0[1], (String) null, (String) null).when(schema2).example();
      doReturn(boolean3, false).when(schema2).exclusiveMaximum();
      doReturn(boolean4, false).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema2).externalDocs();
      doReturn(string3, (String) null).when(schema2).format();
      doReturn(int5).when(schema2).maxLength();
      doReturn(string11).when(schema2).maximum();
      doReturn(int6).when(schema2).minProperties();
      doReturn(string12).when(schema2).minimum();
      doReturn(string13, (String) null).when(schema2).pattern();
      doReturn(boolean5, false).when(schema2).readOnly();
      doReturn(string14, (String) null).when(schema2).ref();
      doReturn(string1, (String) null).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema2);
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = null;
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional4 = OperationParser.getParametersList(parameterArray0, components0);
      int int7 = (-517);
      int int8 = 56320;
      int int9 = (-4);
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema3).implementation();
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int7).when(arraySchema1).maxItems();
      doReturn(int8, int9).when(arraySchema1).minItems();
      doReturn(schema3, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean3, false).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional5 = OperationParser.getArraySchema(arraySchema1);
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string14, (String) null).when(requestBody0).description();
      doReturn(boolean5, false).when(requestBody0).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional6 = OperationParser.getRequestBody(requestBody0, components0);
      String string15 = "1evk|hRL3(";
      ExternalDocumentation externalDocumentation2 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string15, (String) null).when(externalDocumentation2).description();
      doReturn(stringArray0[0], (String) null).when(externalDocumentation2).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional7 = OperationParser.getExternalDocumentation(externalDocumentation2);
      OperationParser operationParser0 = new OperationParser();
      LinkParameters linkParameters0 = null;
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      Server[] serverArray0 = new Server[3];
      String string16 = "";
      String string17 = "java.lang";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string16, string17, string15).when(server0).description();
      doReturn(string6, stringArray0[5], string6).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Components components0 = new Components();
      Map<String, Header> map0 = components0.getHeaders();
      Components components1 = components0.headers(map0);
      Components components2 = components1.headers(map0);
      Map<String, Example> map1 = components1.getExamples();
      MediaType mediaType1 = mediaType0.examples(map1);
      String string0 = components0.toString();
      String string1 = mediaType1.toString();
      String string2 = "J`ruZK|j.ldp";
      String string3 = "Longest collision chain in symbol table (of size ";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(exampleObject0).externalValue();
      doReturn(string2, string2, string2, string3).when(exampleObject0).name();
      doReturn(string0, (String) null).when(exampleObject0).summary();
      doReturn(string0, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
      String string4 = "[pattern=%s,shape=%s,locale=%s,timezone=%s]";
      String string5 = "io.swagger.jaxrs2.OperationParser";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string4).when(license0).name();
      doReturn(string2, string5).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3).when(link0).description();
      doReturn(string0, string1).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = string2;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      boolean boolean0 = true;
      String string6 = "zi";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = null;
      int int0 = (-998);
      String string7 = "UT`";
      String string8 = "w6o3.H";
      String string9 = "java.lang";
      boolean boolean2 = false;
      String string10 = "^";
      String string11 = "F~i4\"(_Jig\\";
      boolean boolean3 = true;
      String string12 = "javax.validation.constraints.NotNull";
      String string13 = "7xJv+?J?K<H}& d6Y6";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, stringArray0[3]).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean3).when(schema0).deprecated();
      doReturn(string6, string9).when(schema0).description();
      doReturn(string1, string2, string1, string12).when(schema0).example();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, string0).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string7).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string8).when(schema0).minimum();
      doReturn(string9, string3).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string10, string13).when(schema0).ref();
      doReturn(string11, string9).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      String string14 = ".!*YtEK]Qm";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      String string15 = "java.langio.swagger.oas.models.responses.ApiResponse";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string11, string14).when(info0).description();
      doReturn(license1).when(info0).license();
      doReturn(string6, string11).when(info0).termsOfService();
      doReturn(stringArray0[0], string15).when(info0).title();
      doReturn(stringArray0[1], string11).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional4 = OperationParser.getInfo(info0);
      String string16 = "java.lang";
      String string17 = "#/components/schemas/";
      String string18 = "#/components/schemas/";
      String string19 = "java.langjava.lang.String";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string16, string18).when(externalDocumentation1).description();
      doReturn(string17, string19).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional5 = OperationParser.getExternalDocumentation(externalDocumentation1);
      License license2 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[1], stringArray0[2]).when(license2).name();
      doReturn(stringArray0[2], string17).when(license2).url();
      Optional<io.swagger.oas.models.info.License> optional6 = OperationParser.getLicense(license2);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional7 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[7];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = null;
      boolean boolean1 = false;
      String string0 = "4Uu`uH0";
      Explode explode0 = Explode.FALSE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(boolean1).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string0, (String) null).when(parameter0).name();
      doReturn(boolean0, false).when(parameter0).required();
      doReturn(string0, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      Components components0 = new Components();
      String string1 = "";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string1, example0);
      String string2 = null;
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      String[] stringArray0 = new String[5];
      stringArray0[0] = string2;
      stringArray0[1] = string0;
      stringArray0[2] = string2;
      stringArray0[3] = string0;
      stringArray0[4] = string2;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      Components components2 = components1.addRequestBodies(string2, requestBody0);
      Map<String, io.swagger.oas.models.links.Link> map0 = null;
      String string3 = requestBody0.toString();
      Components components3 = components2.links(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      Components components4 = components3.addSchemas(string2, arraySchema1);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.4UU`UH0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "|C9l";
      String string1 = "*/*";
      String string2 = ">Qp5y[k";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string1, (String) null).when(link0).operationId();
      doReturn(string2).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Content[] contentArray0 = null;
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components0);
      String[] stringArray0 = new String[6];
      String string3 = "+dxYiL";
      stringArray0[0] = string3;
      String string4 = "#/components/schemas/";
      stringArray0[1] = string4;
      String string5 = "rU:";
      stringArray0[2] = string5;
      String string6 = "java.lang";
      stringArray0[3] = string6;
      String string7 = " (version: ";
      stringArray0[4] = string7;
      String string8 = "; expected Class<Converter>";
      stringArray0[5] = string8;
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray0);
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      String string9 = "yyyy-MM-dd";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.TRUE;
      String string10 = "LT,<,~B<$Y";
      boolean boolean1 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      String string11 = "";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(arraySchema0).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean0, false).when(parameter0).deprecated();
      doReturn(string9, (String) null).when(parameter0).description();
      doReturn(explode0, explode1, explode0).when(parameter0).explode();
      doReturn(string7, (String) null).when(parameter0).in();
      doReturn(string10, (String) null).when(parameter0).name();
      doReturn(boolean1).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string11).when(parameter0).style();
      Optional<io.swagger.oas.models.parameters.Parameter> optional4 = OperationParser.getParameter(parameter0, components0);
      Server[] serverArray0 = new Server[1];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional5 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Content[] contentArray0 = new Content[4];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[7];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Components components0 = new Components();
      String string0 = "class RequestBody {\n";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      Example example0 = new Example();
      Components components2 = components1.addExamples(string0, example0);
      String string1 = " #Gss~D~2L|_8&0E\"5";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      Callback callback0 = new Callback();
      Components components3 = components2.addCallbacks(string1, callback0);
      String string2 = "";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      io.swagger.oas.models.links.Link link1 = link0.$ref(string2);
      String string3 = ".U";
      Components components4 = components2.addCallbacks(string3, callback0);
      String string4 = "";
      io.swagger.oas.models.links.Link link2 = link1.operationRef(string4);
      Components components5 = components3.addLinks(string2, link2);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components5);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      ArraySchema arraySchema0 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components1 = components0.securitySchemes(hashMap0);
      String string0 = null;
      Example example0 = null;
      Components components2 = components1.addExamples(string0, example0);
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map0 = arraySchema1.getProperties();
      Components components3 = components2.schemas(map0);
      Map<String, Example> map1 = null;
      Map<String, io.swagger.oas.models.parameters.Parameter> map2 = null;
      components2.setParameters(map2);
      Components components4 = components3.examples(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema1).maxItems();
      doReturn(0, 0).when(arraySchema1).minItems();
      doReturn((Schema) null).when(arraySchema1).schema();
      doReturn(false).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema1);
      OperationParser operationParser0 = new OperationParser();
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional4 = OperationParser.getServer(server0);
      Contact contact1 = null;
      Optional<io.swagger.oas.models.info.Contact> optional5 = OperationParser.getContact(contact1);
      Contact contact2 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact2).email();
      doReturn((String) null).when(contact2).name();
      doReturn((String) null).when(contact2).url();
      Optional<io.swagger.oas.models.info.Contact> optional6 = OperationParser.getContact(contact2);
      Contact contact3 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact3).email();
      doReturn((String) null).when(contact3).name();
      doReturn((String) null).when(contact3).url();
      Optional<io.swagger.oas.models.info.Contact> optional7 = OperationParser.getContact(contact3);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional8 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional9 = OperationParser.getSchemaFromAnnotation(schema0);
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = null;
      Optional<io.swagger.oas.models.parameters.RequestBody> optional10 = OperationParser.getRequestBody(requestBody0, components0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional11 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Link[] linkArray0 = new Link[2];
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string1 = "<";
      String string2 = "java.lang";
      String string3 = "8J;Btb3wjw\\[0\\8oJ";
      String string4 = " tnwe,";
      String string5 = "aI\"Q,ZY";
      String string6 = "*/*";
      String string7 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string8 = "4I2-N4:ED~Z1%Y&V4";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameters0).expression();
      doReturn(string8, string2, (String) null, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string2, string3).when(link0).description();
      doReturn(string4, string5).when(link0).name();
      doReturn(string0, string1, string6, string7).when(link0).operationId();
      doReturn(string0, string2).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string9 = "";
      String string10 = "t>;$4{>>R~*%Nn";
      String string11 = ",";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string9).when(contact0).email();
      doReturn(string0, string11).when(contact0).name();
      doReturn(string10, string11).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string12 = "R{y6L";
      String string13 = "java.langio.swagger.oas.models.media.ArraySchema";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string13).when(externalDocumentation0).description();
      doReturn(string12, string4).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string14 = "io.swagger.oas.models.media.Schema";
      String string15 = "DATE";
      String string16 = "@;z*'q{Xo[jThEgZ-U";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string15).when(linkParameters1).expression();
      doReturn(string14, string16).when(linkParameters1).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
      Parameter[] parameterArray0 = new Parameter[2];
      boolean boolean0 = true;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Components components1 = components0.links(map0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components2 = components1.addResponses(string1, apiResponse0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map2 = components1.getParameters();
      Components components3 = components2.parameters(map2);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components4 = components3.callbacks(hashMap0);
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Link[] linkArray0 = new Link[6];
      String string0 = "Byte";
      String string1 = null;
      String string2 = "ti 4";
      String string3 = "java.langio.swagger.oas.models.tags.Tag";
      String string4 = null;
      String string5 = "iv2E7";
      String string6 = "Rlw<\\4nt";
      String string7 = "java.lang";
      String string8 = "java.langio.swagger.oas.models.media.MediaType";
      LinkParameters linkParameters0 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string2, string1, string2).when(link0).description();
      doReturn(string7, string8, string3, string0, string6).when(link0).name();
      doReturn(string2, string3, string0, string4, string3).when(link0).operationId();
      doReturn(string5, string4, string6, string2, string4).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      String string9 = "";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components1 = components0.addParameters(string9, parameter0);
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components2 = components1.addRequestBodies(string9, requestBody0);
      Map<String, Example> map1 = components2.getExamples();
      Components components3 = components2.examples(map1);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components4 = components3.addSchemas(string9, arraySchema0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      String string0 = "#/components/schemas/";
      String string1 = "Mcv`d^2";
      String string2 = "java.langio.swagger.oas.models.tags.Tag";
      String string3 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, operationParser0.COMMA).when(contact0).email();
      doReturn(string1, string3).when(contact0).name();
      doReturn(string2, operationParser0.COMMA).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      Server[] serverArray1 = new Server[5];
      String string4 = null;
      String string5 = "BL=pI4nmCUh$<9[F";
      String string6 = "6W^$x^RTsIP&,";
      ServerVariable[] serverVariableArray0 = new ServerVariable[1];
      String string7 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string8 = "eZ<s9n6 }\"\"I";
      String string9 = "%5zF7s6w[;GX\\Ys]";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string1, string7, string8, string5).when(serverVariable0).description();
      doReturn(string9, string0, string6, string4, string0).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      String string10 = "io.swagge";
      String string11 = "4/MPY-i}1sqWJIWO";
      String string12 = "q(c]";
      String string13 = "com.fasterxml.jackson.databind.ser.PropertyWriter";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string10, string6, string11, string5).when(server0).description();
      doReturn(string6, operationParser0.COMMA, string12, operationParser0.COMPONENTS_REF, string13).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0).when(server0).variables();
      serverArray1[0] = server0;
      serverArray1[1] = serverArray1[0];
      serverArray1[2] = serverArray1[1];
      serverArray1[3] = serverArray1[2];
      serverArray1[4] = serverArray1[3];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray1);
      Link[] linkArray0 = new Link[4];
      String string14 = "Yzz@@";
      String string15 = "WE-PO:A&0DJx";
      String string16 = "\\'{3ORx8";
      String string17 = "";
      String string18 = "&}A6`qvF:I<%#)o7";
      String string19 = "zQn92|C8FX";
      String string20 = "";
      String string21 = "FT!";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMMA, string0, string14, string15, string20).when(link0).description();
      doReturn(operationParser0.MEDIA_TYPE, string9, string16, string0).when(link0).name();
      doReturn(string5, string16, string17, string18, string21).when(link0).operationId();
      doReturn(string18, string19, string5, string15, string13).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(serverArray1[0]);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = new Components();
      String string0 = "dvaZ>";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components1 = components0.addSchemas(string0, arraySchema0);
      Map<String, Header> map0 = components0.getHeaders();
      Components components2 = components1.headers(map0);
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components3 = components2.requestBodies(hashMap0);
      Operation operation0 = new Operation();
      List<String> list0 = operation0.getTags();
      Operation operation1 = operation0.tags(list0);
      Map<String, Callback> map1 = operation1.getCallbacks();
      Components components4 = components3.callbacks(map1);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "Could not find creator property with name '%s' (known Creator properties: %s)";
      stringArray0[0] = string0;
      String string1 = "`";
      stringArray0[1] = string1;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = null;
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Link[] linkArray0 = new Link[3];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Content[] contentArray0 = null;
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components0);
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      OperationParser operationParser0 = new OperationParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = operationParser0.MEDIA_TYPE;
      stringArray0[1] = operationParser0.COMMA;
      stringArray0[2] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[3] = operationParser0.COMMA;
      Parameter[] parameterArray0 = new Parameter[5];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      Components components0 = new Components();
      Header header0 = new Header();
      Components components1 = components0.addHeaders(stringArray0[0], header0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, io.swagger.oas.models.links.Link> map0 = apiResponse0.getLinks();
      Components components2 = components1.links(map0);
      Map<String, Callback> map1 = components1.getCallbacks();
      Components components3 = components2.callbacks(map1);
      String string0 = "com.fasterxml.jackson.databind.type.TypeParser";
      Callback callback0 = new Callback();
      Components components4 = components3.addCallbacks(string0, callback0);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Content[] contentArray0 = null;
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components0);
      String[] stringArray0 = new String[6];
      String string0 = "+dxYiL";
      stringArray0[0] = string0;
      String string1 = "#/components/schemas/";
      stringArray0[1] = string1;
      String string2 = "rU:";
      stringArray0[2] = string2;
      String string3 = "java.lang";
      stringArray0[3] = string3;
      String string4 = " (version: ";
      stringArray0[4] = string4;
      String string5 = "; expected Class<Converter>";
      stringArray0[5] = string5;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Components components0 = new Components();
      String string0 = "class RequestBody {\n";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      Example example0 = new Example();
      Components components2 = components1.addExamples(string0, example0);
      String string1 = " #Gss~D~2L|z_8&0E\"5";
      Callback callback0 = new Callback();
      Components components3 = components2.addCallbacks(string1, callback0);
      String string2 = "";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      io.swagger.oas.models.links.Link link1 = link0.$ref(string2);
      String string3 = "";
      io.swagger.oas.models.links.Link link2 = link1.operationRef(string3);
      Components components4 = components3.addLinks(string2, link2);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      Server[] serverArray0 = new Server[4];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.type.ClassKey";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string0, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType0, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Schema<ApiResponses> schema0 = null;
      MediaType mediaType1 = mediaType0.schema(schema0);
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(server0);
      Parameter parameter0 = null;
      Components components0 = new Components();
      String string0 = " (one known property: \"";
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      Components components1 = components0.addLinks(string0, link1);
      Operation operation0 = new Operation();
      Map<String, Callback> map0 = operation0.getCallbacks();
      Components components2 = components1.callbacks(map0);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map1 = mediaType0.getExamples();
      Components components3 = components2.examples(map1);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map2 = components2.getResponses();
      Components components4 = components3.responses(map2);
      Optional<io.swagger.oas.models.parameters.Parameter> optional4 = OperationParser.getParameter(parameter0, components4);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      Components components0 = new Components();
      String string0 = null;
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components1 = components0.addSchemas(string0, arraySchema0);
      String string1 = "";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string1, securityScheme0);
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Components components3 = components2.links(map0);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components4 = components3.callbacks(hashMap0);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      OperationParser operationParser0 = new OperationParser();
      Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map0 = arraySchema1.getProperties();
      Components components1 = components0.schemas(map0);
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Boolean boolean0 = Boolean.TRUE;
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.required(boolean0);
      Components components2 = components1.addRequestBodies(operationParser0.DEFAULT_DESCRIPTION, requestBody1);
      io.swagger.oas.models.parameters.Parameter parameter0 = null;
      Components components3 = components2.addParameters(operationParser0.COMMA, parameter0);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components3);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = null;
      Components components1 = components0.securitySchemes(map0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces1, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "@";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string0, header0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components1.getParameters();
      Components components2 = components1.parameters(map0);
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.description(string0);
      Components components3 = components2.addRequestBodies(string0, requestBody1);
      Map<String, Example> map1 = components3.getExamples();
      Components components4 = components3.examples(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      ArraySchema arraySchema0 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray0);
      Server[] serverArray0 = new Server[6];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      Optional<List<io.swagger.oas.models.servers.Server>> optional4 = OperationParser.getServers(serverArray0);
      MediaType mediaType0 = new MediaType();
      String string0 = null;
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional5 = OperationParser.getMediaType(mediaType1, exampleObject0);
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, io.swagger.oas.models.links.Link> hashMap0 = new HashMap<String, io.swagger.oas.models.links.Link>();
      Components components1 = components0.links(hashMap0);
      String string0 = "M[^mJN+$Z-FNq#k";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components2 = components1.addParameters(string0, parameter0);
      String string1 = "no description";
      SecurityScheme securityScheme0 = new SecurityScheme();
      securityScheme0.setDescription(string1);
      Components components3 = components2.addSecuritySchemes(string1, securityScheme0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components3.getParameters();
      Components components4 = components3.parameters(map0);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
      Content[] contentArray0 = null;
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContents(contentArray0, components3);
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional4 = OperationParser.getRequestBody(requestBody0, components4);
      String[] stringArray0 = new String[8];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = string1;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string1;
      Optional<Set<Tag>> optional5 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      Link[] linkArray0 = new Link[2];
      String string0 = "IGNORE_DUPLICATE_MODULE_REGISTRATIONS";
      String string1 = "";
      String string2 = null;
      String string3 = "7:\"#jBE2?w0ER";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string1, string2, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string0, string3, string1, string2, (String) null).when(link0).operationId();
      doReturn(string0, string0, string0, string0, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = new Components();
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      Map<String, SecurityScheme> map1 = components0.getSecuritySchemes();
      Components components2 = components1.securitySchemes(map1);
      String string4 = "_";
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      Server[] serverArray1 = new Server[5];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray1[0] = server0;
      serverArray1[1] = serverArray1[0];
      serverArray1[2] = serverArray1[1];
      serverArray1[3] = serverArray1[2];
      serverArray1[4] = serverArray1[3];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray1);
      Link[] linkArray0 = new Link[4];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(serverArray1[0]);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      Link[] linkArray0 = new Link[8];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "n;AOw[`w";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      int int0 = 2662;
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>(int0);
      Components components2 = components1.securitySchemes(hashMap0);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map1 = mediaType0.getExamples();
      Components components3 = components2.examples(map1);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map2 = components3.getRequestBodies();
      Components components4 = components3.requestBodies(map2);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContent(content0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "~{tgRw\"&gtt1DE+";
      boolean boolean0 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "";
      io.swagger.oas.models.parameters.RequestBody requestBody1 = new io.swagger.oas.models.parameters.RequestBody();
      Components components1 = components0.addRequestBodies(string1, requestBody1);
      String string2 = "class ExternalDocumentation {\n";
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string2, header0);
      io.swagger.oas.models.media.Schema<Integer> schema0 = new io.swagger.oas.models.media.Schema<Integer>();
      Map<String, io.swagger.oas.models.media.Schema> map0 = schema0.getProperties();
      Components components3 = components2.schemas(map0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme securityScheme1 = securityScheme0.$ref(string2);
      OAuthFlows oAuthFlows0 = new OAuthFlows();
      SecurityScheme securityScheme2 = securityScheme1.flows(oAuthFlows0);
      Components components4 = components3.addSecuritySchemes(string1, securityScheme2);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "";
      String string1 = "Z`JI";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(server0).description();
      doReturn(string1, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(contact0).email();
      doReturn(string0).when(contact0).name();
      doReturn(string0).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string1 = "u,";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(link0).description();
      doReturn(string0).when(link0).operationId();
      doReturn(string1, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      boolean boolean2 = true;
      Explode explode0 = Explode.DEFAULT;
      String string2 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1).when(parameter0).allowReserved();
      doReturn(boolean2, false).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(string0).when(parameter0).in();
      doReturn(string2).when(parameter0).name();
      doReturn(boolean2, false).when(parameter0).required();
      doReturn(string1, (String) null).when(parameter0).style();
      Components components0 = new Components();
      String string3 = "$5";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string3, apiResponse0);
      Encoding encoding0 = new Encoding();
      Map<String, Header> map0 = encoding0.getHeaders();
      Components components2 = components1.headers(map0);
      String string4 = "k`pWj";
      SecurityScheme securityScheme0 = new SecurityScheme();
      String string5 = "#/components/schemas/";
      SecurityScheme securityScheme1 = securityScheme0.bearerFormat(string5);
      Components components3 = components2.addSecuritySchemes(string4, securityScheme1);
      Header header0 = new Header();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      Header header1 = header0.schema(arraySchema1);
      Header header2 = header1.example(string4);
      Components components4 = components3.addHeaders(string3, header2);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.U,
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "n";
      String string1 = "oLD(_/Aw";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string1, (String) null).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Content[] contentArray0 = null;
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components0);
      String[] stringArray0 = new String[6];
      String string2 = "+dxYiL";
      stringArray0[0] = string2;
      String string3 = "#/components/schemas/";
      stringArray0[1] = string3;
      String string4 = "rU:";
      stringArray0[2] = string4;
      String string5 = "java.lang";
      stringArray0[3] = string5;
      String string6 = " (version: ";
      stringArray0[4] = string6;
      String string7 = "; expected Class<Converter>";
      stringArray0[5] = string7;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
      Explode explode0 = Explode.TRUE;
      String string8 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string9 = "2#IY}bgEi{fwa";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(boolean1).when(parameter0).deprecated();
      doReturn(string5, (String) null).when(parameter0).description();
      doReturn(string8).when(parameter0).in();
      doReturn(string7, (String) null).when(parameter0).name();
      doReturn(boolean1).when(parameter0).required();
      doReturn(string9, (String) null).when(parameter0).style();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.2#IY}BGEI{FWA
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "S/VP6q+|{m";
      String string1 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string2 = "vAm|=`O,Iq9_.";
      String string3 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Info info1 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info1).contact();
      doReturn(string2, (String) null).when(info1).description();
      doReturn((License) null).when(info1).license();
      doReturn(string3, (String) null).when(info1).termsOfService();
      doReturn(string2, (String) null).when(info1).title();
      doReturn(string3, (String) null).when(info1).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info1);
      Server[] serverArray0 = new Server[5];
      String string4 = null;
      String string5 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string0).when(server0).description();
      doReturn(string1).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "G-KE\\|05";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      String string1 = "Bu7l,][s>0O";
      stringArray0[0] = string1;
      boolean boolean0 = false;
      String string2 = "";
      String string3 = "";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string4 = null;
      int int0 = (-262);
      String string5 = "-ltS?`9_";
      int int1 = 65535;
      boolean boolean2 = false;
      String string6 = "j[e\"[Z]+9(";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(stringArray0[0], (String) null).when(schema0).description();
      doReturn(string2, string3).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string4).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string5).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string3).when(schema0).minimum();
      doReturn(string2).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string6, (String) null).when(schema0).ref();
      doReturn(string4).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      int int2 = 2429;
      int int3 = 30;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean3 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int1, 0).when(arraySchema0).maxItems();
      doReturn(int2, int3).when(arraySchema0).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean3, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String string7 = "o:XI|10y\"#wQNCyE";
      String string8 = "b,4(ul#|";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string7, (String) null).when(link0).description();
      doReturn(string8, (String) null).when(link0).operationId();
      doReturn(stringArray0[0]).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
      OperationParser operationParser0 = new OperationParser();
      String string9 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "g1g?d~P5g,kK&Rr/?";
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      String string1 = "f}-'>QSrd'uSlvv?";
      String string2 = "enum";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string3 = "";
      int int0 = 1;
      String string4 = "*/*";
      int int1 = 3;
      String string5 = "Pw%s{x ";
      boolean boolean2 = false;
      String string6 = "?*yEIRhQ([t^06rM";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string0, (String) null).when(schema0).description();
      doReturn(string1, string2, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string3).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string4).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string0).when(schema0).minimum();
      doReturn(string5, (String) null).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string6, (String) null).when(schema0).ref();
      doReturn(string5, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      Content content0 = null;
      String string7 = null;
      String string8 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string9 = "";
      String string10 = "Kjc')g=&";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string7, string8, string0, string9, string10).when(apiResponse0).description();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string11 = "~u0#w5.X6eCns9$X+B";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components1 = components0.addRequestBodies(string11, requestBody0);
      Link[] linkArray0 = new Link[1];
      String string12 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string12).when(link0).operationId();
      doReturn(string5, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.links(map0);
      String string13 = "java.lang";
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      io.swagger.oas.models.links.Link link2 = link1.description(string13);
      Components components3 = components2.addLinks(string13, link2);
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.parameters.Parameter.StyleEnum parameter_StyleEnum0 = io.swagger.oas.models.parameters.Parameter.StyleEnum.SPACEDELIMITED;
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.style(parameter_StyleEnum0);
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact> schema1 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact>();
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.schema(schema1);
      Components components4 = components3.addParameters(string13, parameter2);
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "";
      String string1 = "M";
      String string2 = ")1|V4C9=iFdbd&V";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string2, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string3 = "09L6y!l'%'M$oG0]*`";
      String string4 = ">,dT?;i )\\G6C";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(externalDocumentation0).description();
      doReturn(string4, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string5 = null;
      boolean boolean0 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string5).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      String string6 = null;
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Info> schema0 = null;
      Components components1 = components0.addSchemas(string6, schema0);
      Map<String, Header> map0 = components1.getHeaders();
      Components components2 = components1.headers(map0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = null;
      Components components3 = components2.schemas(map1);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map2 = components0.getRequestBodies();
      Components components4 = components0.headers(map0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = ")c5%m*}oT)x1G`}";
      boolean boolean0 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = null;
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components0);
      String string1 = null;
      String string2 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(server0).description();
      doReturn(string2).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string3 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string2).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "u`w";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      OperationParser operationParser0 = new OperationParser();
      String string1 = "m7-m:BD}Ye^?j[aqA7";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string1, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[5];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      contentArray0[0] = content0;
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "A eI5:qozV*?<";
      String string1 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string1).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      MediaType mediaType0 = new MediaType();
      String string2 = "io.swagger.oas.models.media.Discriminator";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string2, example0);
      String string3 = "}/:tB@CLd(>Qh7cl[_n";
      MediaType mediaType2 = mediaType1.example(string3);
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      String string4 = "-cx^:i)pl<DI5-Z@k";
      Boolean boolean0 = new Boolean(string4);
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.allowEmptyValue(boolean0);
      Map<String, Example> map0 = parameter1.getExamples();
      MediaType mediaType3 = mediaType2.examples(map0);
      String string5 = "A&3El-l>b";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string5, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType3, exampleObject0);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, Example> map0 = components0.getExamples();
      Components components1 = components0.examples(map0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = components0.getParameters();
      components0.setParameters(map1);
      String string0 = "9AiD2LS5_)N+jYz";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Boolean boolean0 = Boolean.FALSE;
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.required(boolean0);
      components1.setParameters(map1);
      Components components2 = components1.addRequestBodies(string0, requestBody1);
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap0 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      components2.setResponses(hashMap0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map2 = components1.getRequestBodies();
      Components components3 = components2.requestBodies(map2);
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      String string1 = "";
      requestBody0.setDescription(string1);
      Components components4 = components2.securitySchemes(hashMap1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "E)_ZTr";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      boolean boolean0 = true;
      String string1 = "6^];";
      boolean boolean1 = false;
      boolean boolean2 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = Integer.MIN_VALUE;
      String string2 = "xLOee@Di%";
      String string3 = "Cxd\"8D34<2&s";
      String string4 = ":@tHlCq>3";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(stringArray0[0], stringArray0[5], (String) null, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[3], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string1).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(string3, (String) null).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string2, (String) null).when(schema0).ref();
      doReturn(string4, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      ExternalDocumentation externalDocumentation1 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation1);
      String string5 = "(C^/(q,";
      String string6 = "mOys0gn5v#AE{xadC\"";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(contact0).email();
      doReturn(string6, (String) null).when(contact0).name();
      doReturn(string2, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      Link[] linkArray0 = new Link[7];
      String string7 = "";
      String string8 = "$e>(~tp^:V";
      String string9 = "a%5GG-@CYAY$JmPt>I";
      String string10 = ";\\ve;5*ePjzy";
      String string11 = "[dQh1 &yEHal2x ";
      String string12 = "*/*";
      String string13 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map0 = new HashMap<String, io.swagger.oas.models.links.Link>();
      String string14 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string13).when(server0).description();
      doReturn(string14).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(server0);
      String string15 = "";
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string15).when(requestBody0).description();
      doReturn(boolean2).when(requestBody0).required();
      Components components0 = new Components();
      String string16 = "?*}VLN,ZY";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      String string17 = "{xlAir'9<LH>HE.\"";
      Header header0 = new Header();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.addHeaderObject(string17, header0);
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      String string18 = "@>lJK)o";
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Content content1 = content0.addMediaType(string18, mediaType0);
      io.swagger.oas.models.media.Content content2 = content1.addMediaType(string18, mediaType0);
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.content(content2);
      Components components1 = components0.addResponses(string16, apiResponse2);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional4 = OperationParser.getRequestBody(requestBody0, components1);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "Cjs(5h7Q'f =w^*";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string1 = "B2L$cSb";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string1, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      int int0 = (-2067);
      int int1 = 1497;
      int int2 = 8;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      OperationParser operationParser0 = new OperationParser();
      Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map0 = arraySchema1.getProperties();
      Components components1 = components0.schemas(map0);
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Boolean boolean1 = Boolean.TRUE;
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.required(boolean1);
      Components components2 = components1.addRequestBodies(operationParser0.DEFAULT_DESCRIPTION, requestBody1);
      io.swagger.oas.models.parameters.Parameter parameter0 = null;
      Components components3 = components2.addParameters(operationParser0.COMMA, parameter0);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components3);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      Link[] linkArray0 = new Link[3];
      String string0 = "DBUXC <|jkKJ";
      String string1 = "";
      String string2 = "O5~a6F_uf&l|H5Xe&g";
      String string3 = "";
      String string4 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string1, (String) null).when(link0).description();
      doReturn((String) null, (String) null).when(link0).name();
      doReturn(string2, string3, string4, (String) null).when(link0).operationId();
      doReturn(string0, string4, string0, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string5 = "com.fasterxml.jackson.databind.node.ObjectNode";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string1;
      String string6 = ") not suitable, must be java.lang.String";
      stringArray0[3] = string6;
      stringArray0[4] = string3;
      stringArray0[5] = string4;
      stringArray0[6] = string5;
      stringArray0[7] = string5;
      boolean boolean0 = true;
      String string7 = "CcxtCS7x\"C\"3Fx";
      String string8 = "";
      String string9 = "";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = null;
      int int0 = 8;
      int int1 = 1125;
      String string10 = "";
      String string11 = "\\;~OL/!):%sM}|U!SH5";
      boolean boolean2 = false;
      String string12 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string7, (String) null).when(schema0).description();
      doReturn(string8, string9).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string4).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string4).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string10).when(schema0).minimum();
      doReturn(string11, (String) null).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string5, (String) null).when(schema0).ref();
      doReturn(string12).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      Content[] contentArray0 = null;
      Components components0 = new Components();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map1 = arraySchema0.getProperties();
      Components components1 = components0.schemas(map1);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components2 = components1.responses(apiResponses0);
      String string13 = "oaZ:Sf\\";
      Example example0 = new Example();
      Components components3 = components2.addExamples(string13, example0);
      Map<String, SecurityScheme> map2 = null;
      Components components4 = components3.securitySchemes(map2);
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      boolean boolean0 = true;
      String string1 = "od,]EZ`s9O6Qic5eX";
      String string2 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 1815;
      String string3 = "4Hg3L}',aY<x!";
      String string4 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(stringArray0[4], string2).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[5]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string3).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(stringArray0[2]).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(stringArray0[2]).when(schema0).ref();
      doReturn(string4).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string5 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string5).when(server0).description();
      doReturn(string1, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Class<Tag> class0 = Tag.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      Components components1 = components0.parameters(hashMap0);
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      Components components2 = components1.securitySchemes(hashMap1);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components2.getSchemas();
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      io.swagger.oas.models.info.Contact contact0 = new io.swagger.oas.models.info.Contact();
      HashMap<String, Callback> hashMap2 = new HashMap<String, Callback>();
      Components components3 = components1.callbacks(hashMap2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "java.lang";
      String string1 = "not a valid Long value";
      String string2 = "java.langio.swagger.oas.models.tags.Tag";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string1, (String) null).when(link0).operationId();
      doReturn(string2).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Content[] contentArray0 = null;
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components0);
      String[] stringArray0 = new String[6];
      String string3 = "+dxYiL";
      stringArray0[0] = string3;
      String string4 = "#/components/schemas/";
      stringArray0[1] = string4;
      String string5 = "rU:";
      stringArray0[2] = string5;
      String string6 = "java.lang";
      stringArray0[3] = string6;
      String string7 = " (version: ";
      stringArray0[4] = string7;
      String string8 = "; expected Class<Converter>";
      stringArray0[5] = string8;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = true;
      String string9 = "q!@'V7+w5!}0D";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.FALSE;
      String string10 = "*:{;(dZy1I%2Y+";
      Schema schema0 = null;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string9, (String) null).when(parameter0).description();
      doReturn(string2, (String) null).when(parameter0).in();
      doReturn(string10, (String) null).when(parameter0).name();
      doReturn(boolean1, false).when(parameter0).required();
      doReturn(string9, (String) null).when(parameter0).style();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.Q!@'V7+W5!}0D
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "9";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      boolean boolean0 = true;
      String string1 = "hoi}";
      String string2 = "~YMD";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string3 = "Unexpected end-of-input";
      int int0 = 1959;
      int int1 = 110;
      String string4 = "java.langio.swagger.oas.models.tags.Tag";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(string2, string1, (String) null, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string3, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string2).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(stringArray0[1], (String) null).when(schema0).minimum();
      doReturn(string4, (String) null).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string1, (String) null).when(schema0).ref();
      doReturn(string2, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string5 = "Ho-m2m!s`)XxbC~y4L";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string5, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string6 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string6).when(contact0).email();
      doReturn(string3, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      String string7 = "_jk\\qu/BwT^47.=|3";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0], (String) null).when(externalDocumentation1).description();
      doReturn(string7, (String) null).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation1);
      String string8 = "Failed rehash(): old count=";
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string8, (String) null).when(requestBody0).description();
      doReturn(boolean1).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.links.Link> map1 = null;
      Components components1 = components0.links(map1);
      String string9 = "";
      io.swagger.oas.models.media.Schema<ApiResponses> schema1 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      Components components2 = components1.addSchemas(string9, schema1);
      Map<String, Example> map2 = null;
      Components components3 = components2.examples(map2);
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.headers(hashMap0);
      ApiResponses apiResponses2 = apiResponses1.addApiResponse(string9, apiResponse1);
      String string10 = "z]g#a\\f\")";
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse0.description(apiResponses2.DEFAULT);
      ApiResponses apiResponses3 = apiResponses2.addApiResponse(string10, apiResponse2);
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Content content1 = content0.addMediaType(apiResponses2.DEFAULT, mediaType0);
      String string11 = "nf#]6!s";
      io.swagger.oas.models.responses.ApiResponse apiResponse3 = apiResponses3.put(string11, apiResponse1);
      io.swagger.oas.models.responses.ApiResponse apiResponse4 = apiResponse2.content(content1);
      ApiResponses apiResponses4 = apiResponses3.addApiResponse(apiResponses0.DEFAULT, apiResponse4);
      Components components4 = components3.responses(apiResponses4);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional3 = OperationParser.getRequestBody(requestBody0, components4);
      Link[] linkArray0 = new Link[8];
      String string12 = "";
      String string13 = "";
      String string14 = "";
      String string15 = "G1";
      String string16 = "java.langio.swagger.oas.models.tags.Tag";
      String string17 = "q\"!^\\";
      String string18 = "Ak[";
      String string19 = "";
      String string20 = ".=\\'";
      String string21 = "SORT_PROPERTIES_ALPHABETICALLY";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string12, string13, string5, string14, string15).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string0, string8, string16, string17, apiResponses3.DEFAULT).when(link0).operationId();
      doReturn(string18, string19, string20, string21, string16).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, io.swagger.oas.models.links.Link> map3 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      LinkParameters linkParameters0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      LinkParameters linkParameters1 = null;
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
      String string0 = "deepObject";
      String string1 = "- edM?xw,RVSE";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      Parameter[] parameterArray0 = new Parameter[4];
      boolean boolean0 = true;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(arraySchema0).maxItems();
      doReturn(0, 0, 0, 0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null).when(arraySchema0).schema();
      doReturn(false, false, false, false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = new Content[0];
      boolean boolean2 = true;
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      boolean boolean3 = true;
      Schema schema0 = null;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false, false, false, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false, false, false, false).when(parameter0).allowReserved();
      doReturn(arraySchema0, (ArraySchema) null, (ArraySchema) null, (ArraySchema) null).when(parameter0).array();
      doReturn((Object) contentArray0, (Object) null, (Object) null, (Object) null).when(parameter0).content();
      doReturn(boolean2, false, false, false, false).when(parameter0).deprecated();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).description();
      doReturn(explode0, explode1, explode0, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn(string1, (String) null, (String) null, (String) null, (String) null).when(parameter0).in();
      doReturn(string1, (String) null, (String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(boolean3, false, false, false, false).when(parameter0).required();
      doReturn(schema0, schema0, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      Components components0 = new Components();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, io.swagger.oas.models.links.Link> map2 = apiResponse0.getLinks();
      Components components1 = components0.links(map2);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components2 = components1.callbacks(hashMap0);
      Map<String, SecurityScheme> map3 = components2.getSecuritySchemes();
      Components components3 = components1.securitySchemes(map3);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components2);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = ")c5%m*}oT)x1G`}";
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[4] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, string0).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "S/VP6q+|{m";
      String string1 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      String string2 = "K";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string2).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string0).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string3 = "vAm|=`O,Iq9_.";
      String string4 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      String string5 = "7wfm4;u4v15V";
      String string6 = "";
      Info info1 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact1).when(info1).contact();
      doReturn(string3, string4).when(info1).description();
      doReturn(license1).when(info1).license();
      doReturn(string4, string5).when(info1).termsOfService();
      doReturn(string3, string6).when(info1).title();
      doReturn(string4, string4).when(info1).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info1);
      Server[] serverArray0 = new Server[5];
      String string7 = null;
      String string8 = "";
      ServerVariable[] serverVariableArray0 = new ServerVariable[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string0, (String) null, (String) null, (String) null).when(server0).description();
      doReturn(string1, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "S/VP6q+|{m";
      String string1 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string2 = "java.lang";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string2).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string3 = "vAm|=`O,Iq9_.";
      String string4 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      String string5 = ">>I]oh%>D9UvdNv<n6g";
      Info info1 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact1).when(info1).contact();
      doReturn(string3, string2).when(info1).description();
      doReturn(license1).when(info1).license();
      doReturn(string4, string5).when(info1).termsOfService();
      doReturn(string3, string1).when(info1).title();
      doReturn(string4, string3).when(info1).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info1);
      Server[] serverArray0 = new Server[5];
      String string6 = null;
      String string7 = "";
      ServerVariable[] serverVariableArray0 = new ServerVariable[3];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string0, (String) null, (String) null, (String) null).when(server0).description();
      doReturn(string1, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      int int0 = 167;
      int int1 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      OperationParser operationParser0 = new OperationParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = operationParser0.MEDIA_TYPE;
      stringArray0[1] = operationParser0.COMMA;
      stringArray0[3] = operationParser0.COMMA;
      Parameter[] parameterArray0 = new Parameter[5];
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      boolean boolean1 = true;
      String string0 = "^/`W;me72J@)B:@xc[";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.TRUE;
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "S/VP6q+|{m";
      String string1 = "";
      String string2 = "io.swagger.jaxrs2.OperationParser";
      String string3 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(contact0).email();
      doReturn(string3).when(contact0).name();
      doReturn(string3).when(contact0).url();
      String string4 = "(wD@";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(license0).name();
      doReturn(string4, (String) null).when(license0).url();
      String string5 = "java.lang";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string5).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string6 = "vAm|=`O,Iq9_.";
      String string7 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string8 = "U'3Q";
      String string9 = "java.langio.swagger.oas.models.tags.Tag";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      String string10 = "io.swagger.jaxrs2.OperationParser";
      String string11 = "X\"Jy~";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      String string12 = "";
      Server[] serverArray0 = new Server[5];
      String string13 = null;
      String string14 = "";
      ServerVariable[] serverVariableArray0 = new ServerVariable[3];
      String string15 = "P81*8s%e(I6$";
      String string16 = null;
      String string17 = "Pq)b_8]*2f";
      String string18 = "DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string15, string1, string8, string7, string16).when(serverVariable0).description();
      doReturn(string17, string5, string18, string7, string17).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      String string19 = "8<]W<ld[8frs^=\\ffJ";
      String string20 = "";
      String string21 = "%l&b3H";
      String string22 = "b]";
      ServerVariable[] serverVariableArray1 = new ServerVariable[6];
      serverVariableArray1[0] = serverVariable0;
      serverVariableArray1[1] = serverVariable0;
      serverVariableArray1[2] = serverVariable0;
      serverVariableArray1[3] = serverVariable0;
      serverVariableArray1[4] = serverVariable0;
      serverVariableArray1[5] = serverVariable0;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string0, string19, string3, string20).when(server0).description();
      doReturn(string1, string21, string16, string22, string14).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "H:>^<5zM6B~$Y+U";
      String string1 = "#/components/schemas/";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(externalDocumentation0).description();
      doReturn(string0, string0).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String[] stringArray0 = new String[8];
      String string2 = ").3WaqO#ec<vYYNJ";
      stringArray0[0] = string2;
      String string3 = "{2IK&^9rOv'*Z*s3+a";
      stringArray0[1] = string3;
      String string4 = "";
      stringArray0[2] = string4;
      String string5 = "{Pp6`SVq~7-Q1R[,b";
      stringArray0[3] = string5;
      String string6 = "jY<TN]-O}o]$8]9";
      stringArray0[4] = string6;
      String string7 = "}LPUsU$t{'IJv<";
      stringArray0[5] = string7;
      String string8 = "Jh4mC KH";
      stringArray0[6] = string8;
      String string9 = "    head: ";
      stringArray0[7] = string9;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string10 = "";
      String string11 = "io.swagge";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string11).when(externalDocumentation1).description();
      doReturn(string10).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation1);
      String string12 = "k.<_A(Q]tpf";
      String string13 = "java.lang";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string12, string13).when(link0).description();
      doReturn(stringArray0[0], string13).when(link0).operationId();
      doReturn(string5).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional4 = OperationParser.getLicense(license0);
      String string14 = "st3DIExf";
      String string15 = "L]]z";
      String string16 = "max";
      ExternalDocumentation externalDocumentation2 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string15).when(externalDocumentation2).description();
      doReturn(string14, string16).when(externalDocumentation2).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional5 = OperationParser.getExternalDocumentation(externalDocumentation2);
      String string17 = "flows";
      boolean boolean0 = true;
      ExternalDocumentation externalDocumentation3 = null;
      int int0 = 6;
      String string18 = "k~u%K";
      String string19 = "";
      String string20 = "dZGzG7_',HzNk2tM}G";
      boolean boolean1 = true;
      String string21 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string17, string17).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string14, string17).when(schema0).description();
      doReturn(string8, stringArray0[6], string21).when(schema0).example();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation3).when(schema0).externalDocs();
      doReturn(string4).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, 0).when(schema0).maxProperties();
      doReturn(string18).when(schema0).maximum();
      doReturn(int0, int0).when(schema0).minProperties();
      doReturn(string19).when(schema0).minimum();
      doReturn(string6, stringArray0[5]).when(schema0).pattern();
      doReturn(boolean0, boolean1).when(schema0).readOnly();
      doReturn(string20, stringArray0[1]).when(schema0).ref();
      doReturn(string10).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional6 = OperationParser.getSchemaFromAnnotation(schema0);
      String string22 = "#/components/schemas/";
      String string23 = ".wE<NL,";
      String string24 = "5l#M6}o<+6|";
      ExternalDocumentation externalDocumentation4 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string22, string23).when(externalDocumentation4).description();
      doReturn(string17, string24).when(externalDocumentation4).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional7 = OperationParser.getExternalDocumentation(externalDocumentation4);
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = "9";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      boolean boolean0 = true;
      String string1 = "hoi}";
      String string2 = "~YMD";
      boolean boolean1 = false;
      String string3 = "\\_#eW>;=d";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      String string4 = "Unexpected end-of-input";
      int int0 = 1959;
      int int1 = 110;
      String string5 = "java.langio.swagger.oas.models.tags.Tag";
      String string6 = "K'6/M#QT";
      String string7 = "'): ";
      String string8 = "9X82aK@,ni*V";
      String string9 = "io.swagge";
      String string10 = "java.langio.swagger.oas.models.info.Contact";
      String string11 = "java.langio.swagger.oas.models.tags.Tag";
      String string12 = "[pattern=%s,shape=%s,locale=%s,timezone=%s]";
      String string13 = "cMpR8Z+TR@7p):";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string6).when(schema0)._default();
      doReturn(boolean0, boolean0).when(schema0).deprecated();
      doReturn(string1, string0).when(schema0).description();
      doReturn(string2, string1, string7, string8).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean1).when(schema0).exclusiveMinimum();
      doReturn(string4, string9).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, 0).when(schema0).maxProperties();
      doReturn(string2).when(schema0).maximum();
      doReturn(int1, int0).when(schema0).minProperties();
      doReturn(stringArray0[1], string10).when(schema0).minimum();
      doReturn(string5, string11).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string1, string12).when(schema0).ref();
      doReturn(string2, string13).when(schema0).type();
      // Undeclared exception!
      try { 
        OperationParser.getSchemaFromAnnotation(schema0);
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Components components0 = new Components();
      Map<String, Header> map0 = components0.getHeaders();
      Components components1 = components0.headers(map0);
      Components components2 = components1.headers(map0);
      Map<String, Example> map1 = components1.getExamples();
      MediaType mediaType1 = mediaType0.examples(map1);
      String string0 = components0.toString();
      String string1 = mediaType1.toString();
      String string2 = "J`ruZK|j.ldp";
      String string3 = "Gb";
      String string4 = "io.swagger.jaxrs2.OperationParser";
      String string5 = "io.swagge";
      String string6 = "java.lang";
      String string7 = "+ ?z)";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(exampleObject0).externalValue();
      doReturn(string2, string2, string4, string5).when(exampleObject0).name();
      doReturn(string6, (String) null).when(exampleObject0).summary();
      doReturn(string7, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3).when(license0).name();
      doReturn(string2, string5).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string2).when(link0).description();
      doReturn(string0, string1).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = string2;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      boolean boolean0 = true;
      String string8 = "zi";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = null;
      int int0 = (-998);
      String string9 = "UT`";
      String string10 = "w6o3.H";
      String string11 = "java.lang";
      boolean boolean2 = false;
      String string12 = "^";
      String string13 = "F~i4\"(_Jig\\";
      String string14 = "java.langio.swagger.oas.models.tags.Tag";
      String string15 = "path";
      String string16 = "java.langio.swagger.oas.models.tags.Tag";
      boolean boolean3 = true;
      String string17 = "";
      String string18 = "";
      String string19 = "java.lang";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string14).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean0).when(schema0).deprecated();
      doReturn(string8, string15).when(schema0).description();
      doReturn(string1, string2, string16, string2).when(schema0).example();
      doReturn(boolean0, boolean3).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, string17).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string9).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string10).when(schema0).minimum();
      doReturn(string11, string18).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string12, string19).when(schema0).ref();
      doReturn(string13, string15).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      String string20 = "o g%b_d|`Y?E 9*-";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      String string21 = "";
      String string22 = "io.swagge";
      String string23 = "#/components/schemas/";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string13, string20).when(info0).description();
      doReturn(license1).when(info0).license();
      doReturn(string8, string21).when(info0).termsOfService();
      doReturn(stringArray0[0], string22).when(info0).title();
      doReturn(stringArray0[1], string23).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional4 = OperationParser.getInfo(info0);
      String string24 = "java.lang";
      String string25 = "#/components/schemas/";
      String string26 = "7%";
      String string27 = null;
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string24, string26).when(externalDocumentation1).description();
      doReturn(string25, string27).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional5 = OperationParser.getExternalDocumentation(externalDocumentation1);
      String string28 = "@bI+=D{X*~mcm<?";
      License license2 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[1], string28).when(license2).name();
      doReturn(stringArray0[2], string2).when(license2).url();
      Optional<io.swagger.oas.models.info.License> optional6 = OperationParser.getLicense(license2);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional7 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = "H:>^<5zM6B~$Y+U";
      String string1 = "java.lang";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(externalDocumentation0).description();
      doReturn(string0, string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String[] stringArray0 = new String[8];
      String string2 = ").3WaqO#ec<vYYNJ";
      stringArray0[0] = string2;
      String string3 = "{2IK&^9rOv'*Z*s3+a";
      stringArray0[1] = string3;
      String string4 = "";
      stringArray0[2] = string4;
      String string5 = "{Pp6`SVq~7-Q1R[,b";
      stringArray0[3] = string5;
      String string6 = "jY<TN]-O}o]$8]9";
      stringArray0[4] = string6;
      String string7 = "}LPUsU$t{'IJv<";
      stringArray0[5] = string7;
      String string8 = "Jh4mC KH";
      stringArray0[6] = string8;
      String string9 = "    head: ";
      stringArray0[7] = string9;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string10 = "";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string10).when(externalDocumentation1).description();
      doReturn(string10).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation1);
      String string11 = "k.<_A(Q]tpf";
      String string12 = "io.swagger.jaxrs2.OperationParser";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(stringArray0[7], (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string11, string12).when(link0).description();
      doReturn(stringArray0[0], stringArray0[7]).when(link0).operationId();
      doReturn(string5).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional4 = OperationParser.getLicense(license0);
      String string13 = "st3DIExf";
      String string14 = ":xD6QA-`Q2Aa#?zA $";
      ExternalDocumentation externalDocumentation2 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string14).when(externalDocumentation2).description();
      doReturn(string13, string8).when(externalDocumentation2).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional5 = OperationParser.getExternalDocumentation(externalDocumentation2);
      String string15 = "flows";
      boolean boolean0 = true;
      ExternalDocumentation externalDocumentation3 = null;
      int int0 = 6;
      String string16 = "k~u%K";
      String string17 = "";
      String string18 = "dZGzG7_',HzNk2tM}G";
      String string19 = "";
      boolean boolean1 = false;
      int int1 = 9;
      int int2 = (-65);
      String string20 = "";
      boolean boolean2 = true;
      String string21 = ",Wa?LRCDtr[]>Z";
      int int3 = 0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string15, string10).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean0).when(schema0).deprecated();
      doReturn(string13, string19).when(schema0).description();
      doReturn(string8, stringArray0[6], string18, stringArray0[2]).when(schema0).example();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation3).when(schema0).externalDocs();
      doReturn(string4).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1, int3).when(schema0).maxProperties();
      doReturn(string16).when(schema0).maximum();
      doReturn(int0, int2).when(schema0).minProperties();
      doReturn(string17).when(schema0).minimum();
      doReturn(string6, string20).when(schema0).pattern();
      doReturn(boolean0, boolean2).when(schema0).readOnly();
      doReturn(string18, string21).when(schema0).ref();
      doReturn(string10).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional6 = OperationParser.getSchemaFromAnnotation(schema0);
      String string22 = "#/components/schemas/";
      ExternalDocumentation externalDocumentation4 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string22, string20).when(externalDocumentation4).description();
      doReturn(string15, stringArray0[6]).when(externalDocumentation4).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional7 = OperationParser.getExternalDocumentation(externalDocumentation4);
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      Link[] linkArray0 = new Link[6];
      String string0 = "Byte";
      String string1 = null;
      String string2 = "ti 4";
      String string3 = "java.langio.swagger.oas.models.tags.Tag";
      String string4 = null;
      String string5 = "iv2E7";
      String string6 = "Rlw<\\4nt";
      String string7 = "    post: ";
      String string8 = "UU}N!'O4t~nHm";
      String string9 = "lnNT@E";
      String string10 = "s 4";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string2, string1, string2).when(link0).description();
      doReturn(string7, string8, string9, string7, string10).when(link0).name();
      doReturn(string2, string3, string0, string4, string3).when(link0).operationId();
      doReturn(string5, string4, string6, string2, string4).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      String string11 = "";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components1 = components0.addParameters(string11, parameter0);
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema1);
      Components components2 = components1.addRequestBodies(string11, requestBody0);
      Map<String, Example> map1 = components2.getExamples();
      Components components3 = components2.examples(map1);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components4 = components3.addSchemas(string11, arraySchema0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      Class<io.swagger.oas.models.media.Content> class0 = io.swagger.oas.models.media.Content.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      String string0 = "";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = components0.getResponses();
      Components components2 = components1.responses(map0);
      Map<String, Object> map1 = null;
      components2.setExtensions(map1);
      String string1 = "*/YY1`Rg=e|?gN6t:X";
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.License> schema1 = null;
      Components components3 = components2.addSchemas(string1, schema1);
      String string2 = "M*rVq}";
      Header header0 = new Header();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = null;
      boolean boolean2 = false;
      boolean boolean3 = Boolean.logicalOr(boolean2, boolean2);
      Header header1 = header0.explode(boolean0);
      Header header2 = header1.schema(schema1);
      Components components4 = components3.addHeaders(string2, header2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      Link[] linkArray0 = new Link[6];
      String string0 = "Byte";
      String string1 = null;
      String string2 = "ti 4";
      String string3 = "java.langio.swagger.oas.models.tags.Tag";
      String string4 = null;
      String string5 = "iv2E7";
      String string6 = "Rlw<\\4nt";
      String string7 = "java.lang";
      String string8 = "java.langio.swagger.oas.models.media.MediaType";
      LinkParameters linkParameters0 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string9 = "";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string9).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = new Components();
      String string10 = "";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components1 = components0.addParameters(string10, parameter0);
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components2 = components1.addRequestBodies(string10, requestBody0);
      Map<String, Example> map0 = components2.getExamples();
      Components components3 = components2.examples(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components4 = components3.addSchemas(string10, arraySchema0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      Content[] contentArray0 = new Content[4];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      String string0 = "DeserializationProblemHandler.handleMissingInstantiator() for type %s returned value of type %s";
      String string1 = "v0EzuQ=t)R5e;n";
      String string2 = null;
      String string3 = "java.langjava.lang.Object";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string0, string1, string2, string3).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      ExampleObject[] exampleObjectArray1 = new ExampleObject[2];
      exampleObjectArray1[0] = exampleObject0;
      exampleObjectArray1[1] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray1, (Object) exampleObjectArray1).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Components components0 = new Components();
      String string4 = "class RequestBody {\n";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string4, apiResponse0);
      Example example0 = new Example();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components1.getSchemas();
      Components components2 = components1.schemas(map0);
      Components components3 = components1.addExamples(string4, example0);
      String string5 = " #Gss~D~2L|z_8&0E\"5";
      Callback callback0 = new Callback();
      Components components4 = components3.addCallbacks(string5, callback0);
      String string6 = "";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      io.swagger.oas.models.links.Link link1 = link0.$ref(string6);
      String string7 = null;
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = callback0.put(string7, pathItem0);
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      apiResponse0.setHeaders(hashMap0);
      String string8 = "";
      io.swagger.oas.models.links.Link link2 = link1.operationRef(string8);
      Components components5 = components4.addLinks(string6, link2);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components5);
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      Link[] linkArray0 = new Link[6];
      String string0 = "Byte";
      String string1 = null;
      String string2 = "ti 4";
      String string3 = "java.langio.swagger.oas.models.tags.Tag";
      String string4 = null;
      String string5 = "iv2E7";
      String string6 = "Rlw<\\4nt";
      String string7 = "java.lang";
      String string8 = "java.langio.swagger.oas.models.media.MediaType";
      LinkParameters linkParameters0 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string2, string1, string2).when(link0).description();
      doReturn(string7, string8, string3, string0, string6).when(link0).name();
      doReturn(string2, string3, string0, string4, string3).when(link0).operationId();
      doReturn(string5, string4, string6, string2, string4).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string9 = "pUu:r QVc";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string9, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string10 = "";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components1 = components0.addParameters(string10, parameter0);
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components2 = components1.addRequestBodies(string10, requestBody0);
      Map<String, Example> map1 = components2.getExamples();
      Components components3 = components2.examples(map1);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components4 = components3.addSchemas(string10, arraySchema0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "*";
      String string1 = "pO]s<I'";
      String string2 = null;
      String string3 = "9fFVwt&s7~!DRH@w";
      String string4 = "zI~$";
      String string5 = "/p+C";
      String string6 = null;
      String string7 = null;
      String string8 = "java.langio.swagger.oas.models.info.Contact";
      String string9 = "sZ?u]a";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string0, string1, string2).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string3, string4, string2, string5, string6).when(link0).operationId();
      doReturn(string7, string0, string8, string9, string5).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Link[] linkArray0 = new Link[8];
      linkArray0[0] = link0;
      linkArray0[1] = link0;
      linkArray0[2] = link0;
      linkArray0[3] = link0;
      linkArray0[4] = link0;
      linkArray0[5] = link0;
      linkArray0[6] = link0;
      linkArray0[7] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      int int0 = (-1);
      int int1 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = string5;
      String string10 = "";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int2 = 1128;
      String string11 = null;
      String string12 = "java.langio.swagger.oas.models.info.Contact";
      boolean boolean2 = true;
      String string13 = "io.swagge";
      String string14 = "r;";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean0).when(schema1).deprecated();
      doReturn(string3, (String) null).when(schema1).description();
      doReturn(string10, stringArray0[0], (String) null).when(schema1).example();
      doReturn(boolean1).when(schema1).exclusiveMaximum();
      doReturn(boolean1).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema1).externalDocs();
      doReturn(string2).when(schema1).format();
      doReturn(int2).when(schema1).maxLength();
      doReturn(0).when(schema1).maxProperties();
      doReturn(string9).when(schema1).maximum();
      doReturn(int0).when(schema1).minProperties();
      doReturn(string11).when(schema1).minimum();
      doReturn(string12, (String) null).when(schema1).pattern();
      doReturn(boolean2, false).when(schema1).readOnly();
      doReturn(string13, (String) null).when(schema1).ref();
      doReturn(string14, (String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema1);
      String string15 = "sw(=c?J|QB+#)";
      boolean boolean3 = true;
      String string16 = "java.langjava.lang.String";
      String string17 = "u0x@p@8z1W dj";
      boolean boolean4 = false;
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      String string18 = "";
      int int3 = 9;
      int int4 = 3373;
      String string19 = "J#SEehG";
      String string20 = "R>$j7T$B,(g";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string15, (String) null).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean3, false).when(schema2).deprecated();
      doReturn(string2).when(schema2).description();
      doReturn(string16, string17, (String) null, (String) null).when(schema2).example();
      doReturn(boolean1).when(schema2).exclusiveMaximum();
      doReturn(boolean4).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema2).externalDocs();
      doReturn(string18).when(schema2).format();
      doReturn(int3).when(schema2).maxLength();
      doReturn(0).when(schema2).maxProperties();
      doReturn(stringArray0[0]).when(schema2).maximum();
      doReturn(int4, 0).when(schema2).minProperties();
      doReturn(string16).when(schema2).minimum();
      doReturn(string19, (String) null).when(schema2).pattern();
      doReturn(boolean4).when(schema2).readOnly();
      doReturn(string4, (String) null).when(schema2).ref();
      doReturn(string20, (String) null).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema2);
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = null;
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional4 = OperationParser.getParametersList(parameterArray0, components0);
      int int5 = 240;
      int int6 = 1;
      int int7 = 35;
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema3).implementation();
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int5, 0).when(arraySchema1).maxItems();
      doReturn(int6, int7).when(arraySchema1).minItems();
      doReturn(schema3, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean1).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional5 = OperationParser.getArraySchema(arraySchema1);
      String string21 = "io.swagge";
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string21, (String) null).when(requestBody0).description();
      doReturn(boolean3, false).when(requestBody0).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional6 = OperationParser.getRequestBody(requestBody0, components0);
      ExternalDocumentation externalDocumentation2 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string17, (String) null).when(externalDocumentation2).description();
      doReturn(string15, (String) null).when(externalDocumentation2).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional7 = OperationParser.getExternalDocumentation(externalDocumentation2);
      OperationParser operationParser0 = new OperationParser();
      LinkParameters linkParameters0 = null;
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      Server[] serverArray0 = new Server[3];
      String string22 = null;
      String string23 = ".N.:C%3VkN-|i%,C'";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string8).when(server0).description();
      doReturn(string22).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "3%x3pN";
      String string1 = null;
      String string2 = "Invalid 'any-getter' annotation on method ";
      String string3 = "xRIgym*_YO_mi~L/+;";
      String string4 = "";
      String string5 = "Invalid delegate-creator definition for ";
      String string6 = "io.swagger.jaxrs2.OperationParser";
      String string7 = null;
      String string8 = "com.fasterxml.jackson.databind.deser.std.EnumDeserializer";
      String string9 = "java.langjava.lang.String";
      String string10 = "com.fasterxml.jackson.databind.ser.impl.StringArraySerializer";
      String string11 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters0).name();
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string0, string0, string0).when(link0).description();
      doReturn(string8, string9, string7, string10, string11).when(link0).name();
      doReturn(string1, string1, string2, string2, string3).when(link0).operationId();
      doReturn(string0, string4, string5, string6, string7).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters1, linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Link[] linkArray0 = new Link[8];
      linkArray0[0] = link0;
      linkArray0[1] = link0;
      linkArray0[2] = link0;
      linkArray0[3] = link0;
      linkArray0[4] = link0;
      linkArray0[5] = link0;
      linkArray0[6] = link0;
      linkArray0[7] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      int int0 = (-165);
      Class<io.swagger.oas.models.media.ArraySchema> class0 = io.swagger.oas.models.media.ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String string12 = "java.langio.swagger.oas.models.links.Link";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string5;
      stringArray0[1] = string6;
      stringArray0[2] = string12;
      boolean boolean1 = true;
      String string13 = ".WC";
      boolean boolean2 = false;
      boolean boolean3 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(externalDocumentation0).description();
      doReturn(string13, (String) null).when(externalDocumentation0).url();
      int int1 = (-1);
      String string14 = "84j`f#dxi";
      int int2 = (-3441);
      String string15 = "no description";
      String string16 = "j k7E#h$/%<DRQkRc";
      String string17 = "~['2neJ1(*Yn5pFKFF";
      String string18 = ",";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string12, string15).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean1, boolean1).when(schema2).deprecated();
      doReturn(string1).when(schema2).description();
      doReturn(string2, string13, string9, string16).when(schema2).example();
      doReturn(boolean2).when(schema2).exclusiveMaximum();
      doReturn(boolean3).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema2).externalDocs();
      doReturn(string6, string17).when(schema2).format();
      doReturn(int1).when(schema2).maxLength();
      doReturn(string14).when(schema2).maximum();
      doReturn(int2).when(schema2).minProperties();
      doReturn(string3).when(schema2).minimum();
      doReturn(string0, string18).when(schema2).pattern();
      doReturn(boolean3).when(schema2).readOnly();
      doReturn(string7).when(schema2).ref();
      doReturn(string14, string10).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema2);
      boolean boolean4 = true;
      String string19 = "3?HUbEq 4T<ZP{biT";
      String string20 = "";
      String string21 = "*/*";
      boolean boolean5 = false;
      boolean boolean6 = false;
      String string22 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string23 = "java.langjava.lang.String";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string22, (String) null).when(externalDocumentation1).description();
      doReturn(string23, (String) null).when(externalDocumentation1).url();
      String string24 = "";
      int int3 = 485;
      String string25 = "*/*";
      String string26 = "I9C";
      String string27 = "";
      boolean boolean7 = true;
      boolean boolean8 = false;
      String string28 = "Q\\";
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0], string5).when(schema3)._default();
      doReturn(stringArray0).when(schema3)._enum();
      doReturn(boolean4, false).when(schema3).deprecated();
      doReturn(string19, string21).when(schema3).description();
      doReturn(string20, string21, string3).when(schema3).example();
      doReturn(boolean5).when(schema3).exclusiveMaximum();
      doReturn(boolean6).when(schema3).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema3).externalDocs();
      doReturn(string24).when(schema3).format();
      doReturn(int3).when(schema3).maxLength();
      doReturn(int1).when(schema3).maxProperties();
      doReturn(string25).when(schema3).maximum();
      doReturn(int1).when(schema3).minProperties();
      doReturn(string26).when(schema3).minimum();
      doReturn(string27).when(schema3).pattern();
      doReturn(boolean7, boolean8).when(schema3).readOnly();
      doReturn(string26, string28).when(schema3).ref();
      doReturn(string4).when(schema3).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema3);
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = null;
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional4 = OperationParser.getParametersList(parameterArray0, components0);
      int int4 = (-442);
      int int5 = 1443;
      Class<io.swagger.oas.models.media.Content> class1 = io.swagger.oas.models.media.Content.class;
      Schema schema4 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema5 = null;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int4).when(arraySchema1).maxItems();
      doReturn(int0, int5).when(arraySchema1).minItems();
      doReturn(schema4, schema5).when(arraySchema1).schema();
      doReturn(boolean2).when(arraySchema1).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Content content0 = null;
      String string0 = "A'nkRhP";
      String string1 = "RwF6vAseM>oUyzvh";
      String string2 = "&2,7)";
      Link[] linkArray0 = new Link[8];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0).when(apiResponse0).content();
      doReturn(string0, string0, string1, string2).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string0, string2, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string3 = "~ZjXGm6%|r (p~U=2b";
      io.swagger.oas.models.links.Link link1 = null;
      Components components1 = components0.addLinks(string3, link1);
      Map<String, Example> map0 = components1.getExamples();
      Components components2 = components1.examples(map0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = components1.getParameters();
      components0.setExamples(map0);
      Components components3 = components2.parameters(map1);
      String string4 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      String string5 = "56k#";
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.$ref(string5);
      String string6 = "#/components/schemas/";
      io.swagger.oas.models.responses.ApiResponse apiResponse3 = apiResponse2.description(string6);
      Components components4 = components3.addResponses(string4, apiResponse3);
      String string7 = "java.lang";
      String string8 = "java.langio.swagger.oas.models.info.Contact";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Boolean boolean0 = Boolean.TRUE;
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.required(boolean0);
      boolean boolean1 = false;
      Boolean boolean2 = Boolean.valueOf(boolean1);
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.explode(boolean2);
      io.swagger.oas.models.parameters.Parameter parameter3 = parameter2.name(string8);
      String string9 = "No native support for writing embedded objects of type ";
      io.swagger.oas.models.parameters.Parameter parameter4 = parameter3.$ref(string9);
      Components components5 = components4.addParameters(string8, parameter4);
      Components components6 = components4.addResponses(string7, apiResponse1);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      String string10 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string11 = "6/.nnim+zRLVgN3";
      String string12 = "yd";
      String string13 = "\\(GMs`a[>;y2t5] r";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link2 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string8, string12).when(link2).description();
      doReturn(string10, string13).when(link2).operationId();
      doReturn(string11).when(link2).operationRef();
      doReturn(linkParameters0).when(link2).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link2);
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Link[] linkArray0 = new Link[1];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(linkArray0[0]);
      RequestBody requestBody0 = null;
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      Components components1 = components0.responses(apiResponses0);
      Map<String, io.swagger.oas.models.media.Schema> map2 = null;
      Components components2 = components1.schemas(map2);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional4 = OperationParser.getRequestBody(requestBody0, components2);
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }
}
