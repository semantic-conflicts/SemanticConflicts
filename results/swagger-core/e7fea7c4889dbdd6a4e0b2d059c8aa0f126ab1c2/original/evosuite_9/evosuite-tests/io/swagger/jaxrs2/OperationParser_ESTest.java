/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 10:20:15 GMT 2020
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.Link;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.ArraySchema;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.responses.ApiResponse;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.ExternalDocumentation;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.info.Info;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.parameters.Parameter;
import io.swagger.oas.models.parameters.RequestBody;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      ArraySchema arraySchema0 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Server[] serverArray0 = new Server[3];
      String string0 = "j";
      String string1 = "z8%Sd$";
      String string2 = ")#";
      String string3 = "    minItems: ";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server0).description();
      doReturn(string0, string2).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "io.swagger.jaxrs2.OperationParser";
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.name(string0);
      Map<String, Example> map0 = parameter1.getExamples();
      MediaType mediaType2 = mediaType1.examples(map0);
      String string1 = "";
      String string2 = null;
      String string3 = "tH$=GK%cB-";
      String string4 = "com.fasterxml.jackson.databind.ser.SerializerCache";
      String string5 = "! 7X<";
      String string6 = "u\"'YmJJ8\\+$N.";
      String string7 = "TEp?p";
      String string8 = "#/components/schemas/";
      String string9 = "qQBBrM)=^~E?";
      String string10 = "dR$bGN|2^O@G\"@>v";
      String string11 = "LJ}b{ph}n";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2, string3, string4, string5).when(exampleObject0).externalValue();
      doReturn(string0, string1, string0, string0, string4).when(exampleObject0).name();
      doReturn(string0, string6, string7, string3, string8).when(exampleObject0).summary();
      doReturn(string0, string8, string9, string10, string11).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[2];
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[3];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[3];
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObject0;
      exampleObjectArray0[2] = exampleObject0;
      String string12 = "";
      String string13 = "N\"{>";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn(string5, string12, string6, string13, string0).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      boolean boolean1 = false;
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.TRUE;
      Explode explode2 = Explode.FALSE;
      String string14 = "Mj#WBX`l%To,";
      String string15 = "";
      boolean boolean2 = true;
      Class<ExternalDocumentation> class0 = ExternalDocumentation.class;
      Class<io.swagger.oas.models.links.Link> class1 = io.swagger.oas.models.links.Link.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string16 = "9<o?b]l82&U:6.s6]a*";
      boolean boolean3 = false;
      boolean boolean4 = true;
      boolean boolean5 = true;
      String string17 = null;
      Explode explode3 = Explode.FALSE;
      String string18 = "date";
      String string19 = "m\\b/LP[]@w:>r";
      boolean boolean6 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      String string20 = "";
      io.swagger.oas.annotations.Parameter parameter2 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean4, false).when(parameter2).allowEmptyValue();
      doReturn(boolean0, boolean0).when(parameter2).allowReserved();
      doReturn((Object) contentArray0, (Object) contentArray0).when(parameter2).content();
      doReturn(boolean1, boolean5, false).when(parameter2).deprecated();
      doReturn(string0, string16, string16, string17).when(parameter2).description();
      doReturn(explode0, explode1, explode3, explode2, (Explode) null).when(parameter2).explode();
      doReturn(string14, string1, string18, (String) null).when(parameter2).in();
      doReturn(string15, string19, (String) null).when(parameter2).name();
      doReturn(boolean2, boolean3, boolean6, false).when(parameter2).required();
      doReturn(schema0, schema1).when(parameter2).schema();
      doReturn(string15, string20).when(parameter2).style();
      parameterArray0[0] = parameter2;
      parameterArray0[1] = parameterArray0[0];
      Components components0 = new Components();
      Optional<List<Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      int int0 = 49;
      Class<io.swagger.oas.models.servers.Server> class0 = io.swagger.oas.models.servers.Server.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Class<Info> class1 = Info.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      OperationParser operationParser0 = new OperationParser();
      Server[] serverArray0 = new Server[7];
      String string0 = null;
      String string1 = "";
      String string2 = null;
      String string3 = "";
      String string4 = "XG7w&|SZK&|0D}r";
      String string5 = "";
      ServerVariable[] serverVariableArray0 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string6 = "w?_Dh/j7LC";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      Produces produces0 = null;
      Components components0 = new Components();
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Map<String, Header> map0 = link0.getHeaders();
      Components components1 = components0.headers(map0);
      Link[] linkArray0 = new Link[4];
      String string7 = null;
      String string8 = null;
      String string9 = null;
      String string10 = ")gShBhVB";
      String string11 = "";
      String string12 = "k\"_M!w,}EVkHI\\5vk";
      String string13 = "q>yJj[~,hg`";
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string8, string9, operationParser0.COMPONENTS_REF, (String) null).when(link1).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link1).name();
      doReturn(string10, string4, string3, string11, (String) null).when(link1).operationId();
      doReturn(operationParser0.COMPONENTS_REF, string12, string12, string13, (String) null).when(link1).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link1).parameters();
      linkArray0[0] = link1;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.links(map1);
      Map<String, SecurityScheme> map2 = components2.getSecuritySchemes();
      Components components3 = components2.securitySchemes(map2);
      String string14 = null;
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "x6rSO4l!";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      boolean boolean0 = false;
      String string1 = ",";
      boolean boolean1 = true;
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = (-215);
      String string2 = "I%";
      boolean boolean2 = true;
      String string3 = "";
      String string4 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(stringArray0[3], stringArray0[2], (String) null, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[5], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(stringArray0[1]).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(stringArray0[0]).when(schema0).minimum();
      doReturn(string2, (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(string3).when(schema0).ref();
      doReturn(string4).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(license1).name();
      doReturn(stringArray0[4], (String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license1);
      OperationParser operationParser0 = new OperationParser();
      Schema schema1 = null;
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      int int0 = (-3509);
      int int1 = 3;
      Class<Encoding> class0 = Encoding.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String string0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      boolean boolean2 = true;
      String string1 = "J_(qX}";
      String string2 = "com.fasterxml.jackson.databind.util.RootNameLookup";
      boolean boolean3 = false;
      boolean boolean4 = true;
      String string3 = "";
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(externalDocumentation0).description();
      doReturn(string3).when(externalDocumentation0).url();
      String string4 = "";
      int int2 = 2643;
      String string5 = "org.apache.commons.collections.functors.InstantiateTransformer";
      String string6 = "";
      boolean boolean5 = true;
      String string7 = "vI[3)ymoQK|k4~LSQ%p";
      boolean boolean6 = false;
      String string8 = "io.swagger.jaxrs2.OperationParser";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean2, boolean0).when(schema2).deprecated();
      doReturn(string0).when(schema2).description();
      doReturn(string1, string2, stringArray0[0]).when(schema2).example();
      doReturn(boolean3).when(schema2).exclusiveMaximum();
      doReturn(boolean4, boolean2).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema2).externalDocs();
      doReturn(string4).when(schema2).format();
      doReturn(int2).when(schema2).maxLength();
      doReturn(int2, 0).when(schema2).maxProperties();
      doReturn(string5).when(schema2).maximum();
      doReturn(int2, int0).when(schema2).minProperties();
      doReturn(string4).when(schema2).minimum();
      doReturn(string6).when(schema2).pattern();
      doReturn(boolean5, boolean6).when(schema2).readOnly();
      doReturn(string5, string8).when(schema2).ref();
      doReturn(string7, string4).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema2);
      String[] stringArray1 = new String[6];
      String string9 = "iC dNl:F";
      stringArray1[0] = string9;
      String string10 = "#/components/schemas/";
      stringArray1[1] = string10;
      String string11 = "USE_LONG_FOR_INTS";
      stringArray1[2] = string11;
      String string12 = "io.swagger.oas.models.parameters.RequestBody";
      stringArray1[3] = string12;
      String string13 = "d";
      stringArray1[4] = string13;
      String string14 = "";
      stringArray1[5] = string14;
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((io.swagger.oas.annotations.ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((io.swagger.oas.annotations.ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema1);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
      Link[] linkArray0 = new Link[8];
      linkArray0[0] = link0;
      linkArray0[1] = link0;
      linkArray0[2] = link0;
      linkArray0[3] = link0;
      linkArray0[4] = link0;
      linkArray0[5] = link0;
      linkArray0[6] = link0;
      linkArray0[7] = link0;
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "[bAt4H|2KDD";
      String string1 = "Fu>I";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      int int0 = (-3509);
      int int1 = (-1705);
      Class<OperationParser> class0 = OperationParser.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string2 = "ls RL#9%EH:BEV#";
      String string3 = "DefaultSerializerProvider sub-class not overriding copy()";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(linkParameters1).expression();
      doReturn(string2, string3).when(linkParameters1).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string4 = "5cx7BQp_TW\\Xd@*bNH\\";
      String string5 = "";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string2, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string2, string4).when(info0).termsOfService();
      doReturn(string0, string5).when(info0).title();
      doReturn(string2, string3).when(info0).version();
      Optional<Info> optional1 = OperationParser.getInfo(info0);
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[5];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      Map<String, RequestBody> map2 = components0.getRequestBodies();
      HashMap<String, RequestBody> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, RequestBody>(map2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "p~bVA,g_k)t[Y";
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      Optional<ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser operationParser0 = new OperationParser();
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(operationParser0.MEDIA_TYPE, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples(operationParser0.COMPONENTS_REF, example0);
      Map<String, Example> map1 = null;
      Link[] linkArray0 = new Link[7];
      String string1 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string2 = "Generator of type ";
      String string3 = null;
      String string4 = "*/*";
      String string5 = "~Bx";
      String string6 = "";
      String string7 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2, string3, string4, string3).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, operationParser0.DEFAULT_DESCRIPTION, string5, operationParser0.DEFAULT_DESCRIPTION, string4).when(link0).operationId();
      doReturn(string2, string6, string7, string1, string4).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.examples(map1);
      String string8 = "";
      Callback callback0 = new Callback();
      String string9 = "io.swagger.jaxrs2.OperationParser";
      PathItem pathItem0 = new PathItem();
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      PathItem pathItem1 = pathItem0.addServersItem(server0);
      Operation operation0 = new Operation();
      PathItem pathItem2 = pathItem1.patch(operation0);
      PathItem pathItem3 = pathItem2.summary(string9);
      PathItem pathItem4 = pathItem3.options(operation0);
      PathItem pathItem5 = callback0.put(string9, pathItem4);
      Components components3 = components2.addCallbacks(string8, callback0);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components3);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string9, (String) null).when(contact0).email();
      doReturn(operationParser0.COMMA, (String) null).when(contact0).name();
      doReturn(operationParser0.COMPONENTS_REF, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = new MediaType();
      String string0 = "Oghl_j-91O;:";
      Example example0 = new Example();
      String string1 = "Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s";
      Example example1 = example0.summary(string1);
      MediaType mediaType1 = mediaType0.addExamples(string0, example1);
      String string2 = "m3U\"Ul,H`0'35ZYb";
      example1.setSummary(string2);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
      int int0 = (-2379);
      int int1 = (-3657);
      int int2 = 1;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components1 = components0.securitySchemes(hashMap0);
      String string3 = ">";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = null;
      Components components2 = components1.addResponses(string3, apiResponse0);
      Header header0 = new Header();
      Header header1 = header0.addExamplesItem(example1);
      Components components3 = components2.addHeaders(operationParser0.DEFAULT_DESCRIPTION, header1);
      Map<String, Parameter> map0 = components0.getParameters();
      Components components4 = components3.parameters(map0);
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      int int0 = 2;
      int int1 = 47;
      Class<io.swagger.oas.models.info.Contact> class0 = io.swagger.oas.models.info.Contact.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      OperationParser operationParser0 = new OperationParser();
      Server[] serverArray0 = new Server[7];
      String string0 = ";9s+'bB_?Ai`";
      String string1 = "";
      String string2 = "io.swagger.jaxrs2.OperationParser";
      String string3 = "J";
      String string4 = null;
      ServerVariable[] serverVariableArray0 = new ServerVariable[4];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.MEDIA_TYPE, string0, (String) null, (String) null, (String) null).when(server0).description();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, operationParser0.MEDIA_TYPE, (String) null, (String) null, (String) null).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      int int2 = (-2109);
      int int3 = 1241;
      int int4 = 1424;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema2).implementation();
      boolean boolean2 = false;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int2).when(arraySchema1).maxItems();
      doReturn(int3, int4).when(arraySchema1).minItems();
      doReturn(schema2, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean2).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema1);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      io.swagger.oas.annotations.info.Info info0 = null;
      Optional<Info> optional3 = OperationParser.getInfo(info0);
      Server[] serverArray1 = new Server[3];
      String string5 = "Can not find a Value deserializer for abstract type %s";
      String string6 = "|#3/oz'#.rn e";
      String string7 = "YLuEmg";
      Server server1 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string3).when(server1).description();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, string7).when(server1).url();
      doReturn((ServerVariable[]) null).when(server1).variables();
      serverArray1[0] = server1;
      serverArray1[1] = serverArray1[0];
      serverArray1[2] = serverArray1[1];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      String string0 = "";
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components2 = components1.examples(map0);
      Map<String, RequestBody> map1 = components0.getRequestBodies();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>(map1);
      Components components3 = components2.requestBodies(hashMap0);
      io.swagger.oas.models.links.Link link0 = null;
      Components components4 = components3.addLinks(string0, link0);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components4);
      io.swagger.oas.annotations.parameters.RequestBody requestBody1 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody1).description();
      doReturn(false).when(requestBody1).required();
      String string1 = "";
      Callback callback0 = new Callback();
      String string2 = "(";
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string2, pathItem0);
      String string3 = "";
      Callback callback2 = callback1.addPathItem(string3, pathItem0);
      Components components5 = components4.addCallbacks(string1, callback2);
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody1, components5);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Components components0 = new Components();
      String string0 = "4";
      Parameter parameter1 = new Parameter();
      Components components1 = components0.addParameters(string0, parameter1);
      String string1 = "iz|z";
      String string2 = "wt9T{1c]v~fR,z!";
      io.swagger.oas.models.media.Schema<OperationParser> schema0 = new io.swagger.oas.models.media.Schema<OperationParser>();
      Encoding encoding0 = new Encoding();
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      Encoding encoding1 = encoding0.explode(boolean1);
      Map<String, Header> map0 = encoding1.getHeaders();
      io.swagger.oas.annotations.info.Info info0 = null;
      Optional<Info> optional0 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Components components0 = new Components();
      String string0 = "4";
      Parameter parameter1 = new Parameter();
      Components components1 = components0.addParameters(string0, parameter1);
      String string1 = "iz|z";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components2 = components1.addLinks(string1, link0);
      String string2 = "wt9T{1c]v~fR,z!";
      io.swagger.oas.models.media.Schema<OperationParser> schema0 = new io.swagger.oas.models.media.Schema<OperationParser>();
      Components components3 = components2.addSchemas(string2, schema0);
      Encoding encoding0 = new Encoding();
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      Encoding encoding1 = encoding0.explode(boolean1);
      Map<String, Header> map0 = encoding1.getHeaders();
      Components components4 = components3.headers(map0);
      Optional<Parameter> optional0 = OperationParser.getParameter(parameter0, components4);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[7];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact1);
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      String string0 = "c1jf%j?uK+7;sjG2#_";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      Example example0 = new Example();
      Components components2 = components1.addExamples(string0, example0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components3 = components2.examples(map0);
      Map<String, Parameter> map1 = components0.getParameters();
      Components components4 = components3.parameters(map1);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      Link[] linkArray0 = new Link[8];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Components components1 = components0.links(map0);
      String string0 = "";
      SecurityScheme securityScheme0 = null;
      Components components2 = components1.addSecuritySchemes(string0, securityScheme0);
      Operation operation0 = new Operation();
      Map<String, Callback> map1 = operation0.getCallbacks();
      Components components3 = components2.callbacks(map1);
      Map<String, SecurityScheme> map2 = components2.getSecuritySchemes();
      Components components4 = components3.securitySchemes(map2);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components1 = components0.schemas(map0);
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.links(map1);
      Map<String, Callback> map2 = components2.getCallbacks();
      Components components3 = components2.callbacks(map2);
      Parameter parameter1 = new Parameter();
      String string0 = "";
      Boolean boolean0 = new Boolean(string0);
      Parameter parameter2 = parameter1.allowReserved(boolean0);
      Map<String, Example> map3 = parameter2.getExamples();
      Components components4 = components3.examples(map3);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "FAIL_ON_NUMBERS_FOR_ENUMS";
      Encoding encoding0 = null;
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((io.swagger.oas.annotations.ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components1 = components0.securitySchemes(map0);
      String string0 = "MobX(/<x'qRq";
      io.swagger.oas.models.media.Schema<String> schema1 = new io.swagger.oas.models.media.Schema<String>();
      Components components2 = components1.addSchemas(string0, schema1);
      String string1 = null;
      Callback callback0 = null;
      Components components3 = components2.addCallbacks(string1, callback0);
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components4 = components3.headers(hashMap0);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "eCy";
      stringArray0[0] = string0;
      String string1 = "}uoL>)Ead2PeyYRat";
      stringArray0[1] = string1;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      OperationParser operationParser0 = new OperationParser();
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Server[] serverArray0 = new Server[1];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = null;
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      io.swagger.oas.annotations.info.Info info0 = null;
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[9];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      parameterArray0[8] = parameterArray0[7];
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components1 = components0.securitySchemes(map0);
      String string0 = "v%o@DBaCA*xL";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components2 = components1.addLinks(string0, link0);
      Map<String, Callback> map1 = null;
      Components components3 = components2.callbacks(map1);
      String string1 = "ORDER_MAP_ENTRIES_BY_KEYS";
      Header header0 = new Header();
      String string2 = "java.lang";
      Header header1 = header0.example(string2);
      Boolean boolean0 = Boolean.valueOf(string1);
      Header header2 = header1.deprecated(boolean0);
      Components components4 = components3.addHeaders(string1, header2);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "#'El";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      String string1 = "~XM)\\mS#5k%L}ph";
      io.swagger.oas.models.links.Link link1 = link0.operationRef(string1);
      Components components1 = components0.addLinks(string0, link1);
      Map<String, SecurityScheme> map0 = components1.getSecuritySchemes();
      Components components2 = components1.securitySchemes(map0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, RequestBody> map1 = components0.getRequestBodies();
      Components components1 = components0.requestBodies(map1);
      Map<String, Header> map2 = null;
      Components components2 = components0.headers(map2);
      Map<String, io.swagger.oas.models.media.Schema> map3 = components2.getSchemas();
      Components components3 = components1.schemas(map3);
      Map<String, SecurityScheme> map4 = components2.getSecuritySchemes();
      Components components4 = components3.securitySchemes(map4);
      String string0 = "(n}]y0f\"lpfEpF`Ut1";
      Parameter parameter0 = new Parameter();
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Parameter parameter1 = parameter0.examples(hashMap0);
      Parameter parameter2 = parameter1.description(string0);
      Components components5 = components4.addParameters(string0, parameter2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components1 = components0.parameters(hashMap0);
      String string0 = "com.fasterxml.jackson.databind.ser.std.NumberSerializers";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components2 = components1.addLinks(string0, link0);
      Header header0 = new Header();
      Header.StyleEnum header_StyleEnum0 = Header.StyleEnum.SIMPLE;
      Header header1 = header0.style(header_StyleEnum0);
      Components components3 = components2.addHeaders(string0, header1);
      String string1 = null;
      Example example0 = new Example();
      String string2 = "ORDER_MAP_ENTRIES_BY_KEYS";
      Example example1 = example0.summary(string2);
      Example example2 = example1.description(string0);
      Components components4 = components3.addExamples(string1, example2);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      Components components1 = components0.responses(apiResponses0);
      Map<String, Example> map0 = components1.getExamples();
      Components components2 = components1.examples(map0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Header> map1 = apiResponse0.getHeaders();
      Components components3 = components2.headers(map1);
      Example example0 = new Example();
      Example example1 = example0.description(apiResponses0.DEFAULT);
      Components components4 = components3.addExamples(apiResponses0.DEFAULT, example1);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      Server server1 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server1).description();
      doReturn((String) null).when(server1).url();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server1);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap0 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      Components components1 = components0.responses(hashMap0);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components2 = components1.schemas(map0);
      HashMap<String, Example> hashMap1 = new HashMap<String, Example>();
      String string0 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      boolean boolean0 = hashMap0.replace(string0, apiResponse0, apiResponse0);
      Components components3 = components1.examples(hashMap1);
      Map<String, Header> map1 = components0.getHeaders();
      boolean boolean1 = hashMap0.replace(string0, apiResponse0, apiResponse0);
      Components components4 = components3.headers(map1);
      Map<String, Parameter> map2 = components0.getParameters();
      Components components5 = components4.parameters(map2);
      Optional<io.swagger.oas.models.media.Content> optional4 = OperationParser.getContent(content0, produces0, produces1, components5);
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional5 = OperationParser.getTags(stringArray0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map3 = OperationParser.getLinkParameters(linkParameters0);
      OperationParser operationParser0 = new OperationParser();
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema1).maxItems();
      doReturn(0, 0).when(arraySchema1).minItems();
      doReturn((Schema) null).when(arraySchema1).schema();
      doReturn(false).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional6 = OperationParser.getArraySchema(arraySchema1);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      Content[] contentArray0 = null;
      Components components0 = new Components();
      Operation operation0 = new Operation();
      Map<String, Callback> map0 = operation0.getCallbacks();
      Components components1 = components0.callbacks(map0);
      Map<String, Parameter> map1 = null;
      Components components2 = components1.parameters(map1);
      Map<String, RequestBody> map2 = components1.getRequestBodies();
      Components components3 = components2.requestBodies(map2);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components4 = components3.responses(apiResponses0);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((io.swagger.oas.annotations.ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      String[] stringArray0 = new String[6];
      String string0 = "iC dNl:F";
      stringArray0[0] = string0;
      String string1 = "#/components/schemas/";
      stringArray0[1] = string1;
      String string2 = "USE_LONG_FOR_INTS";
      stringArray0[2] = string2;
      String string3 = "io.swagger.oas.models.parameters.RequestBody";
      stringArray0[3] = string3;
      String string4 = "d";
      stringArray0[4] = string4;
      String string5 = "";
      stringArray0[5] = string5;
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Components components0 = new Components();
      String string0 = "oJ\".k2";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = null;
      Components components1 = components0.addResponses(string0, apiResponse0);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components2 = components1.parameters(hashMap0);
      String string1 = "9yHc";
      Callback callback0 = new Callback();
      Components components3 = components2.addCallbacks(string1, callback0);
      String string2 = "*/*";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      io.swagger.oas.models.links.Link link1 = link0.operationId(string0);
      io.swagger.oas.models.links.Link link2 = link1.$ref(string2);
      Components components4 = components3.addLinks(string2, link2);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-1401);
      int int2 = 27;
      Schema schema0 = null;
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Link[] linkArray0 = new Link[8];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "spaceDelimited";
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      Optional<ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      int int0 = 1151;
      int int1 = 1;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      Content[] contentArray0 = new Content[4];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[4];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Components components0 = new Components();
      Map<String, Example> map0 = components0.getExamples();
      Components components1 = components0.examples(map0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      int int0 = 2985;
      int int1 = (-3083);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String string0 = null;
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      String string1 = "\"+],L9\"(.@*X+9>1.R";
      String string2 = "";
      boolean boolean1 = true;
      boolean boolean2 = true;
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string3 = "com.fasterxml.jackson.databind.DeserializationContext";
      int int2 = 914;
      String string4 = "Y^";
      String string5 = null;
      String string6 = "";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean0, false).when(schema1).deprecated();
      doReturn(string1, (String) null).when(schema1).description();
      doReturn(string2, stringArray0[1]).when(schema1).example();
      doReturn(boolean1, false).when(schema1).exclusiveMaximum();
      doReturn(boolean2, false).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema1).externalDocs();
      doReturn(string3, (String) null).when(schema1).format();
      doReturn(int2).when(schema1).maxLength();
      doReturn(0).when(schema1).maxProperties();
      doReturn(stringArray0[3]).when(schema1).maximum();
      doReturn(int2, 0).when(schema1).minProperties();
      doReturn(string4).when(schema1).minimum();
      doReturn(string5).when(schema1).pattern();
      doReturn(boolean0, false).when(schema1).readOnly();
      doReturn(string6).when(schema1).ref();
      doReturn(string2).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema1);
      String[] stringArray1 = new String[6];
      String string7 = "iC dNl:F";
      stringArray1[0] = string7;
      String string8 = "#/components/schemas/";
      stringArray1[1] = string8;
      String string9 = "USE_LONG_FOR_INTS";
      stringArray1[2] = string9;
      String string10 = "io.swagger.oas.models.parameters.RequestBody";
      stringArray1[3] = string10;
      String string11 = "d";
      stringArray1[4] = string11;
      String string12 = "";
      stringArray1[5] = string12;
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray1);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "`SjBM>uP)r^s9eQY";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      boolean boolean0 = false;
      String string1 = null;
      String string2 = "com.fasterxml.jackson.annotation.JsonInclude$Value";
      String string3 = "kF^R,Fr";
      boolean boolean1 = false;
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 663;
      String string4 = "";
      int int1 = 2;
      String string5 = "?<]xgq";
      String string6 = "W|\\r(";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string2, string3, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[1], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string4).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string0).when(schema0).minimum();
      doReturn(string5, (String) null).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string3, (String) null).when(schema0).ref();
      doReturn(string6, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string7 = "expected a digit for number exponent";
      Example example0 = new Example();
      String string8 = "Da U'<`s?uz]_lW|!8s";
      Example example1 = example0.summary(string8);
      io.swagger.oas.models.media.Schema<String> schema1 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "2JJ\\MZyANo_h1nEfYTC";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      boolean boolean0 = true;
      String string1 = "#/components/schemas/";
      String string2 = "u:7]H?";
      boolean boolean1 = true;
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      String string3 = "";
      int int0 = 1138;
      int int1 = 1097;
      String string4 = "qQ#OO3";
      String string5 = "";
      String string6 = "mq_";
      String string7 = "";
      String string8 = null;
      String string9 = "pvKtq(@o@O}lqX";
      String string10 = "SkRVH.F3&^Y^!7&";
      String string11 = "";
      String string12 = ">V&>i";
      String string13 = "@Y9ZXBIh*p>l?e/}";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string5).when(link0).description();
      doReturn(string9, string10).when(link0).operationId();
      doReturn(string12).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      String string14 = "TypeModifier %s (of type %s) return null for type %s";
      String string15 = null;
      String string16 = null;
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation1 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      String string17 = ") not suitable, must be java.lang.String";
      int int2 = 2657;
      int int3 = Integer.MAX_VALUE;
      String string18 = "lzTx'-=";
      String string19 = "Tm5NqITR 7E/,-t";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[2], (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string14, (String) null).when(schema0).description();
      doReturn(string15, string16).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema0).externalDocs();
      doReturn(string17, (String) null).when(schema0).format();
      doReturn(int2).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string13).when(schema0).maximum();
      doReturn(int3, 0).when(schema0).minProperties();
      doReturn(stringArray0[1]).when(schema0).minimum();
      doReturn(string18, (String) null).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(string19, (String) null).when(schema0).ref();
      doReturn(string18, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string20 = null;
      String string21 = " Z>$";
      String string22 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string23 = "kA\\{";
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = null;
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Header> map0 = apiResponse0.getHeaders();
      io.swagger.oas.models.links.Link link1 = link0.headers(map0);
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      io.swagger.oas.models.links.Link link2 = link1.server(server0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "*!Jc_%|%;*E[4E:yse";
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      Optional<ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser operationParser0 = new OperationParser();
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(operationParser0.MEDIA_TYPE, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples(operationParser0.COMPONENTS_REF, example0);
      Map<String, Example> map1 = null;
      Link[] linkArray0 = new Link[7];
      String string1 = "*/*";
      String string2 = "";
      String string3 = "";
      String string4 = "DefaultSerializerProvider sub-class not overriding copy()";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, operationParser0.COMMA, operationParser0.COMPONENTS_REF, operationParser0.DEFAULT_DESCRIPTION).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string1, operationParser0.COMMA, operationParser0.COMPONENTS_REF, operationParser0.MEDIA_TYPE, string2).when(link0).operationId();
      doReturn(string3, operationParser0.COMPONENTS_REF, string4, string1, operationParser0.COMMA).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.examples(map1);
      String string5 = "";
      Callback callback0 = new Callback();
      String string6 = "io.swagger.jaxrs2.OperationParser";
      PathItem pathItem0 = new PathItem();
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      PathItem pathItem1 = pathItem0.addServersItem(server0);
      Operation operation0 = new Operation();
      PathItem pathItem2 = pathItem1.patch(operation0);
      PathItem pathItem3 = pathItem2.summary(string6);
      PathItem pathItem4 = pathItem3.options(operation0);
      PathItem pathItem5 = callback0.put(string6, pathItem4);
      Components components3 = components2.addCallbacks(string5, callback0);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components3);
      String string7 = "no description";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(contact0).email();
      doReturn(string7, (String) null).when(contact0).name();
      doReturn(string7, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "kuo]bqT1#cn\"^WC";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string0, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "5#'-oUf;f%|k";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Schema<Object> schema0 = new io.swagger.oas.models.media.Schema<Object>();
      MediaType mediaType1 = mediaType0.schema(schema0);
      Map<String, Example> map0 = mediaType0.getExamples();
      MediaType mediaType2 = mediaType1.examples(map0);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType3 = mediaType2.encoding(hashMap0);
      String string1 = "com.fasterxml.jackson.databind.DatabindContext";
      MediaType mediaType4 = mediaType3.example(string1);
      String string2 = "b";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "";
      String string1 = "zMc";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map0 = mediaType0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      String string0 = null;
      MediaType mediaType2 = mediaType1.example(string0);
      Map<String, Encoding> map1 = mediaType0.getEncoding();
      MediaType mediaType3 = mediaType2.encoding(map1);
      String string1 = "";
      Example example0 = new Example();
      Example example1 = example0.$ref(string0);
      String string2 = "GD";
      Example example2 = example1.summary(string2);
      MediaType mediaType4 = mediaType3.addExamples(string1, example2);
      String string3 = "GINB:Wo[";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string3, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
      String string4 = "Z:5pB=pF=/^\"buS8";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(server0).description();
      doReturn(string1).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "yLi0Y?F";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components1 = components0.addSecuritySchemes(string1, securityScheme0);
      Header header0 = new Header();
      io.swagger.oas.models.media.Schema<Void> schema0 = new io.swagger.oas.models.media.Schema<Void>();
      int int0 = 378;
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>(int0);
      Map<String, SecurityScheme> map0 = null;
      components0.setSecuritySchemes(map0);
      Components components2 = components0.headers(hashMap0);
      Header header1 = header0.schema(schema0);
      Components components3 = components1.addHeaders(string1, header1);
      MediaType mediaType0 = new MediaType();
      String string2 = "BpHtB?%f.";
      Example example0 = new Example();
      String string3 = "";
      Example example1 = example0.description(string3);
      String string4 = "java.lang";
      Example example2 = example1.externalValue(string4);
      Header header2 = header0.addExamplesItem(example2);
      Example example3 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string2, example3);
      Map<String, Example> map1 = mediaType1.getExamples();
      Components components4 = components3.examples(map1);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType0, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "";
      String string1 = "u>4w2KV\"1";
      String string2 = "";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1, (String) null).when(info0).termsOfService();
      doReturn(string2).when(info0).title();
      doReturn(string2).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      String string3 = ":7; #Pd4B(yz(0$=T";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string3, example0);
      Link[] linkArray0 = new Link[3];
      String string4 = " MuaA[$RD~K<Uy";
      String string5 = ",R!w9p$5k'HsfgR!";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string3, string1, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null).when(link0).name();
      doReturn(string4, string5, string3, (String) null, (String) null).when(link0).operationId();
      doReturn(string3, string0, string1).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.links(map0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map1 = parameter0.getExamples();
      Components components3 = components2.examples(map1);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<String> schema0 = new io.swagger.oas.models.media.Schema<String>();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      Map<String, io.swagger.oas.models.media.Schema> map2 = arraySchema1.getProperties();
      Components components4 = components3.schemas(map2);
      Optional<List<Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string0 = "#/components/schemas/";
      String string1 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(operationParser0.COMMA, operationParser0.COMPONENTS_REF).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(operationParser0.MEDIA_TYPE, apiResponse1);
      Map<String, Parameter> map0 = components0.getParameters();
      Components components2 = components1.parameters(map0);
      Map<String, io.swagger.oas.models.links.Link> map1 = null;
      Components components3 = components2.links(map1);
      String string2 = "io.swagger.jaxrs2.OperationParser";
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.example(string2);
      io.swagger.oas.models.media.Schema<Tag> schema0 = new io.swagger.oas.models.media.Schema<Tag>();
      Parameter parameter2 = parameter1.schema(schema0);
      Components components4 = components3.addParameters(string2, parameter2);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      Link[] linkArray0 = new Link[1];
      String string0 = "";
      String string1 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(link0).description();
      doReturn(string0).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string2 = "4D>51xH%";
      String string3 = ">AeMa3RGzd";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(license0).name();
      doReturn(string3, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string4 = "`]n[1e`o)ln";
      RequestBody requestBody0 = null;
      Components components1 = components0.addRequestBodies(string4, requestBody0);
      String string5 = "";
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(string5, parameter0);
      Map<String, Header> map1 = null;
      Components components3 = components2.headers(map1);
      String string6 = "EN)X*?2^_kL(i~m0";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string4, pathItem0);
      Operation operation0 = null;
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      components2.setParameters(hashMap0);
      PathItem pathItem1 = pathItem0.options(operation0);
      Callback callback2 = callback1.addPathItem(string6, pathItem1);
      Components components4 = components3.addCallbacks(string6, callback2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      Content[] contentArray0 = new Content[5];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[4];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Components components0 = new Components();
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map0 = mediaType0.getExamples();
      Components components1 = components0.examples(map0);
      String string0 = "~I2.G-N:esN,;0)Sfj";
      Encoding encoding0 = new Encoding();
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      Encoding encoding1 = encoding0.allowReserved(boolean1);
      Encoding encoding2 = encoding1.explode(boolean1);
      Encoding encoding3 = encoding2.style(string0);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Map<String, Header> map1 = link0.getHeaders();
      Encoding encoding4 = encoding3.headers(map1);
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding4);
      String string1 = "";
      Example example0 = new Example();
      Components components2 = components1.addExamples(string1, example0);
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components3 = components2.headers(hashMap0);
      String string2 = "Mn5Bir/JENXN9B%*";
      Header header0 = new Header();
      Header header1 = header0.$ref(string2);
      String string3 = "[wth])'&,={/VA";
      Boolean boolean2 = Boolean.valueOf(string3);
      Header header2 = header1.required(boolean2);
      Components components4 = components3.addHeaders(string2, header2);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "Y3S$dkavSd;a";
      String string1 = "&N";
      String string2 = "";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string2).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.info.Info info1 = null;
      Optional<Info> optional1 = OperationParser.getInfo(info1);
      Optional<Info> optional2 = OperationParser.getInfo(info1);
      String string3 = "Property '";
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = null;
      int int0 = 914;
      int int1 = (-1560);
      String string4 = "";
      String string5 = "w?1vGdNm";
      String string6 = "WFFT8e";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string3, (String) null).when(schema0).description();
      doReturn(string2, string0, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string1, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string3).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string5, (String) null).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(string6, (String) null).when(schema0).ref();
      doReturn(string0, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      int int2 = 288;
      int int3 = 1135;
      int int4 = 3702;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int2, 0).when(arraySchema0).maxItems();
      doReturn(int3, int4).when(arraySchema0).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema0);
      String string7 = "QTk";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string7, (String) null).when(license0).name();
      doReturn(string6, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional5 = OperationParser.getLicense(license0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(license1).name();
      doReturn(string7, (String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional6 = OperationParser.getLicense(license1);
      OperationParser operationParser0 = new OperationParser();
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "; expected Class<KeyDeserializer>";
      String string1 = "H.{P";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string1, (String) null).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.info.Info info1 = null;
      Optional<Info> optional1 = OperationParser.getInfo(info1);
      Optional<Info> optional2 = OperationParser.getInfo(info1);
      String string2 = " }5";
      String[] stringArray0 = null;
      boolean boolean0 = true;
      String string3 = "L9NV'1bs9anHg";
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 0;
      int int1 = 128;
      String string4 = "UX:3etrqF80_VH\"C1w";
      String string5 = "s; q6S$/3HpFf%RG";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string3, (String) null).when(schema0).description();
      doReturn(string2, string1, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string2).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string0).when(schema0).minimum();
      doReturn(string4, (String) null).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(string5, (String) null).when(schema0).ref();
      doReturn(string4, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      int int2 = 2402;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int2, 0).when(arraySchema0).maxItems();
      doReturn(int2, int0).when(arraySchema0).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema0);
      String string6 = null;
      String string7 = "'yz]`?";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string6).when(license0).name();
      doReturn(string7, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional5 = OperationParser.getLicense(license0);
      String string8 = ",";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license1).name();
      doReturn(string8, (String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional6 = OperationParser.getLicense(license1);
      OperationParser operationParser0 = new OperationParser();
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components1 = components0.securitySchemes(hashMap0);
      RequestBody requestBody0 = new RequestBody();
      Components components2 = components1.addRequestBodies(operationParser0.DEFAULT_DESCRIPTION, requestBody0);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      int int0 = 2;
      int int1 = 47;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      OperationParser operationParser0 = new OperationParser();
      Server[] serverArray0 = new Server[7];
      String string0 = ";9s+'bB_?Ai`";
      String string1 = "";
      String string2 = "io.swagger.jaxrs2.OperationParser";
      String string3 = "J";
      String string4 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.MEDIA_TYPE, string0).when(server0).description();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, operationParser0.MEDIA_TYPE).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      Content content0 = null;
      String string0 = "_6wZ$|lVN";
      String string1 = "9kn^\\)Wsq`:a,TF5|";
      String string2 = null;
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, string0, string1, operationParser0.DEFAULT_DESCRIPTION, string2).when(apiResponse0).description();
      doReturn((Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(operationParser0.MEDIA_TYPE, apiResponse1);
      Map<String, Parameter> map0 = components0.getParameters();
      Components components2 = components1.parameters(map0);
      Map<String, io.swagger.oas.models.links.Link> map1 = null;
      Components components3 = components2.links(map1);
      String string3 = "io.swagger.jaxrs2.OperationParser";
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.example(string3);
      io.swagger.oas.models.media.Schema<Tag> schema0 = new io.swagger.oas.models.media.Schema<Tag>();
      Parameter parameter2 = parameter1.schema(schema0);
      Components components4 = components3.addParameters(string3, parameter2);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[6];
      boolean boolean0 = false;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = new Content[0];
      boolean boolean2 = false;
      String string0 = "";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.FALSE;
      String string1 = "AU:Eq`S<\"#1DukV";
      String string2 = "";
      boolean boolean3 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1).when(parameter0).allowReserved();
      doReturn(arraySchema0).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean2).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string1, (String) null).when(parameter0).in();
      doReturn(string2).when(parameter0).name();
      doReturn(boolean3).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string2).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      Components components0 = new Components();
      String string3 = null;
      io.swagger.oas.models.links.Link link0 = null;
      Components components1 = components0.addLinks(string3, link0);
      io.swagger.oas.models.media.Schema<Tag> schema1 = new io.swagger.oas.models.media.Schema<Tag>();
      String string4 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Header header0 = new Header();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.addHeaderObject(string4, header0);
      String string5 = null;
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.link(string5, link0);
      io.swagger.oas.models.responses.ApiResponse apiResponse3 = apiResponse2.description(string3);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema2)._default();
      doReturn((String[]) null).when(schema2)._enum();
      doReturn(false).when(schema2).deprecated();
      doReturn((String) null).when(schema2).description();
      doReturn((String) null, (String) null).when(schema2).example();
      doReturn(false).when(schema2).exclusiveMaximum();
      doReturn(false).when(schema2).exclusiveMinimum();
      doReturn((io.swagger.oas.annotations.ExternalDocumentation) null).when(schema2).externalDocs();
      doReturn((String) null).when(schema2).format();
      doReturn(0).when(schema2).maxLength();
      doReturn((String) null).when(schema2).maximum();
      doReturn(0).when(schema2).minProperties();
      doReturn((String) null).when(schema2).minimum();
      doReturn((String) null).when(schema2).pattern();
      doReturn(false).when(schema2).readOnly();
      doReturn((String) null).when(schema2).ref();
      doReturn((String) null).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema2);
      Optional<Parameter> optional2 = OperationParser.getParameter(parameterArray0[1], components0);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "*!Jc_%|%;*E[4E:yse";
      String string1 = "Vu[h$0dYm";
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string0, string1).when(externalDocumentation0).url();
      Optional<ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser operationParser0 = new OperationParser();
      String string2 = " (by deserializer of type ";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(linkParameters0).expression();
      doReturn(operationParser0.MEDIA_TYPE, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[5];
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      String string3 = "@V+i6XVON]";
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, string3).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples(operationParser0.COMPONENTS_REF, example0);
      Map<String, Example> map1 = null;
      Link[] linkArray0 = new Link[7];
      String string4 = "*/*";
      String string5 = "";
      String string6 = "";
      String string7 = "DefaultSerializerProvider sub-class not overriding copy()";
      String string8 = "7<nDA_*#mkg";
      String string9 = "0m.TYPzbs";
      String string10 = "*/*";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters1).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, operationParser0.COMMA, operationParser0.COMPONENTS_REF, operationParser0.DEFAULT_DESCRIPTION).when(link0).description();
      doReturn(string2, string8, string1, string9, string10).when(link0).name();
      doReturn(string4, operationParser0.COMMA, operationParser0.COMPONENTS_REF, operationParser0.MEDIA_TYPE, string5).when(link0).operationId();
      doReturn(string6, operationParser0.COMPONENTS_REF, string7, string4, operationParser0.COMMA).when(link0).operationRef();
      doReturn(linkParameters1, linkParameters1, linkParameters1, linkParameters1, linkParameters1).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.examples(map1);
      String string11 = "";
      Callback callback0 = new Callback();
      String string12 = "io.swagger.jaxrs2.OperationParser";
      PathItem pathItem0 = new PathItem();
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      PathItem pathItem1 = pathItem0.addServersItem(server0);
      Operation operation0 = new Operation();
      PathItem pathItem2 = pathItem1.patch(operation0);
      PathItem pathItem3 = pathItem2.summary(string12);
      PathItem pathItem4 = pathItem3.options(operation0);
      PathItem pathItem5 = callback0.put(string12, pathItem4);
      Components components3 = components2.addCallbacks(string11, callback0);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = new MediaType();
      String string0 = "Oghl_j-91O;:";
      Example example0 = new Example();
      String string1 = "Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s";
      Example example1 = example0.summary(string1);
      MediaType mediaType1 = mediaType0.addExamples(string0, example1);
      String string2 = "m3U\"Ul,H`0'35ZYb";
      example1.setSummary(string2);
      String string3 = "<3";
      String string4 = "";
      String string5 = "KI9";
      String string6 = "_\\Oj}\"5u94y";
      String string7 = "5";
      String string8 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(exampleObject0).externalValue();
      doReturn(string3, string5, string6, string5).when(exampleObject0).name();
      doReturn(string7, (String) null).when(exampleObject0).summary();
      doReturn(string8).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
      int int0 = (-1075);
      Class<io.swagger.oas.models.media.ArraySchema> class0 = io.swagger.oas.models.media.ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = null;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      int int0 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "Q7`SCVk{`e)&ZW:5r(";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      boolean boolean1 = false;
      String string1 = "e&>rXCOL<?&PF}o7X=";
      String string2 = "io.swagger.oas.models.info.Info";
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string3 = "Z*y0!u+n7P";
      int int1 = (-69);
      String string4 = "";
      int int2 = 149;
      String string5 = "adding ModelConverter: ";
      boolean boolean2 = true;
      String string6 = " $IM(Jq";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean1).when(schema1).deprecated();
      doReturn(string1, (String) null).when(schema1).description();
      doReturn(stringArray0[3], string2, (String) null, (String) null).when(schema1).example();
      doReturn(boolean1).when(schema1).exclusiveMaximum();
      doReturn(boolean0).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema1).externalDocs();
      doReturn(string3, (String) null).when(schema1).format();
      doReturn(int1).when(schema1).maxLength();
      doReturn(string4).when(schema1).maximum();
      doReturn(int2, 0).when(schema1).minProperties();
      doReturn(string5).when(schema1).minimum();
      doReturn(stringArray0[0], (String) null).when(schema1).pattern();
      doReturn(boolean2, false).when(schema1).readOnly();
      doReturn(string0, (String) null).when(schema1).ref();
      doReturn(string6, (String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema1);
      String[] stringArray1 = new String[6];
      String string7 = "iC dNl:F";
      stringArray1[0] = string7;
      String string8 = "#/components/schemas/";
      stringArray1[1] = string8;
      String string9 = "USE_LONG_FOR_INTS";
      stringArray1[2] = string9;
      String string10 = "io.swagger.oas.models.parameters.RequestBody";
      stringArray1[3] = string10;
      String string11 = "d";
      stringArray1[4] = string11;
      String string12 = "";
      stringArray1[5] = string12;
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray1);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      int int0 = 2985;
      int int1 = (-3083);
      Class<Parameter> class0 = Parameter.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String string0 = null;
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      String string1 = "\"+],L9\"(.@*X+9>1.R";
      String string2 = "";
      boolean boolean1 = true;
      boolean boolean2 = true;
      String string3 = "$5";
      String string4 = "#jrKWbMv2Ma";
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(externalDocumentation0).description();
      doReturn(string4, (String) null).when(externalDocumentation0).url();
      String string5 = "com.fasterxml.jackson.databind.DeserializationContext";
      int int2 = 914;
      String string6 = "Y^";
      String string7 = null;
      String string8 = "";
      boolean boolean3 = true;
      String string9 = "stfeoa {C";
      int int3 = 1506;
      int int4 = (-888);
      boolean boolean4 = false;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean0, boolean3).when(schema2).deprecated();
      doReturn(string1, string5).when(schema2).description();
      doReturn(string2, stringArray0[1]).when(schema2).example();
      doReturn(boolean1, boolean1).when(schema2).exclusiveMaximum();
      doReturn(boolean2, boolean0).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema2).externalDocs();
      doReturn(string5, string9).when(schema2).format();
      doReturn(int2).when(schema2).maxLength();
      doReturn(int3, 0).when(schema2).maxProperties();
      doReturn(stringArray0[3]).when(schema2).maximum();
      doReturn(int2, int4).when(schema2).minProperties();
      doReturn(string6).when(schema2).minimum();
      doReturn(string7).when(schema2).pattern();
      doReturn(boolean0, boolean4).when(schema2).readOnly();
      doReturn(string8).when(schema2).ref();
      doReturn(string2).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema2);
      String[] stringArray1 = new String[6];
      String string10 = "iC dNl:F";
      stringArray1[0] = string10;
      String string11 = "#/components/schemas/";
      stringArray1[1] = string11;
      String string12 = "USE_LONG_FOR_INTS";
      stringArray1[2] = string12;
      String string13 = "io.swagger.oas.models.parameters.RequestBody";
      stringArray1[3] = string13;
      String string14 = "d";
      stringArray1[4] = string14;
      String string15 = "";
      stringArray1[5] = string15;
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray1);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((io.swagger.oas.annotations.ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(class0).when(schema0).implementation();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0, (Schema) null).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      String string0 = "63VzjE?w`";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      int int0 = 4543;
      HashMap<String, io.swagger.oas.models.links.Link> hashMap0 = new HashMap<String, io.swagger.oas.models.links.Link>(int0, int0);
      Components components2 = components1.links(hashMap0);
      Parameter parameter0 = new Parameter();
      String string1 = "<'";
      Parameter parameter1 = parameter0.name(string1);
      String string2 = components0.toString();
      Components components3 = components2.addParameters(string0, parameter1);
      String string3 = "A3DJ0[>NX&UDs9";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      boolean boolean0 = link0.equals(components0);
      io.swagger.oas.models.links.Link link1 = link0.parameters(string1, string1);
      String string4 = "com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility";
      io.swagger.oas.models.links.Link link2 = link1.operationId(string4);
      Components components4 = components3.addLinks(string3, link2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = new MediaType();
      String string0 = "Oghl_j-91O;:";
      Example example0 = new Example();
      String string1 = "Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s";
      Example example1 = example0.summary(string1);
      MediaType mediaType1 = mediaType0.addExamples(string0, example1);
      String string2 = "m3U\"Ul,H`0'35ZYb";
      example1.setSummary(string2);
      String string3 = "G, L~gP|{&f8w\"~}[5]";
      String string4 = "";
      String string5 = "    content: ";
      String string6 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(exampleObject0).externalValue();
      doReturn(string2, string4, operationParser0.MEDIA_TYPE).when(exampleObject0).name();
      doReturn(string6).when(exampleObject0).summary();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
      int int0 = (-2379);
      int int1 = (-3657);
      int int2 = 1;
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = null;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      Content[] contentArray0 = new Content[5];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[15];
      String string0 = "^r^Z:L4mO{W*";
      String string1 = "H[eR(bihW!;'V*m";
      String string2 = "i-jxubCw B6V";
      String string3 = "cp0N)[>59+JU/";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string1, string2, string3, string2).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      ExampleObject[] exampleObjectArray1 = new ExampleObject[3];
      exampleObjectArray1[0] = exampleObject0;
      exampleObjectArray1[1] = exampleObject0;
      exampleObjectArray1[2] = exampleObjectArray1[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray1, (Object) exampleObjectArray0, (Object) exampleObjectArray1).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Components components0 = new Components();
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map0 = mediaType0.getExamples();
      Components components1 = components0.examples(map0);
      String string4 = "~I2.G-N:esN,;0)Sfj";
      Encoding encoding0 = new Encoding();
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      Encoding encoding1 = encoding0.allowReserved(boolean1);
      Encoding encoding2 = encoding1.explode(boolean1);
      Encoding encoding3 = encoding2.style(string4);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Map<String, Header> map1 = link0.getHeaders();
      Encoding encoding4 = encoding3.headers(map1);
      MediaType mediaType1 = mediaType0.addEncoding(string4, encoding4);
      String string5 = "";
      Example example0 = new Example();
      Components components2 = components1.addExamples(string5, example0);
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      String string6 = "Mn5Bir/JENXN9B%*";
      Header header0 = new Header();
      Header header1 = header0.$ref(string6);
      String string7 = "[wth])'&,={/VA";
      Boolean boolean2 = Boolean.valueOf(string7);
      Header header2 = header1.required(boolean2);
      Components components3 = components2.addHeaders(string6, header2);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components3);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string1 = "2";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = string0;
      stringArray0[5] = string1;
      boolean boolean0 = false;
      String string2 = "";
      String string3 = "1a*GO}?U";
      boolean boolean1 = true;
      boolean boolean2 = false;
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = (-1015);
      String string4 = "##v=hBm-";
      int int1 = (-270);
      boolean boolean3 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(string2, string3, (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string1, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string4).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(stringArray0[5], (String) null).when(schema0).minimum();
      doReturn(string3, (String) null).when(schema0).pattern();
      doReturn(boolean3).when(schema0).readOnly();
      doReturn(stringArray0[2], (String) null).when(schema0).ref();
      doReturn(string0).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0]).when(license1).name();
      doReturn(stringArray0[2], (String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license1);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map0 = mediaType0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      String string0 = null;
      MediaType mediaType2 = mediaType1.example(string0);
      Map<String, Encoding> map1 = mediaType0.getEncoding();
      MediaType mediaType3 = mediaType2.encoding(map1);
      String string1 = "";
      Example example0 = new Example();
      Example example1 = example0.$ref(string0);
      String string2 = "GD";
      Example example2 = example1.summary(string2);
      MediaType mediaType4 = mediaType3.addExamples(string1, example2);
      String string3 = "GINB:Wo[";
      String string4 = "xo'aAxq{e5P";
      String string5 = null;
      String string6 = "-XQvH8OV";
      String string7 = "g";
      String string8 = "ml\"8:jg4$2{[qy\\B";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(exampleObject0).externalValue();
      doReturn(string3, string5, string6).when(exampleObject0).name();
      doReturn(string7, (String) null).when(exampleObject0).summary();
      doReturn(string8, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
      String string9 = "Z:5pB=pF=/^\"buS8";
      ServerVariable[] serverVariableArray0 = new ServerVariable[7];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      serverVariableArray0[6] = serverVariableArray0[5];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string9, string9).when(server0).description();
      doReturn(string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string2, (String) null).when(linkParameters0).name();
      Map<String, String> map2 = OperationParser.getLinkParameters(linkParameters0);
      Link[] linkArray0 = new Link[16];
      String string10 = "";
      String string11 = null;
      String string12 = "= ";
      String string13 = "";
      String string14 = "!/I'";
      String string15 = "";
      String string16 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string10).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string0).when(link0).operationId();
      doReturn(string3, string14).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map3 = OperationParser.getLinks(linkArray0);
      int int0 = 96;
      int int1 = 42;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "io.swagger.jaxrs2.OperationParser";
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.name(string0);
      Map<String, Example> map0 = parameter1.getExamples();
      MediaType mediaType2 = mediaType1.examples(map0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[2];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      String string1 = "\\Ab}jQ-c*3";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.DEFAULT;
      String string2 = null;
      boolean boolean1 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.Parameter parameter2 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter2).allowEmptyValue();
      doReturn(boolean0, false).when(parameter2).allowReserved();
      doReturn(boolean0, false).when(parameter2).deprecated();
      doReturn(string1, (String) null).when(parameter2).description();
      doReturn(string1, (String) null).when(parameter2).in();
      doReturn(string2).when(parameter2).name();
      doReturn(boolean1, false).when(parameter2).required();
      doReturn(string0, (String) null).when(parameter2).style();
      parameterArray0[0] = parameter2;
      parameterArray0[1] = parameterArray0[0];
      Components components0 = new Components();
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.IO.SWAGGER.JAXRS2.OPERATIONPARSER
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "3";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String[] stringArray0 = new String[6];
      String string1 = "";
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      boolean boolean0 = true;
      String string2 = "v?O!!Q%=Dyw~o_";
      String string3 = "Cc";
      boolean boolean1 = false;
      boolean boolean2 = false;
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = null;
      int int0 = 1558;
      int int1 = (-2441);
      String string4 = "#/components/schemas/";
      String string5 = "com.fasterxml.jackson.databind.ser.BasicSerializerFactory";
      String string6 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string2, (String) null).when(schema0).description();
      doReturn(string3, stringArray0[1], (String) null, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[3], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(stringArray0[2], (String) null).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(stringArray0[1], (String) null).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string5, (String) null).when(schema0).ref();
      doReturn(string6).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string7 = "z7_~\\?1apzvzZ;R^";
      String string8 = "";
      String string9 = " of 4-char base64 unit: padding only legal as 3rd or 4th character";
      String string10 = "";
      String string11 = "O";
      String string12 = "io.swagger.jaxrs2.OperationParser";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[4], stringArray0[1]).when(link0).description();
      doReturn(string8).when(link0).operationId();
      doReturn(string10).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      String string13 = "t *v:58/o1;A\"'0],_";
      String[] stringArray1 = new String[2];
      stringArray1[0] = string0;
      String string14 = "h-Lz_u&+";
      stringArray1[1] = string14;
      boolean boolean3 = true;
      boolean boolean4 = true;
      String string15 = null;
      boolean boolean5 = true;
      String string16 = "";
      String string17 = "no description";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string13, (String) null).when(schema1)._default();
      doReturn(stringArray1).when(schema1)._enum();
      doReturn(boolean3, false).when(schema1).deprecated();
      doReturn(stringArray0[3], (String) null).when(schema1).description();
      doReturn(string9, stringArray0[0], (String) null).when(schema1).example();
      doReturn(boolean4, false).when(schema1).exclusiveMaximum();
      doReturn(boolean2).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema1).externalDocs();
      doReturn(string6).when(schema1).format();
      doReturn(int0).when(schema1).maxLength();
      doReturn(0).when(schema1).maxProperties();
      doReturn(string15).when(schema1).maximum();
      doReturn(int1).when(schema1).minProperties();
      doReturn(string9).when(schema1).minimum();
      doReturn(string4, (String) null).when(schema1).pattern();
      doReturn(boolean5, false).when(schema1).readOnly();
      doReturn(string16).when(schema1).ref();
      doReturn(string17, (String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema1);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string18 = "#/components/schemas/";
      String string19 = "";
      String string20 = "";
      String string21 = "6/ MbFM^V+[+1@p-9I\\";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string18, string19).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "3";
      String string1 = "e_<_-bj|'P";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String[] stringArray0 = new String[6];
      String string2 = "";
      stringArray0[0] = string2;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      boolean boolean0 = true;
      String string3 = "v?O!!Q%=Dyw~o_";
      String string4 = "Cc";
      boolean boolean1 = false;
      boolean boolean2 = false;
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = null;
      int int0 = 1558;
      int int1 = (-2441);
      String string5 = "#/components/schemas/";
      String string6 = "com.fasterxml.jackson.databind.ser.BasicSerializerFactory";
      String string7 = "";
      boolean boolean3 = false;
      String string8 = "    scopes: ";
      String string9 = null;
      int int2 = (-174);
      String string10 = "";
      String string11 = "i9L$!R(Do";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, stringArray0[5]).when(schema0)._default();
      doReturn(boolean0, boolean3).when(schema0).deprecated();
      doReturn(string3, string6).when(schema0).description();
      doReturn(string4, stringArray0[1], string6, string8).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean2).when(schema0).exclusiveMinimum();
      doReturn(stringArray0[3], string9).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2).when(schema0).maxProperties();
      doReturn(stringArray0[2], string10).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(stringArray0[1], string11).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string6, stringArray0[2]).when(schema0).ref();
      doReturn(string7).when(schema0).type();
      // Undeclared exception!
      try { 
        OperationParser.getSchemaFromAnnotation(schema0);
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "io.swagger.jaxrs2.OperationParser";
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.name(string0);
      Map<String, Example> map0 = parameter1.getExamples();
      MediaType mediaType2 = mediaType1.examples(map0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[2];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      String string1 = null;
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      String string2 = "mL6L+9 Ce{a2n8{nYe?";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      io.swagger.oas.annotations.Parameter parameter2 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter2).allowEmptyValue();
      doReturn(boolean0, false).when(parameter2).allowReserved();
      doReturn(contentArray0).when(parameter2).content();
      doReturn(boolean0, false).when(parameter2).deprecated();
      doReturn(string1).when(parameter2).description();
      doReturn(explode0, explode1, explode2).when(parameter2).explode();
      doReturn(string2, (String) null).when(parameter2).in();
      doReturn(string0, (String) null).when(parameter2).name();
      doReturn(boolean0, false).when(parameter2).required();
      doReturn(schema0).when(parameter2).schema();
      doReturn(string1).when(parameter2).style();
      parameterArray0[0] = parameter2;
      parameterArray0[1] = parameterArray0[0];
      Components components0 = new Components();
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "p~bVA,g_k)t[Y";
      String string1 = "";
      String string2 = "j0";
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(externalDocumentation0).description();
      doReturn(string0, string2).when(externalDocumentation0).url();
      Optional<ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser operationParser0 = new OperationParser();
      String string3 = "'8$oV:";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[9];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      exampleObjectArray0[7] = exampleObjectArray0[6];
      exampleObjectArray0[8] = exampleObjectArray0[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples(operationParser0.COMPONENTS_REF, example0);
      Map<String, Example> map1 = null;
      Link[] linkArray0 = new Link[7];
      String string4 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string5 = "Generator of type ";
      String string6 = null;
      String string7 = "*/*";
      String string8 = "~Bx";
      String string9 = "";
      String string10 = "";
      String string11 = "";
      String string12 = "";
      String string13 = "";
      String string14 = "?F.D}'";
      String string15 = "";
      String string16 = "Twksdd^NMqw%";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).expression();
      doReturn(string15, string1, string16, (String) null).when(linkParameters1).name();
      String string17 = "?[H'ow";
      LinkParameters linkParameters2 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(linkParameters2).expression();
      doReturn(string1, operationParser0.COMPONENTS_REF, string0, string17, (String) null).when(linkParameters2).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string5, string6, string7, string6).when(link0).description();
      doReturn(string10, string11, string12, string13, string14).when(link0).name();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, operationParser0.DEFAULT_DESCRIPTION, string8, operationParser0.DEFAULT_DESCRIPTION, string7).when(link0).operationId();
      doReturn(string5, string9, string10, string4, string7).when(link0).operationRef();
      doReturn(linkParameters1, linkParameters1, linkParameters2, linkParameters1, linkParameters2).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string1 = "io.swagger.jaxrs2.OperationParser";
      String string2 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2).when(license0).name();
      doReturn(string1, string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      boolean boolean0 = true;
      String string3 = "^hCJ";
      String string4 = "N]u>";
      boolean boolean1 = false;
      String string5 = "";
      io.swagger.oas.annotations.ExternalDocumentation externalDocumentation0 = mock(io.swagger.oas.annotations.ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0], (String) null).when(externalDocumentation0).description();
      doReturn(string5).when(externalDocumentation0).url();
      String string6 = "w+6n9`%GYOr\"";
      int int0 = (-800);
      String string7 = "#/components/schemas/";
      String string8 = "";
      boolean boolean2 = true;
      String string9 = "tRx!Y=}1.?t";
      String string10 = "7cMT~^XFU<1xaAAem4";
      String string11 = "7y)haNSR~A-lw{#l";
      boolean boolean3 = false;
      String string12 = ",lDp|^";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(stringArray0[2], string10).when(schema0).description();
      doReturn(string3, string4, string2).when(schema0).example();
      doReturn(boolean0, boolean3).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string6, string5).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string7).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string8).when(schema0).pattern();
      doReturn(boolean2, boolean1).when(schema0).readOnly();
      doReturn(string8).when(schema0).ref();
      doReturn(string9, string12).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      String string13 = "";
      String string14 = "Internal error: class %s not included as super-type for %s";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string13).when(license1).name();
      doReturn(stringArray0[0], string14).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license1);
      MediaType mediaType0 = null;
      String string15 = "no description";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string15, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "io.swagger.jaxrs2.OperationParser";
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.name(string0);
      Map<String, Example> map0 = parameter1.getExamples();
      MediaType mediaType2 = mediaType1.examples(map0);
      String string1 = "x5WId";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string1, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[2];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).maxItems();
      doReturn(0, 0, 0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null, (Schema) null).when(arraySchema0).schema();
      doReturn(false, false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = new Content[0];
      String string2 = null;
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.TRUE;
      String string3 = "SWr";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null, (Class) null).when(schema0).implementation();
      String string4 = "";
      io.swagger.oas.annotations.Parameter parameter2 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false, false, false).when(parameter2).allowEmptyValue();
      doReturn(boolean0, false, false, false).when(parameter2).allowReserved();
      doReturn(arraySchema0, (ArraySchema) null).when(parameter2).array();
      doReturn((Object) contentArray0, (Object) null).when(parameter2).content();
      doReturn(boolean0, false, false, false).when(parameter2).deprecated();
      doReturn(string2, (String) null).when(parameter2).description();
      doReturn(explode0, explode1, explode2, (Explode) null, (Explode) null).when(parameter2).explode();
      doReturn(string3, (String) null, (String) null, (String) null).when(parameter2).in();
      doReturn(string2, (String) null).when(parameter2).name();
      doReturn(boolean0, false, false, false).when(parameter2).required();
      doReturn(schema0, schema0).when(parameter2).schema();
      doReturn(string4, (String) null).when(parameter2).style();
      parameterArray0[0] = parameter2;
      parameterArray0[1] = parameterArray0[0];
      Components components0 = new Components();
      Optional<List<Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components0);
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      String string0 = "Pc%c S`X(@CC";
      String string1 = "";
      String string2 = "No ObjectCodec defined";
      ServerVariable[] serverVariableArray0 = new ServerVariable[2];
      String string3 = "NSLW6xx,7Y2%Hf";
      String string4 = ",";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string2, (String) null, (String) null).when(serverVariable0).description();
      doReturn(string3, string4).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(server0).description();
      doReturn(string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      Map<String, SecurityScheme> map0 = null;
      Components components2 = components1.securitySchemes(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map1 = arraySchema0.getProperties();
      components2.setSchemas(map1);
      Map<String, Example> map2 = components1.getExamples();
      Components components3 = components2.examples(map2);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map3 = components1.getResponses();
      Components components4 = components3.responses(map3);
      Optional<List<Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components4);
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      MediaType mediaType0 = new MediaType();
      Example example0 = new Example();
      Example example1 = example0.summary(string3);
      Example example2 = example1.$ref(string4);
      MediaType mediaType1 = mediaType0.addExamples(string3, example2);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType1, exampleObject0);
  }
}
