/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 09:56:51 GMT 2020
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.parameters.RequestBody;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.links.Link;
import io.swagger.oas.models.media.ArraySchema;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.parameters.Parameter;
import io.swagger.oas.models.responses.ApiResponse;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.OAuthFlows;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces1).value();
      Components components0 = new Components();
      Map<String, Link> map0 = null;
      Components components1 = components0.links(map0);
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      Components components2 = components1.responses(hashMap0);
      String string1 = "*G`}mNt3]n{";
      Header header0 = new Header();
      String string2 = null;
      Header header1 = header0.example(string2);
      Components components3 = components2.addHeaders(string1, header1);
      ArraySchema arraySchema0 = new ArraySchema();
      io.swagger.oas.models.media.Schema<Object> schema1 = null;
      ArraySchema arraySchema1 = arraySchema0.items(schema1);
      Header header2 = header0.schema(arraySchema1);
      String string3 = "${M04BUY[5~%z%:yiv";
      Callback callback0 = new Callback();
      Components components4 = components3.addCallbacks(string3, callback0);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces1, components4);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "io.swagge";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(license0).name();
      doReturn(string0, string0).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string1 = ")@";
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[6];
      String string2 = ";uq~w81n4rzE-W|y5";
      String string3 = "*/*";
      String string4 = "Can not override serializer";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string2, string3, string0, string4, string0).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      ExampleObject[] exampleObjectArray1 = new ExampleObject[6];
      exampleObjectArray1[0] = exampleObject0;
      exampleObjectArray1[1] = exampleObject0;
      exampleObjectArray1[2] = exampleObject0;
      exampleObjectArray1[3] = exampleObject0;
      exampleObjectArray1[4] = exampleObject0;
      exampleObjectArray1[5] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray1).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      String string5 = "}";
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string6 = "@";
      io.swagger.oas.models.media.Schema<Integer> schema0 = new io.swagger.oas.models.media.Schema<Integer>();
      Components components1 = components0.addSchemas(string6, schema0);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components2 = components1.responses(apiResponses0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map0 = components0.getRequestBodies();
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      components2.setParameters(hashMap0);
      Components components3 = components2.requestBodies(map0);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components3);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components0);
      String string0 = ";NQR7?0";
      boolean boolean0 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[5];
      String string1 = null;
      String string2 = "|_zP6g+B1c{g/C\"l=a{";
      String string3 = null;
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string1, string0, string2, string2, string3).when(apiResponse0).description();
      doReturn((io.swagger.oas.annotations.links.Link[]) null).when(apiResponse0).links();
      doReturn((String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components0);
      MediaType mediaType0 = new MediaType();
      Components components1 = new Components();
      Map<String, Example> map0 = components1.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      String string4 = "";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(string4, encoding0);
      String string5 = "";
      MediaType mediaType3 = mediaType2.example(string5);
      Map<String, Encoding> map1 = null;
      MediaType mediaType4 = mediaType3.encoding(map1);
      String string6 = "^5yD\"";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string6, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String string0 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(externalDocumentation0).description();
      doReturn(string0).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string1 = "X,";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string0).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(exampleObject0).name();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType0, exampleObject0);
      String[] stringArray0 = new String[1];
      String string2 = "";
      stringArray0[0] = string2;
      Optional<Set<Tag>> optional4 = OperationParser.getTags(stringArray0);
      String string3 = "n]orZ,";
      String string4 = "^0a~_";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0]).when(link0).description();
      doReturn(string3, (String) null).when(link0).operationId();
      doReturn(string4).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional5 = OperationParser.getLink(link0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[9];
      boolean boolean0 = false;
      boolean boolean1 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      String string5 = "b}}sFs/J'A\\[Av";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.FALSE;
      String string6 = "C}P<";
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string7 = "java.langio.swagger.oas.models.media.MediaType";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string5, (String) null).when(parameter0).description();
      doReturn(string5, (String) null).when(parameter0).in();
      doReturn(string6, (String) null).when(parameter0).name();
      doReturn(boolean2, false).when(parameter0).required();
      doReturn(string7, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      Components components0 = new Components();
      String string8 = "java.langio.swagger.oas.models.parameters.Parameter";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string8, callback0);
      String string9 = "#/components/schemas/";
      Link link1 = new Link();
      Components components2 = components1.addLinks(string9, link1);
      io.swagger.oas.models.media.Schema<Integer> schema2 = new io.swagger.oas.models.media.Schema<Integer>();
      Map<String, io.swagger.oas.models.media.Schema> map0 = schema2.getProperties();
      Components components3 = components2.schemas(map0);
      Operation operation0 = new Operation();
      Operation operation1 = operation0.operationId(string2);
      Map<String, Callback> map1 = operation1.getCallbacks();
      Components components4 = components3.callbacks(map1);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameterArray0[0], components4);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.JAVA.LANGIO.SWAGGER.OAS.MODELS.MEDIA.MEDIATYPE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType0, exampleObject0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String[] stringArray0 = new String[2];
      String string0 = "java.lang";
      stringArray0[0] = string0;
      String string1 = "#R$0gS!\".1aM#wA";
      stringArray0[1] = string1;
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional4 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional5 = OperationParser.getLink(link0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional6 = OperationParser.getLicense(license0);
      Optional<Set<Tag>> optional7 = OperationParser.getTags(stringArray0);
      Info info1 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info1).description();
      doReturn((String) null).when(info1).termsOfService();
      doReturn((String) null).when(info1).title();
      doReturn((String) null).when(info1).version();
      Optional<io.swagger.oas.models.info.Info> optional8 = OperationParser.getInfo(info1);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[5];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((io.swagger.oas.annotations.media.ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      Components components0 = new Components();
      String string2 = "";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string2, header0);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components2 = components1.schemas(map0);
      String string3 = "D%JX;\"r";
      Example example0 = new Example();
      String string4 = "'jDP!`;";
      Example example1 = example0.description(string4);
      Components components3 = components2.addExamples(string3, example1);
      Link link1 = new Link();
      ApiResponse apiResponse0 = new ApiResponse();
      Map<String, Header> map1 = apiResponse0.getHeaders();
      Link link2 = link1.headers(map1);
      Link link3 = link2.addHeaderObject(string2, header0);
      Components components4 = components3.addLinks(stringArray0[1], link3);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[1];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Optional<Link> optional1 = OperationParser.getLink(linkArray0[0]);
      Optional<Link> optional2 = OperationParser.getLink(linkArray0[0]);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.media.ArraySchema arraySchema1 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema1).maxItems();
      doReturn(0, 0).when(arraySchema1).minItems();
      doReturn((Schema) null).when(arraySchema1).schema();
      doReturn(false).when(arraySchema1).uniqueItems();
      Optional<ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema1);
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Components components0 = new Components();
      String string0 = "d3Ga1y<'Y";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components1 = components0.addSecuritySchemes(string0, securityScheme0);
      ApiResponse apiResponse0 = new ApiResponse();
      Map<String, Header> map1 = apiResponse0.getHeaders();
      Components components2 = components1.headers(map1);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components3 = components2.parameters(hashMap0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map2 = components3.getRequestBodies();
      Components components4 = components3.requestBodies(map2);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[1];
      String string0 = "%Y*@`Yc*wKH";
      String string1 = "java.langio.swagger.oas.models.media.MediaType";
      String string2 = "";
      String string3 = "java.langio.swagger.oas.models.info.Contact";
      String string4 = "#/components/schemas/";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string1, (String) null, (String) null).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string0, string1, string2, (String) null).when(link0).operationId();
      doReturn(string3, string4, string3, (String) null, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      int int0 = (-1085);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Optional<Link> optional1 = OperationParser.getLink(linkArray0[0]);
      Optional<Link> optional2 = OperationParser.getLink(linkArray0[0]);
      String[] stringArray0 = new String[4];
      stringArray0[0] = string1;
      stringArray0[1] = string2;
      stringArray0[2] = string3;
      stringArray0[3] = string4;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string5 = null;
      String string6 = "'Wwd:mF^Y_qJ $";
      int int1 = 801;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean0, false).when(schema1).deprecated();
      doReturn(stringArray0[1]).when(schema1).description();
      doReturn(stringArray0[1], string0, (String) null).when(schema1).example();
      doReturn(boolean0, false).when(schema1).exclusiveMaximum();
      doReturn(boolean0, false).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema1).externalDocs();
      doReturn(string5).when(schema1).format();
      doReturn(int0).when(schema1).maxLength();
      doReturn(string6).when(schema1).maximum();
      doReturn(int1, 0).when(schema1).minProperties();
      doReturn(stringArray0[0]).when(schema1).minimum();
      doReturn(string5).when(schema1).pattern();
      doReturn(boolean0, false).when(schema1).readOnly();
      doReturn(string5).when(schema1).ref();
      doReturn(string3, (String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema1);
      int int2 = 766;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema2).implementation();
      boolean boolean1 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema1 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema1).maxItems();
      doReturn(int0, int2).when(arraySchema1).minItems();
      doReturn(schema2, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean1, false).when(arraySchema1).uniqueItems();
      Optional<ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema1);
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((io.swagger.oas.annotations.media.ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      String string7 = null;
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses(string7, apiResponse0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = null;
      Components components2 = components1.requestBodies(map1);
      Link link1 = new Link();
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Link link2 = link1.requestBody(requestBody0);
      Components components3 = components2.addLinks(string1, link2);
      Encoding encoding0 = new Encoding();
      Boolean boolean2 = null;
      Encoding encoding1 = encoding0.allowReserved(boolean2);
      Map<String, Header> map2 = encoding1.getHeaders();
      Components components4 = components3.headers(map2);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "pq:D'@!~f1onEC-Z.";
      String string1 = "OIbE;";
      String string2 = "%FWO8,R";
      String string3 = "3YO.+#D";
      String string4 = "java.langio.swagger.oas.models.media.MediaType";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string3).when(contact0).email();
      doReturn(string1, string2).when(contact0).name();
      doReturn(string2, string4).when(contact0).url();
      License license0 = null;
      String string5 = "com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string1, string2).when(info0).termsOfService();
      doReturn(string1, string5).when(info0).title();
      doReturn(string2, string2).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[7];
      String string6 = "";
      String string7 = "";
      String string8 = "";
      String string9 = "1jM-d=3E-u8@";
      String string10 = "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase";
      String string11 = "com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer";
      String string12 = "Vk*a`pF20";
      String string13 = "";
      String string14 = "Zl)qqxBC~a*#&B<";
      String string15 = "";
      String string16 = null;
      String string17 = "io.swagger.oas.models.media.Encoding$StyleEnum";
      String string18 = ") in numeric value";
      String string19 = "`3$";
      String string20 = "}FXP2lg8:L9pA~v* ";
      String string21 = "java.langjava.lang.Integer";
      String string22 = "Failed to instantiate bean of type ";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string16, string21, string22, string20, string4).when(linkParameters0).expression();
      doReturn(string6, string17, string18, string19, string20).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string7, string8, string2, string8).when(link0).description();
      doReturn(string16, string10, string14, string12, string6).when(link0).name();
      doReturn(string9, string10, string2, string10, string11).when(link0).operationId();
      doReturn(string12, string13, string2, string14, string15).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = string10;
      stringArray0[1] = string15;
      stringArray0[2] = string12;
      stringArray0[3] = string13;
      stringArray0[4] = string12;
      stringArray0[5] = string9;
      stringArray0[6] = string11;
      stringArray0[7] = string6;
      stringArray0[8] = string10;
      boolean boolean0 = true;
      String string23 = "|8T$k/KS";
      boolean boolean1 = true;
      boolean boolean2 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string9, string1).when(externalDocumentation0).description();
      doReturn(stringArray0[3]).when(externalDocumentation0).url();
      int int0 = 28;
      String string24 = ")u|.xU`<'g7;";
      int int1 = (-110);
      String string25 = "c/TPdE>";
      boolean boolean3 = true;
      String string26 = "m8s=O*<,LddZklxR2";
      String string27 = "dKT>:P\"s{1]";
      String string28 = "2BP$z";
      boolean boolean4 = false;
      String string29 = "NONE";
      int int2 = 571;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string14, string27).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(stringArray0[4], string28).when(schema0).description();
      doReturn(string23, stringArray0[1], string16).when(schema0).example();
      doReturn(boolean1, boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean2, boolean4).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[6], string29).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2, int1).when(schema0).maxProperties();
      doReturn(string24).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string15).when(schema0).minimum();
      doReturn(string25, string25).when(schema0).pattern();
      doReturn(boolean3, boolean0).when(schema0).readOnly();
      doReturn(string26, stringArray0[6]).when(schema0).ref();
      doReturn(stringArray0[0], string16).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      int int1 = 136;
      Class<ArraySchema> class0 = ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int2 = Integer.MAX_VALUE;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean1 = false;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int2).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Server[] serverArray0 = new Server[1];
      String string0 = "java.lang";
      String string1 = "";
      String string2 = "java.langjava.lang.Object";
      ServerVariable[] serverVariableArray0 = new ServerVariable[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server0).description();
      doReturn(string0, string2).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      String string3 = "header";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(externalDocumentation0).description();
      doReturn(string3, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      int int3 = (-2067);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema2).implementation();
      io.swagger.oas.annotations.media.ArraySchema arraySchema1 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int3).when(arraySchema1).maxItems();
      doReturn(int1, int3).when(arraySchema1).minItems();
      doReturn(schema2, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean0, false).when(arraySchema1).uniqueItems();
      Optional<ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema1);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[3];
      String string4 = "2%%0Qz.$X";
      String string5 = " / 0x";
      String string6 = "F*q&]8?67'![U";
      String string7 = "<q^$\"E48xo!yh";
      String string8 = "io.swagge";
      String string9 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string0, string4, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null).when(link0).name();
      doReturn(string5, string6, string7, (String) null, (String) null).when(link0).operationId();
      doReturn(string8, string9, string4).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(license0).name();
      doReturn(string6, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional4 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "q4StrX%pr3q+IIV~G";
      Parameter parameter0 = null;
      Components components1 = components0.addParameters(string0, parameter0);
      String string1 = "java.langio.swagger.oas.models.media.MediaType";
      Link link0 = new Link();
      Components components2 = components1.addLinks(string1, link0);
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.content(content1);
      String string2 = "#/components/schemas/";
      String string3 = "no description";
      Header header0 = new Header();
      Boolean boolean0 = Boolean.valueOf(string2);
      Header header1 = header0.allowEmptyValue(boolean0);
      Header header2 = header1.content(content1);
      Header header3 = header2.explode(boolean0);
      ArraySchema arraySchema0 = new ArraySchema();
      String string4 = "java.lang";
      ArraySchema arraySchema1 = arraySchema0.type(string4);
      Boolean boolean1 = arraySchema1.getNullable();
      Header header4 = header3.required(boolean1);
      Components components3 = components2.addHeaders(string3, header4);
      io.swagger.oas.models.parameters.RequestBody requestBody2 = requestBody1.description(string2);
      String string5 = "m*?T&wo<UTO";
      Boolean boolean2 = new Boolean(string5);
      io.swagger.oas.models.parameters.RequestBody requestBody3 = requestBody2.required(boolean2);
      String string6 = "com.fasterxml.jackson.databind.util.ClassUtil$Ctor";
      requestBody3.setDescription(string6);
      Components components4 = components0.addRequestBodies(string1, requestBody3);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components5 = components2.securitySchemes(hashMap0);
      HashMap<String, Link> hashMap1 = new HashMap<String, Link>();
      Components components6 = components5.links(hashMap1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components6);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[2];
      boolean boolean0 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.TRUE;
      String string0 = "$,P";
      String string1 = null;
      boolean boolean1 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string2 = "rV(B^!k";
      boolean boolean2 = false;
      boolean boolean3 = false;
      boolean boolean4 = true;
      boolean boolean5 = true;
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[1] = parameterArray0[0];
      Components components0 = new Components();
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components1 = components0.addRequestBodies(operationParser0.MEDIA_TYPE, requestBody0);
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>();
      Components components2 = components1.links(hashMap0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map0 = null;
      Components components3 = components2.requestBodies(map0);
      String string3 = null;
      Parameter parameter1 = new Parameter();
      Components components4 = components3.addParameters(string3, parameter1);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[9];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Content[] contentArray0 = null;
      Components components0 = new Components();
      String string0 = "A=EGM";
      Link link0 = new Link();
      Components components1 = components0.addLinks(string0, link0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components2 = components1.examples(hashMap0);
      Map<String, Parameter> map0 = components1.getParameters();
      Components components3 = components2.parameters(map0);
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      Components components4 = components3.securitySchemes(hashMap1);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((io.swagger.oas.annotations.media.ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces1, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components0);
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[1];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Content[] contentArray0 = null;
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      Server[] serverArray0 = new Server[6];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, Link> map0 = null;
      Components components1 = components0.links(map0);
      Map<String, ApiResponse> map1 = components0.getResponses();
      Components components2 = components1.responses(map1);
      String string0 = "*G`}mNt3]n{";
      Header header0 = new Header();
      String string1 = null;
      Header header1 = header0.example(string1);
      Components components3 = components2.addHeaders(string0, header1);
      String string2 = "${M04BUY[5~%z%:yiv";
      Callback callback0 = new Callback();
      Components components4 = components3.addCallbacks(string2, callback0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces1, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((io.swagger.oas.annotations.media.ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components0 = new Components();
      String string0 = "A#e!@SH{%~_x=tt71";
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      Map<String, Link> map0 = apiResponse0.getLinks();
      Components components2 = components1.links(map0);
      Example example0 = null;
      Components components3 = components2.addExamples(string0, example0);
      Callback callback0 = new Callback();
      String string1 = ",";
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string1, pathItem0);
      String string2 = "Y;_qiZl'.p`ob#4JkI";
      Callback callback2 = callback1.addPathItem(string2, pathItem0);
      String string3 = "";
      Callback callback3 = callback2.addPathItem(string3, pathItem0);
      String string4 = "";
      List<Parameter> list0 = null;
      PathItem pathItem1 = pathItem0.parameters(list0);
      Callback callback4 = callback3.addPathItem(string4, pathItem1);
      PathItem pathItem2 = null;
      Callback callback5 = callback4.addPathItem(string1, pathItem2);
      Components components4 = components3.addCallbacks(string0, callback5);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components0);
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[5];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components0);
      MediaType mediaType0 = new MediaType();
      Components components1 = new Components();
      Map<String, Example> map0 = components1.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      String string0 = "";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(string0, encoding0);
      String string1 = "";
      MediaType mediaType3 = mediaType2.example(string1);
      Map<String, Encoding> map1 = null;
      MediaType mediaType4 = mediaType3.encoding(map1);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Components components0 = new Components();
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components1 = components0.examples(hashMap0);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components1.getSchemas();
      Components components2 = components1.schemas(map0);
      String string0 = null;
      ApiResponse apiResponse0 = new ApiResponse();
      Link link0 = new Link();
      Map<String, Header> map1 = link0.getHeaders();
      ApiResponse apiResponse1 = apiResponse0.headers(map1);
      ApiResponse apiResponse2 = apiResponse1.description(string0);
      Header header0 = new Header();
      Header header1 = header0.example(string0);
      ApiResponse apiResponse3 = apiResponse2.addHeaderObject(string0, header1);
      Map<String, Header> map2 = apiResponse3.getHeaders();
      components0.setHeaders(map2);
      Example example0 = new Example();
      String string1 = "CAN_OVERRIDE_ACCESS_MODIFIERS";
      Example example1 = example0.$ref(string1);
      Components components3 = components2.addExamples(string0, example1);
      Parameter parameter0 = new Parameter();
      String string2 = "ti<d}@b;D]";
      Parameter parameter1 = parameter0.example(string2);
      String string3 = "";
      Boolean boolean0 = new Boolean(string3);
      Parameter parameter2 = parameter1.explode(boolean0);
      Components components4 = components3.addParameters(string0, parameter2);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      OperationParser operationParser0 = new OperationParser();
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      String string0 = "Fzjb<'rf^i";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact>();
      Components components2 = components1.addSchemas(string0, schema0);
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components3 = components2.headers(hashMap0);
      HashMap<String, Link> hashMap1 = new HashMap<String, Link>();
      Components components4 = components3.links(hashMap1);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray0);
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional4 = OperationParser.getContact(contact1);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional5 = OperationParser.getSchemaFromAnnotation(schema0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      String string0 = null;
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      String string1 = "*/*";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string1, pathItem0);
      Components components2 = components1.addCallbacks(string1, callback1);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components3 = components2.callbacks(hashMap0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components4 = components3.examples(map0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = null;
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      io.swagger.oas.annotations.links.Link link0 = null;
      Optional<Link> optional2 = OperationParser.getLink(link0);
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.parameters.RequestBody> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.parameters.RequestBody>();
      MediaType mediaType1 = mediaType0.schema(schema0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map1 = parameter0.getExamples();
      MediaType mediaType2 = mediaType1.examples(map1);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType3 = mediaType2.encoding(hashMap0);
      String string0 = "io.swagger.oas.models.ExternalDocumentation";
      Example example0 = new Example();
      String string1 = "'Z,\\Pirf|8";
      Example example1 = example0.description(string1);
      Example example2 = example1.summary(string0);
      MediaType mediaType4 = mediaType3.addExamples(string0, example2);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Components components0 = new Components();
      Optional<Parameter> optional1 = OperationParser.getParameter(parameter0, components0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      RequestBody requestBody0 = null;
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponse apiResponse0 = new ApiResponse();
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      Components components1 = components0.responses(apiResponses1);
      String string0 = "io.swagger.oas.models.media.ComposedSchema";
      Example example0 = new Example();
      Components components2 = components1.addExamples(string0, example0);
      ArraySchema arraySchema0 = new ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map0 = arraySchema0.getProperties();
      Components components3 = components2.schemas(map0);
      String string1 = "";
      Header header0 = new Header();
      LinkedList<Example> linkedList0 = new LinkedList<Example>();
      Header header1 = header0.examples(linkedList0);
      Boolean boolean0 = null;
      Header header2 = header1.explode(boolean0);
      Components components4 = components3.addHeaders(string1, header2);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      LinkParameters linkParameters0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact1);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      Map<String, Header> map0 = apiResponse0.getHeaders();
      ApiResponse apiResponse1 = apiResponse0.headers(map0);
      Map<String, Link> map1 = apiResponse1.getLinks();
      Components components1 = components0.links(map1);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components1);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[3];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      Map<String, Callback> map1 = components0.getCallbacks();
      Components components1 = components0.callbacks(map1);
      Encoding encoding0 = new Encoding();
      Map<String, Header> map2 = encoding0.getHeaders();
      Components components2 = components1.headers(map2);
      String string0 = "(j~cgL{>QOD!WX_`l%";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string0, pathItem0);
      Callback callback2 = callback1.addPathItem(string0, pathItem0);
      Callback callback3 = callback2.addPathItem(string0, pathItem0);
      Components components3 = components2.addCallbacks(string0, callback3);
      ApiResponse apiResponse0 = new ApiResponse();
      ApiResponse apiResponse1 = apiResponse0.$ref(string0);
      Header header0 = null;
      ApiResponse apiResponse2 = apiResponse1.addHeaderObject(string0, header0);
      Components components4 = components3.addResponses(string0, apiResponse2);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      Map<String, ApiResponse> map0 = components0.getResponses();
      Components components1 = components0.responses(map0);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components2 = components1.callbacks(hashMap0);
      String string0 = null;
      Parameter parameter0 = new Parameter();
      String string1 = "\\5%{{HM0iTLSJ27";
      Boolean boolean0 = new Boolean(string1);
      Parameter parameter1 = parameter0.deprecated(boolean0);
      Components components3 = components2.addParameters(string0, parameter1);
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string1, pathItem0);
      Callback callback2 = callback1.addPathItem(string0, pathItem0);
      PathItem pathItem1 = callback0.put(string1, pathItem0);
      Components components4 = components3.addCallbacks(string1, callback2);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType0, exampleObject0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      stringArray0[3] = string1;
      stringArray0[4] = string0;
      stringArray0[5] = string1;
      stringArray0[6] = string1;
      stringArray0[7] = string0;
      stringArray0[8] = string1;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "$5z.X'a%V6";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "aP6;qjFZA;";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Operation operation0 = new Operation();
      Map<String, Callback> map0 = operation0.getCallbacks();
      Components components1 = components0.callbacks(map0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = components0.getRequestBodies();
      Components components2 = components1.requestBodies(map1);
      String string4 = "w?Jn*;R{;KP:#wE2";
      Header header0 = new Header();
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      Header header1 = header0.explode(boolean1);
      Components components3 = components2.addHeaders(string4, header1);
      Map<String, Header> map2 = null;
      Components components4 = components3.headers(map2);
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      Map<String, Link> map0 = components0.getLinks();
      Components components1 = components0.links(map0);
      String string0 = "\\S]WOIgi8!";
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(string0, parameter0);
      Map<String, ApiResponse> map1 = components0.getResponses();
      Components components3 = components2.responses(map1);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      String string1 = "";
      Parameter parameter1 = parameter0.description(string1);
      Components components4 = components3.parameters(hashMap0);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      MediaType mediaType1 = mediaType0.examples(hashMap0);
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map0);
      String string0 = "";
      String string1 = "";
      mediaType2.addExtension(string1, hashMap0);
      MediaType mediaType3 = mediaType2.example(string0);
      String string2 = "2.2250738585072012e-308";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string2, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null).when(exampleObject0).value();
      MediaType mediaType4 = mediaType2.example(string0);
      ExampleObject exampleObject1 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject1);
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn((String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      Components components0 = new Components();
      Link link0 = new Link();
      Components components1 = components0.addLinks(string0, link0);
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components2 = components1.addRequestBodies(string0, requestBody0);
      Components components3 = components2.examples(hashMap0);
      ApiResponse apiResponse0 = null;
      Components components4 = components3.addResponses(string0, apiResponse0);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components4);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string1;
      stringArray0[3] = string0;
      stringArray0[4] = string1;
      stringArray0[5] = string1;
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[2];
      boolean boolean0 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.TRUE;
      String string0 = "$,P";
      String string1 = null;
      boolean boolean1 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string2 = "rV(B^!k";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(boolean0, false).when(parameter0).deprecated();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(parameter0).description();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string1).when(parameter0).name();
      doReturn(boolean1, false).when(parameter0).required();
      doReturn(string2, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      Components components0 = new Components();
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      Components components1 = components0.addRequestBodies(operationParser0.MEDIA_TYPE, requestBody0);
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>();
      Components components2 = components1.links(hashMap0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map0 = null;
      Components components3 = components2.requestBodies(map0);
      String string3 = null;
      Parameter parameter1 = new Parameter();
      Components components4 = components3.addParameters(string3, parameter1);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.RV(B^!K
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "++&J/=d!rRtuM(GL";
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      String string1 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string2 = "    prefix: ";
      int int0 = Integer.MAX_VALUE;
      int int1 = 0;
      String string3 = "";
      boolean boolean2 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(string1, string1, (String) null, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string1).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(string3).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string1, (String) null).when(schema0).ref();
      doReturn(string2, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = null;
      Components components0 = new Components();
      Map<String, Link> map0 = null;
      Components components1 = components0.links(map0);
      Map<String, ApiResponse> map1 = components1.getResponses();
      Components components2 = components0.responses(map1);
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components3 = components2.requestBodies(hashMap0);
      String string4 = "pzewu<dNy*aXY";
      Header header0 = new Header();
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.$ref(string4);
      io.swagger.oas.models.parameters.RequestBody requestBody2 = hashMap0.put(string4, requestBody1);
      String string5 = "c+F,f|%L@IEr ";
      Header header1 = header0.$ref(string5);
      Components components4 = components3.addHeaders(string4, header1);
      String string6 = null;
      Example example0 = new Example();
      String string7 = "L;>fz//+n";
      Example example1 = example0.summary(string7);
      Example example2 = example1.externalValue(string6);
      Components components5 = components4.addExamples(string6, example2);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components5);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "whw1DWwx|cPp=ez";
      String[] stringArray0 = new String[3];
      String string1 = "b%I";
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      boolean boolean0 = true;
      String string2 = "~#0qEjapo";
      String string3 = "";
      String string4 = "o['9:=q";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string5 = "^1b2zz[EA";
      int int0 = 0;
      int int1 = 98;
      String string6 = null;
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string2, (String) null).when(schema0).description();
      doReturn(string3, string4, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string5, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(stringArray0[0]).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string6).when(schema0).minimum();
      doReturn(string1, (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(string1, (String) null).when(schema0).ref();
      doReturn(string1, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      MediaType mediaType0 = new MediaType();
      ArraySchema arraySchema0 = new ArraySchema();
      MediaType mediaType1 = mediaType0.schema(arraySchema0);
      String string7 = null;
      Example example0 = new Example();
      MediaType mediaType2 = mediaType1.addExamples(string7, example0);
      String string8 = null;
      Encoding encoding0 = new Encoding();
      MediaType mediaType3 = mediaType1.addEncoding(string8, encoding0);
      Map<String, Encoding> map0 = mediaType3.getEncoding();
      MediaType mediaType4 = mediaType2.encoding(map0);
      MediaType mediaType5 = mediaType4.example(string8);
      Map<String, Example> map1 = mediaType2.getExamples();
      MediaType mediaType6 = mediaType3.examples(map1);
      String string9 = "<null>";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string9, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType5, exampleObject0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components1 = components0.headers(hashMap0);
      Map<String, io.swagger.oas.models.media.Schema> map0 = null;
      Components components2 = components1.schemas(map0);
      String string1 = "\"ux?}I1nbMCP=j0 ";
      Example example0 = new Example();
      Example example1 = example0.value(requestBody0);
      Components components3 = components2.addExamples(string1, example1);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = components3.getRequestBodies();
      ApiResponse apiResponse0 = null;
      Components components4 = components0.schemas(map0);
      Components components5 = components2.requestBodies(map1);
      ArraySchema arraySchema0 = new ArraySchema();
      Components components6 = components3.addSchemas(string1, arraySchema0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components6);
      int int0 = (-1542);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean1 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema1 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema1).maxItems();
      doReturn(int0, int0).when(arraySchema1).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean1, false).when(arraySchema1).uniqueItems();
      Optional<ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema1);
      OperationParser operationParser0 = new OperationParser();
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      Server[] serverArray0 = new Server[4];
      String string0 = "JA*>=EBo'a";
      String string1 = "";
      String string2 = "#/components/schemas/";
      String string3 = "YS0.>*\\'";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string2, string2).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "g.3N*UiV";
      SecurityScheme securityScheme0 = new SecurityScheme();
      String string1 = ",";
      SecurityScheme securityScheme1 = securityScheme0.openIdConnectUrl(string1);
      OAuthFlows oAuthFlows0 = new OAuthFlows();
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      components0.setParameters(hashMap0);
      SecurityScheme securityScheme2 = securityScheme1.flows(oAuthFlows0);
      Components components1 = components0.addSecuritySchemes(string0, securityScheme2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string0, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string0 = "";
      String string1 = null;
      String string2 = "mvG7m^";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, Callback> map0 = components0.getCallbacks();
      Components components1 = components0.callbacks(map0);
      ApiResponse apiResponse1 = new ApiResponse();
      Map<String, Header> map1 = apiResponse1.getHeaders();
      Components components2 = components1.headers(map1);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      int int0 = 5;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string0 = "?{JYV]3\"RG=|<N";
      String string1 = null;
      String string2 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map0 = mediaType0.getExamples();
      Components components1 = components0.examples(map0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = components0.getRequestBodies();
      Components components2 = components1.requestBodies(map1);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer";
      boolean boolean0 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components1 = components0.headers(hashMap0);
      Map<String, io.swagger.oas.models.media.Schema> map0 = null;
      Components components2 = components1.schemas(map0);
      String string1 = "\"ux?}I1nbMCP=j0 ";
      Example example0 = new Example();
      Example example1 = example0.value(requestBody0);
      Components components3 = components2.addExamples(string1, example1);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = components3.getRequestBodies();
      ApiResponse apiResponse0 = null;
      Components components4 = components3.addResponses(string1, apiResponse0);
      Components components5 = components2.requestBodies(map1);
      ArraySchema arraySchema0 = new ArraySchema();
      Components components6 = components3.addSchemas(string1, arraySchema0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components6);
      int int0 = 1;
      int int1 = 327;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      io.swagger.oas.annotations.media.ArraySchema arraySchema1 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema1).maxItems();
      doReturn(int1, int1).when(arraySchema1).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean0).when(arraySchema1).uniqueItems();
      Optional<ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema1);
      OperationParser operationParser0 = new OperationParser();
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "io.swagger.util.EncodingPropertyStyleEnumDeserializer";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string0, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[6];
      String string1 = "YZ";
      String string2 = "ARRAY";
      String string3 = "Li9t\"od;9X-|G!/F";
      String string4 = "e`";
      String string5 = "#/components/schemas/";
      String string6 = "CtraZ[hnx/Mgl2[j(L";
      String string7 = "";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string1, string1, string0, string2).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string3, string4, string5, string1, string3).when(link0).operationId();
      doReturn(string0, string6, string2, string7, string7).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string8 = null;
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "T%:r5hr+}~";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      String string1 = "TEtB.>&'=(V~v,'M|B";
      String string2 = "`WbEp3++UD.-\"#}GGR5";
      String string3 = ",";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(contact0).email();
      doReturn(string2, (String) null).when(contact0).name();
      doReturn(string3, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      String string4 = "";
      String string5 = "=nb(";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(license1).name();
      doReturn(string5, (String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license1);
      boolean boolean0 = true;
      boolean boolean1 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = null;
      boolean boolean2 = true;
      String string6 = "Operation not supported by generator of type ";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      String string7 = "";
      boolean boolean3 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[7];
      boolean boolean0 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(arraySchema0).maxItems();
      doReturn(0, 0, 0, 0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null, (Schema) null).when(arraySchema0).schema();
      doReturn(false, false, false, false, false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = null;
      String string0 = "";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.TRUE;
      Explode explode2 = Explode.FALSE;
      String string1 = null;
      String string2 = "|=IVf<!$Idir/Y";
      boolean boolean1 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null, (Class) null, (Class) null, (Class) null, (Class) null).when(schema0).implementation();
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false, false, false, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false, false, false, false).when(parameter0).allowReserved();
      doReturn(arraySchema0, (io.swagger.oas.annotations.media.ArraySchema) null, (io.swagger.oas.annotations.media.ArraySchema) null, (io.swagger.oas.annotations.media.ArraySchema) null, (io.swagger.oas.annotations.media.ArraySchema) null).when(parameter0).array();
      doReturn((Object) contentArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(parameter0).content();
      doReturn(boolean0, false, false, false, false).when(parameter0).deprecated();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).description();
      doReturn(explode0, explode1, explode2, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn(string1, (String) null, (String) null, (String) null, (String) null).when(parameter0).in();
      doReturn(string2, (String) null, (String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(boolean1, false, false, false, false).when(parameter0).required();
      doReturn(schema0, schema0, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      Components components0 = new Components();
      String string3 = "INjK4QPnaeUem7k5JZ";
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses(string3, apiResponse0);
      io.swagger.oas.models.parameters.RequestBody requestBody0 = null;
      Components components2 = components1.addRequestBodies(string3, requestBody0);
      String string4 = "";
      ArraySchema arraySchema1 = new ArraySchema();
      io.swagger.oas.models.media.Schema<ArraySchema> schema1 = new io.swagger.oas.models.media.Schema<ArraySchema>();
      ArraySchema arraySchema2 = arraySchema1.items(schema1);
      Components components3 = components2.addSchemas(string4, arraySchema2);
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components4 = components3.requestBodies(hashMap0);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "Z,BGi/>s";
      String string1 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Server[] serverArray0 = new Server[9];
      String string2 = null;
      String string3 = "java.lang";
      String string4 = "Can't check class {}, {}";
      String string5 = "";
      String string6 = "'09S[*mT;3u*$Czu";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string4, string5).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[2];
      boolean boolean0 = false;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = null;
      String string0 = "(;oxe)l*iU,H|84xZO6";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.DEFAULT;
      String string1 = "8I;A]";
      boolean boolean1 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      Components components0 = new Components();
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[5];
      String string2 = "";
      String string3 = "T9rz2I!SfVa{LU";
      String string4 = null;
      String string5 = "(Yn3{x7H{h.+X|rC-rt";
      String string6 = "";
      String string7 = "Jf fA]!-[f.";
      String string8 = "g482(sl`x\\Yx1hFI";
      String string9 = "Failed to parse Date value '%s': %s";
      String string10 = "";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2, string3, string4, string5).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string6, string4, string4, string3, string6).when(link0).operationId();
      doReturn(string7, string8, string9, string10, string10).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Components components1 = components0.links(map0);
      Map<String, Example> map1 = null;
      ApiResponses apiResponses0 = new ApiResponses();
      String string11 = "";
      ApiResponse apiResponse0 = new ApiResponse();
      String string12 = "";
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      boolean boolean0 = true;
      String string1 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 1789;
      String string2 = "Nc)_/ej@";
      int int1 = (-1542);
      String string3 = "";
      String string4 = "\"&g>H";
      boolean boolean1 = true;
      String string5 = "j{+%uF5IOv-_1?";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string0).when(schema0).description();
      doReturn(stringArray0[1], string1).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[0]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string2).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string3).when(schema0).minimum();
      doReturn(string4, (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(stringArray0[1]).when(schema0).ref();
      doReturn(string5, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      MediaType mediaType0 = new MediaType();
      String string6 = "ahHkOd4#W%M!GM";
      Example example0 = new Example();
      Example example1 = example0.externalValue(string6);
      String string7 = " }D!;W':N<Vm?c";
      Example example2 = example1.description(string7);
      MediaType mediaType1 = mediaType0.addExamples(string6, example2);
      example2.setSummary(string6);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string7, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType1, exampleObject0);
      String string8 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string8).when(license0).name();
      doReturn(string6, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      Map<String, Example> map0 = mediaType1.getExamples();
      Components components1 = components0.examples(map0);
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(string6, parameter0);
      Components components3 = components2.addExamples(string7, example2);
      io.swagger.oas.models.media.Schema<Integer> schema1 = new io.swagger.oas.models.media.Schema<Integer>();
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema1.getProperties();
      Components components4 = components3.schemas(map1);
      components4.setSchemas(map1);
      Optional<List<Parameter>> optional3 = OperationParser.getParametersList(parameterArray0, components4);
      String string9 = "";
      String string10 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string9).when(server0).description();
      doReturn(string10).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional4 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "vQN2n!J1H~E}Z";
      String string1 = "@JsonUnwrapped";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string1, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      String string0 = ",o3CvL";
      String string1 = "; expected type KeyDeserializer or Class<KeyDeserializer> instead";
      String string2 = "YPS,-`&1 qIQ hm3+";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, (String) null, (String) null).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string0, string0, (String) null, (String) null).when(link0).operationId();
      doReturn(string1, string2).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[1];
      linkArray0[0] = link0;
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      String string3 = "z\"ZHHnGV]kh<qe1]{";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(license0).name();
      doReturn(string2, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string2, (String) null).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "X";
      String string1 = "org.apache.xalan.xsltc.trax.TemplatesImpl";
      String string2 = "q*Pil";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string1, (String) null).when(link0).operationId();
      doReturn(string2).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      String string3 = "";
      String string4 = null;
      String string5 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(contact0).email();
      doReturn(string4).when(contact0).name();
      doReturn(string5).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      String string6 = "no long/Long-argument constructor/factory method to deserialize from Number value (%s)";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string6, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string3).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string2, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      String string7 = "";
      boolean boolean0 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string7).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.parameters.RequestBody> map0 = null;
      Components components1 = components0.requestBodies(map0);
      String string8 = "o )%S.r\\<";
      Parameter parameter0 = null;
      Components components2 = components1.addParameters(string8, parameter0);
      Map<String, Example> map1 = components0.getExamples();
      Components components3 = components2.examples(map1);
      SecurityScheme securityScheme0 = new SecurityScheme();
      String string9 = "";
      Callback callback0 = null;
      Components components4 = components0.addCallbacks(string9, callback0);
      SecurityScheme securityScheme1 = securityScheme0.description(string8);
      String string10 = null;
      SecurityScheme securityScheme2 = securityScheme1.bearerFormat(string10);
      Components components5 = components3.addSecuritySchemes(string8, securityScheme2);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional3 = OperationParser.getRequestBody(requestBody0, components5);
      String string11 = "";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string5;
      stringArray0[1] = string7;
      stringArray0[2] = string9;
      boolean boolean1 = false;
      String string12 = "java.lang";
      boolean boolean2 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string13 = ">eT{3m";
      int int0 = 3126;
      String string14 = "lT$3Nkz-+?6R;";
      int int1 = 217;
      String string15 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string16 = "9helVxkWw";
      String string17 = "^9N,?!.#xT-";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string11).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean1).when(schema0).deprecated();
      doReturn(string10).when(schema0).description();
      doReturn(string12, string7, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean2, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string13, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string14).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(stringArray0[1]).when(schema0).minimum();
      doReturn(string15, (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(string16, (String) null).when(schema0).ref();
      doReturn(string17, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "pq:D'@!~f1onEC-Z.";
      String string1 = "OIbE;";
      String string2 = "%FWO8,R";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = null;
      String string3 = "com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string1, string2).when(info0).termsOfService();
      doReturn(string1, string3).when(info0).title();
      doReturn(string2, string2).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[7];
      String string4 = "";
      String string5 = "";
      String string6 = "";
      String string7 = "1jM-d=3E-u8@";
      String string8 = "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase";
      String string9 = "com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer";
      String string10 = "Vk*a`pF20";
      String string11 = "";
      String string12 = "Zl)qqxBC~a*#&B<";
      String string13 = "";
      String string14 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string5, string6, string2, string6).when(link0).description();
      doReturn(string14, string8, string12, string10, string4).when(link0).name();
      doReturn(string7, string8, string2, string8, string9).when(link0).operationId();
      doReturn(string10, string11, string2, string12, string13).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = string8;
      stringArray0[1] = string13;
      stringArray0[2] = string10;
      stringArray0[3] = string11;
      stringArray0[4] = string10;
      stringArray0[5] = string7;
      stringArray0[6] = string9;
      stringArray0[7] = string4;
      stringArray0[8] = string8;
      boolean boolean0 = true;
      String string15 = "|8T$k/KS";
      boolean boolean1 = true;
      boolean boolean2 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string7, (String) null).when(externalDocumentation0).description();
      doReturn(stringArray0[3]).when(externalDocumentation0).url();
      int int0 = 28;
      String string16 = "    allowEmptyValue: ";
      int int1 = (-110);
      String string17 = "c/TPdE>";
      boolean boolean3 = true;
      String string18 = "m8s=O*<,LddZklxR2";
      String string19 = "dKT>:P\"s{1]";
      String string20 = "2BP$z";
      boolean boolean4 = false;
      String string21 = "NONE";
      int int2 = 571;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string12, string19).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(stringArray0[4], string20).when(schema0).description();
      doReturn(string15, stringArray0[1], string14).when(schema0).example();
      doReturn(boolean1, boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean2, boolean4).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[6], string21).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2, 0).when(schema0).maxProperties();
      doReturn(string16).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string13).when(schema0).minimum();
      doReturn(string17, string17).when(schema0).pattern();
      doReturn(boolean3, boolean0).when(schema0).readOnly();
      doReturn(string18, stringArray0[6]).when(schema0).ref();
      doReturn(stringArray0[0], string14).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "1 d8";
      MediaType mediaType1 = mediaType0.example(string0);
      Example example0 = null;
      MediaType mediaType2 = mediaType1.addExamples(string0, example0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      MediaType mediaType3 = mediaType2.examples(map0);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType4 = mediaType3.encoding(hashMap0);
      Encoding encoding0 = hashMap0.remove((Object) parameter0);
      String string1 = "[JWo9$RuI76=CFF>0[D";
      String string2 = null;
      String string3 = "BM~6&cCmay";
      String string4 = "D$\"`";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string2, string1).when(exampleObject0).name();
      doReturn(string0, (String) null).when(exampleObject0).summary();
      doReturn(string4, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
      Map<String, Encoding> map1 = mediaType3.getEncoding();
      mediaType0.setEncoding(map1);
      String string5 = "";
      ExampleObject exampleObject1 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string5).when(exampleObject1).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType2, exampleObject1);
      String string6 = ", field: ";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string7 = "";
      String string8 = "io.swagger.oas.models.media.Schema";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string6, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string6, string7).when(info0).termsOfService();
      doReturn(string5).when(info0).title();
      doReturn(string6, string8).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string1).when(license1).name();
      doReturn(string0, string3).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license1);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = null;
      Components components0 = new Components();
      String string9 = "R\\cf2Xbv! ";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      HashMap<String, Callback> hashMap1 = new HashMap<String, Callback>();
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional4 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components0);
      String string0 = " k`@";
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[6];
      contentArray0[0] = content0;
      contentArray0[1] = content0;
      contentArray0[2] = content0;
      contentArray0[3] = content0;
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = content0;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, string0).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      Class<MediaType> class0 = MediaType.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces1).value();
      Components components0 = new Components();
      Map<String, Link> map0 = null;
      Components components1 = components0.links(map0);
      Map<String, ApiResponse> map1 = components0.getResponses();
      Components components2 = components1.responses(map1);
      String string0 = "*G`}mNt3]n{";
      Header header0 = new Header();
      String string1 = null;
      Header header1 = header0.example(string1);
      Components components3 = components2.addHeaders(string0, header1);
      String string2 = "${M04BUY[5~%z%:yiv";
      Callback callback0 = new Callback();
      Components components4 = components3.addCallbacks(string2, callback0);
      MediaType mediaType0 = new MediaType();
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      Map<String, Encoding> map2 = mediaType1.getEncoding();
      Header header2 = header0.example(string0);
      MediaType mediaType2 = mediaType1.encoding(map2);
      String string3 = "7/\\T%_5)fMv/]Ip+";
      Example example0 = new Example();
      MediaType mediaType3 = mediaType2.addExamples(string3, example0);
      Map<String, Example> map3 = mediaType1.getExamples();
      MediaType mediaType4 = mediaType3.examples(map3);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces1, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(server0).description();
      doReturn(string0).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      MediaType mediaType0 = null;
      String string1 = "u,W";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string1, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces1).value();
      Components components0 = new Components();
      Map<String, Link> map0 = null;
      Components components1 = components0.links(map0);
      Map<String, ApiResponse> map1 = components0.getResponses();
      Components components2 = components1.responses(map1);
      String string0 = "*G`}mNt3]n{";
      Header header0 = new Header();
      String string1 = null;
      Header header1 = header0.example(string1);
      Components components3 = components2.addHeaders(string0, header1);
      ArraySchema arraySchema0 = new ArraySchema();
      io.swagger.oas.models.media.Schema<Object> schema1 = null;
      ArraySchema arraySchema1 = arraySchema0.items(schema1);
      ArraySchema arraySchema2 = arraySchema1.type(string0);
      Header header2 = header0.schema(arraySchema2);
      String string2 = "${M04BUY[5~%z%:yiv";
      Callback callback0 = new Callback();
      Components components4 = components3.addCallbacks(string2, callback0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces1, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      int int1 = 136;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Server[] serverArray0 = new Server[1];
      String string0 = "java.lang";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string0, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[3];
      boolean boolean0 = false;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[0];
      String string0 = "no description";
      Explode explode0 = Explode.DEFAULT;
      String string1 = "java.langio.swagger.oas.models.media.MediaType";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string2 = "l";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(boolean0).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string1, (String) null).when(parameter0).name();
      doReturn(boolean0).when(parameter0).required();
      doReturn(string2, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      Components components0 = new Components();
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map0 = mediaType0.getExamples();
      Components components1 = components0.examples(map0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = components0.getSchemas();
      Components components2 = components1.schemas(map1);
      String string3 = "b'MR4Id O(%[\"a<#[";
      Link link0 = new Link();
      Link link1 = link0.description(string3);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[8];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components1);
      Components components3 = components2.addLinks(string3, link1);
      String string4 = "sw;emiFSx~Kat>i~=d";
      Header header0 = new Header();
      Header header1 = header0.description(string4);
      Header.StyleEnum header_StyleEnum0 = Header.StyleEnum.SIMPLE;
      Header header2 = header1.style(header_StyleEnum0);
      Components components4 = components3.addHeaders(string4, header2);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.L
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[4];
      String string0 = ",";
      String string1 = null;
      String string2 = "com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std";
      String string3 = null;
      String string4 = "    clientCredentials: ";
      String string5 = "rjPrTU7qlN]cS";
      String string6 = "fg|Xq?WpA r(bY";
      String string7 = null;
      String string8 = "java.langio.swagger.oas.models.media.MediaType";
      String string9 = "Hb/q^,";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(linkParameters0).expression();
      doReturn(string8, string0, string2, string9, (String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string1, string1, string0).when(link0).description();
      doReturn(string4, string5, string0, string5).when(link0).name();
      doReturn(string0, string0, string2, string2, string6).when(link0).operationId();
      doReturn(string3, string2, string0, string2).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      String string10 = ",f|4iql4{\"v#<%";
      String string11 = "cn:_'<m*.v>Y";
      String string12 = "*/*";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string10, string12).when(contact0).email();
      doReturn(string0, string0).when(contact0).name();
      doReturn(string11, string0).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string13 = "9%@0M";
      Link link1 = null;
      Components components1 = components0.addLinks(string13, link1);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = components0.getRequestBodies();
      Components components2 = components1.requestBodies(map1);
      Header header0 = new Header();
      Header.StyleEnum header_StyleEnum0 = Header.StyleEnum.SIMPLE;
      Header header1 = header0.style(header_StyleEnum0);
      Components components3 = components2.addHeaders(string7, header1);
      ApiResponses apiResponses0 = new ApiResponses();
      String string14 = "io.swagger.jaxrs2.OperationParser";
      ApiResponse apiResponse0 = new ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(string14, apiResponse0);
      ApiResponses apiResponses2 = apiResponses1._default(apiResponse0);
      String string15 = null;
      ApiResponses apiResponses3 = apiResponses2.addApiResponse(string15, apiResponse0);
      String string16 = "~kD#";
      ApiResponses apiResponses4 = apiResponses3.addApiResponse(string16, apiResponse0);
      ApiResponses apiResponses5 = apiResponses4._default(apiResponse0);
      Components components4 = components3.responses(apiResponses5);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContent(content0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "1 d8";
      MediaType mediaType1 = mediaType0.example(string0);
      Example example0 = null;
      MediaType mediaType2 = mediaType1.addExamples(string0, example0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      MediaType mediaType3 = mediaType2.examples(map0);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType4 = mediaType3.encoding(hashMap0);
      Encoding encoding0 = hashMap0.remove((Object) parameter0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string0, string0, string0).when(exampleObject0).name();
      doReturn(string0, (String) null).when(exampleObject0).summary();
      doReturn(string0, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
      Map<String, Encoding> map1 = mediaType3.getEncoding();
      mediaType0.setEncoding(map1);
      String string1 = "";
      ExampleObject exampleObject1 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(exampleObject1).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType2, exampleObject1);
      String string2 = ", field: ";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      String string3 = "/V~V";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string2, string3).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string2, string3).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(string2, string3).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      String string4 = "7";
      String string5 = "";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string4).when(license1).name();
      doReturn(string0, string5).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license1);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = null;
      Components components0 = new Components();
      String string6 = "R\\cf2Xbv! ";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      HashMap<String, Callback> hashMap1 = new HashMap<String, Callback>();
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[6];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Map<String, Link> map2 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components0);
      String string0 = ";NQR7?0";
      boolean boolean0 = false;
      Content[] contentArray0 = null;
      String string1 = "+phZ#e|M5@xOyQp\"";
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, string1).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[5];
      String string2 = null;
      String string3 = "|_zP6g+B1c{g/C\"l=a{";
      String string4 = null;
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[8];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string2, string0, string3, string3, string4).when(apiResponse0).description();
      doReturn(linkArray0).when(apiResponse0).links();
      doReturn(string3, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components0);
      MediaType mediaType0 = new MediaType();
      Components components1 = new Components();
      Map<String, Example> map0 = components1.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      String string5 = "";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(string5, encoding0);
      String string6 = "";
      MediaType mediaType3 = mediaType2.example(string6);
      Map<String, Encoding> map1 = null;
      MediaType mediaType4 = mediaType3.encoding(map1);
      String string7 = "^5yD\"";
      String string8 = "java.langio.swagger.oas.models.media.MediaType";
      String string9 = "";
      String string10 = "[(%ZQ}}|=";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(exampleObject0).externalValue();
      doReturn(string7, string8, string5, string9).when(exampleObject0).name();
      doReturn(string5).when(exampleObject0).summary();
      doReturn(string10, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "*/*";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      String string1 = "34bXV\"&hv";
      stringArray0[1] = string1;
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, Link> map0 = null;
      Components components1 = components0.links(map0);
      Map<String, ApiResponse> map1 = components0.getResponses();
      Components components2 = components1.responses(map1);
      String string2 = "*G`}mNt3]n{";
      Header header0 = new Header();
      String string3 = null;
      Header header1 = header0.example(string3);
      Components components3 = components2.addHeaders(string2, header1);
      ArraySchema arraySchema0 = new ArraySchema();
      io.swagger.oas.models.media.Schema<Object> schema1 = null;
      ArraySchema arraySchema1 = arraySchema0.items(schema1);
      ArraySchema arraySchema2 = arraySchema1.type(string2);
      Header header2 = header0.schema(arraySchema2);
      String string4 = "${M04BUY[5~%z%:yiv";
      Callback callback0 = new Callback();
      Components components4 = components3.addCallbacks(string4, callback0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces1, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      String string0 = "java.lang";
      String string1 = "io.swagger.jaxrs2.OperationParser";
      ServerVariable[] serverVariableArray0 = new ServerVariable[2];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, (String) null, (String) null).when(server0).description();
      doReturn(string0, string1, (String) null, (String) null).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) null).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      String string2 = "hX)C8S";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string1, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1, (String) null).when(info0).termsOfService();
      doReturn(string2, (String) null).when(info0).title();
      doReturn(string0, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      Server[] serverArray0 = new Server[1];
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      Components components0 = new Components();
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components1 = components0.examples(hashMap0);
      io.swagger.oas.models.media.Schema<Integer> schema0 = new io.swagger.oas.models.media.Schema<Integer>();
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema0.getProperties();
      Components components2 = components1.schemas(map1);
      String string3 = "J tdt d%K w";
      ApiResponse apiResponse0 = null;
      Components components3 = components2.addResponses(string3, apiResponse0);
      String string4 = null;
      Components components4 = components3.addSchemas(string4, schema0);
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      int int0 = 69;
      int int1 = 3256;
      int int2 = (-193);
      Class<OperationParser> class0 = OperationParser.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int3 = 3743;
      Schema schema1 = null;
      boolean boolean1 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int3).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "java.lang";
      String string1 = "io.swagger.jaxrs2.OperationParser";
      ServerVariable[] serverVariableArray0 = new ServerVariable[2];
      String string2 = "";
      String string3 = "hv!J5|f;aJF[~k";
      String string4 = "io.swagge";
      String string5 = "?t";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3, string2, string4, (String) null).when(serverVariable0).description();
      doReturn(string1, string5, string5, string2).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      String string6 = "z";
      String string7 = null;
      String string8 = "java.langio.swagger.oas.models.info.Contact";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string6, string3).when(server0).description();
      doReturn(string0, string1, string7).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      String string9 = "hX)C8S";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = null;
      String string10 = "java.langio.swagger.oas.models.media.MediaType";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string1, string3).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string1, string5).when(info0).termsOfService();
      doReturn(string9, string10).when(info0).title();
      doReturn(string0, string6).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      Server[] serverArray0 = new Server[1];
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      String string11 = null;
      String string12 = "leC2M*-4.F)'Dvy";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string11, string9, string12, string0, (String) null).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      Components components0 = new Components();
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components1 = components0.examples(hashMap0);
      io.swagger.oas.models.media.Schema<Integer> schema0 = new io.swagger.oas.models.media.Schema<Integer>();
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema0.getProperties();
      Components components2 = components1.schemas(map1);
      String string13 = "J tdt d%K w";
      ApiResponse apiResponse0 = null;
      Components components3 = components2.addResponses(string13, apiResponse0);
      String string14 = null;
      Components components4 = components3.addSchemas(string14, schema0);
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components0);
      String string0 = ";NQR7?0";
      boolean boolean0 = false;
      Content[] contentArray0 = null;
      String string1 = "+phZ#e|M5@xOyQp\"";
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, string1).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[5];
      String string2 = null;
      String string3 = "|_zP6g+B1c{g/C\"l=a{";
      String string4 = null;
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[8];
      String string5 = "X@{M?D";
      String string6 = "J:9(";
      String string7 = "java.langio.swagger.oas.models.parameters.Parameter";
      String string8 = "java.lang";
      String string9 = "io.swagger.jaxrs2.OperationParser";
      String string10 = "*/*";
      String string11 = "!j}9g@d@";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string3, string5, string6, string7).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string8, string9, string7, string10, string1).when(link0).operationId();
      doReturn(string11, string5, string4, string9, string1).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string2, string0, string3, string3, string4).when(apiResponse0).description();
      doReturn(linkArray0).when(apiResponse0).links();
      doReturn(string3, string2).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components0);
      MediaType mediaType0 = new MediaType();
      Components components1 = new Components();
      Map<String, Example> map0 = components1.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      String string12 = "";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(string12, encoding0);
      String string13 = "";
      MediaType mediaType3 = mediaType2.example(string13);
      Map<String, Encoding> map1 = null;
      MediaType mediaType4 = mediaType3.encoding(map1);
      String string14 = "^5yD\"";
      String string15 = "java.langio.swagger.oas.models.media.MediaType";
      String string16 = "";
      String string17 = "[(%ZQ}}|=";
      String string18 = "'0IT}/,23P7";
      String string19 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string18).when(exampleObject0).externalValue();
      doReturn(string14, string15, string12, string16).when(exampleObject0).name();
      doReturn(string12).when(exampleObject0).summary();
      doReturn(string17, string18, string19).when(exampleObject0).value();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      String string1 = ",";
      stringArray0[3] = string1;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces1).value();
      Components components0 = new Components();
      Map<String, Link> map0 = null;
      Components components1 = components0.links(map0);
      Map<String, ApiResponse> map1 = components0.getResponses();
      Components components2 = components0.responses(map1);
      Components components3 = components1.responses(map1);
      Callback callback0 = new Callback();
      String string2 = "B";
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string2, pathItem0);
      String string3 = "*KZn`M\\|fI? S1";
      Callback callback2 = callback1.addPathItem(string3, pathItem0);
      String string4 = null;
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.put(operation0);
      Callback callback3 = callback2.addPathItem(string4, pathItem1);
      Callback callback4 = callback3.addPathItem(stringArray0[0], pathItem0);
      Components components4 = components0.addCallbacks(stringArray0[0], callback4);
      Header header0 = new Header();
      String string5 = null;
      String string6 = null;
      components3.addExtension(string6, string5);
      Header header1 = header0.example(string5);
      Components components5 = components3.addHeaders(stringArray0[4], header1);
      String string7 = "${M04BUY[5~%z%:yiv";
      Callback callback5 = new Callback();
      Components components6 = components5.addCallbacks(string7, callback5);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces1, components6);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      ExampleObject[] exampleObjectArray0 = new ExampleObject[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces1).value();
      Components components0 = new Components();
      Map<String, Link> map0 = null;
      Components components1 = components0.links(map0);
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      Components components2 = components1.responses(hashMap0);
      String string1 = "*G`}mNt3]n{";
      Header header0 = new Header();
      String string2 = null;
      Header header1 = header0.example(string1);
      Components components3 = components2.addHeaders(string1, header1);
      ArraySchema arraySchema0 = new ArraySchema();
      io.swagger.oas.models.media.Schema<Object> schema1 = null;
      ArraySchema arraySchema1 = arraySchema0.items(schema1);
      Header header2 = header0.schema(arraySchema1);
      String string3 = "${M04BUY[5~%z%:yiv";
      Callback callback0 = new Callback();
      Components components4 = components3.addCallbacks(string3, callback0);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces1, components4);
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[1];
      String string0 = "#";
      String string1 = "_e9 SC;Vu@N";
      String string2 = "java.langjava.lang.Object";
      String string3 = "%fF";
      String string4 = "java.lang";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string0, (String) null, (String) null).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string1, string2, string1, (String) null, (String) null).when(link0).operationId();
      doReturn(string3, string4, string1).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      int int0 = (-2407);
      int int1 = 0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      io.swagger.oas.annotations.media.ArraySchema arraySchema0 = mock(io.swagger.oas.annotations.media.ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Optional<Link> optional1 = OperationParser.getLink(linkArray0[0]);
      Optional<Link> optional2 = OperationParser.getLink(linkArray0[0]);
      String[] stringArray0 = new String[0];
      String string5 = "Illegal character point (0x";
      String string6 = null;
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      String string7 = "kv";
      int int2 = (-716);
      String string8 = "1f";
      String string9 = "+T4(T?x+}@91eQ3/";
      String string10 = "{F";
      String string11 = "PJVnsD:KiUSw";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(schema1)._default();
      doReturn(boolean0, false).when(schema1).deprecated();
      doReturn(string1, (String) null).when(schema1).description();
      doReturn(string5, string6, (String) null).when(schema1).example();
      doReturn(boolean0, false).when(schema1).exclusiveMaximum();
      doReturn(boolean1).when(schema1).exclusiveMinimum();
      doReturn(string3, (String) null).when(schema1).format();
      doReturn(int1).when(schema1).maxLength();
      doReturn(string7).when(schema1).maximum();
      doReturn(int2).when(schema1).minProperties();
      doReturn(string8, (String) null).when(schema1).minimum();
      doReturn(string9, (String) null).when(schema1).pattern();
      doReturn(boolean1).when(schema1).readOnly();
      doReturn(string10, (String) null).when(schema1).ref();
      doReturn(string11, (String) null).when(schema1).type();
      // Undeclared exception!
      try { 
        OperationParser.getSchemaFromAnnotation(schema1);
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
