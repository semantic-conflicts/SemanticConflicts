/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 10:23:40 GMT 2020
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.ArraySchema;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.parameters.RequestBody;
import io.swagger.oas.annotations.responses.ApiResponse;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.info.Info;
import io.swagger.oas.models.info.License;
import io.swagger.oas.models.links.Link;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.parameters.Parameter;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      int int0 = 2;
      int int1 = 6;
      int int2 = Integer.MAX_VALUE;
      Class<Info> class0 = Info.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Class<Link> class1 = Link.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      MediaType mediaType0 = new MediaType();
      String string1 = "\\/n.'";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string1, example0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      MediaType mediaType2 = mediaType1.examples(hashMap0);
      Map<String, Encoding> map1 = mediaType2.getEncoding();
      MediaType mediaType3 = mediaType2.encoding(map1);
      Map<String, Encoding> map2 = mediaType1.getEncoding();
      MediaType mediaType4 = mediaType2.encoding(map2);
      MediaType mediaType5 = mediaType4.example(string1);
      mediaType5.setEncoding(map2);
      String string2 = "Incompatible types: declared root type (%s) vs %s";
      String string3 = "2!}>LVY<0|Red";
      String string4 = "*/*";
      String string5 = "java.langjava.lang.Object";
      String string6 = "6L";
      String string7 = "io.swagger.jaxrs2.OperationParser";
      String string8 = "java.langjava.lang.Object";
      String string9 = "'jpY4jqcu4d";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string6).when(exampleObject0).externalValue();
      doReturn(string2, string3, string4, string5).when(exampleObject0).name();
      doReturn(string1, string7).when(exampleObject0).summary();
      doReturn(string3, string8, string9).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType5, exampleObject0);
      OperationParser operationParser0 = new OperationParser();
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      String string10 = "";
      String string11 = "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig";
      String string12 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).expression();
      doReturn(string2, (String) null).when(linkParameters1).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string10).when(link0).description();
      doReturn(string11, operationParser0.COMPONENTS_REF).when(link0).operationId();
      doReturn(string12).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      Optional<Link> optional3 = OperationParser.getLink(link0);
      String[] stringArray0 = new String[18];
      stringArray0[0] = string2;
      String string13 = null;
      boolean boolean1 = false;
      boolean boolean2 = true;
      String string14 = "io.swagge";
      String string15 = "@(1\\;k7=,%;K'yy)dg";
      String string16 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string14, string3).when(externalDocumentation0).description();
      doReturn(string15, string16).when(externalDocumentation0).url();
      int int3 = 166;
      String string17 = "io.swagger.util.ResponseDeserializer";
      String string18 = "";
      boolean boolean3 = true;
      String string19 = "io.swagge";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string12, string11).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean0).when(schema2).deprecated();
      doReturn(string13).when(schema2).description();
      doReturn(string13, operationParser0.COMMA, string1).when(schema2).example();
      doReturn(boolean1).when(schema2).exclusiveMaximum();
      doReturn(boolean2, boolean3).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema2).externalDocs();
      doReturn(string2, stringArray0[0]).when(schema2).format();
      doReturn(int3).when(schema2).maxLength();
      doReturn(int3, int0).when(schema2).maxProperties();
      doReturn(stringArray0[0]).when(schema2).maximum();
      doReturn(int0, int2).when(schema2).minProperties();
      doReturn(string12).when(schema2).minimum();
      doReturn(string17, string12).when(schema2).pattern();
      doReturn(boolean1).when(schema2).readOnly();
      doReturn(string18).when(schema2).ref();
      doReturn(string1, string19).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema2);
      int int4 = 713;
      int int5 = 2;
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema4 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema4).implementation();
      boolean boolean4 = false;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int4, int0).when(arraySchema1).maxItems();
      doReturn(int3, int5).when(arraySchema1).minItems();
      doReturn(schema3, schema4).when(arraySchema1).schema();
      doReturn(boolean2, boolean4).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional5 = OperationParser.getArraySchema(arraySchema1);
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      Schema schema5 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string20 = "not a valid Long value";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = null;
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(operationParser0.COMMA, apiResponse0);
      Components components1 = components0.responses(apiResponses1);
      String string0 = "y}^q0JB|2l'Q8h3^^0";
      Example example0 = new Example();
      Example example1 = example0.value(apiResponses1);
      Example example2 = example1.description(operationParser0.COMPONENTS_REF);
      Components components2 = components1.addExamples(string0, example2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "no description";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string1, callback0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components2 = components1.examples(map0);
      String string2 = "java.lang";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.description(string1);
      Components components3 = components2.addResponses(string2, apiResponse1);
      Components components4 = components1.examples(map0);
      int int0 = 0;
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>(int0);
      Components components5 = components3.securitySchemes(hashMap0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components5);
      String string3 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      OperationParser operationParser0 = new OperationParser();
      Map<String, Parameter> map2 = components0.getParameters();
      components1.setParameters(map2);
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      Content content0 = null;
      String string4 = ": ";
      ApiResponse apiResponse2 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0).when(apiResponse2).content();
      doReturn(string2, string4, (String) null, (String) null).when(apiResponse2).description();
      doReturn((Object) null, (Object) null).when(apiResponse2).links();
      doReturn((String) null, (String) null).when(apiResponse2).responseCode();
      apiResponseArray0[0] = apiResponse2;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      boolean boolean1 = true;
      RequestBody requestBody1 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody1).content();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(requestBody1).description();
      doReturn(boolean1, false).when(requestBody1).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody1, components4);
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      HashMap<String, Callback> hashMap1 = new HashMap<String, Callback>();
      Components components6 = components0.callbacks(hashMap1);
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components6);
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional4 = OperationParser.getLink(link0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[2];
      String string0 = "4";
      String string1 = null;
      String string2 = "java.langjava.lang.Object";
      String string3 = "6kDH'Ez";
      String string4 = "I8Vnz6\\ S7";
      String string5 = "java.langio.swagger.oas.models.parameters.RequestBody";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string4, string5).when(link0).description();
      doReturn(string1, string0).when(link0).name();
      doReturn(string1, string1).when(link0).operationId();
      doReturn(string2, string3, string5, string4).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      String string6 = "";
      String string7 = "java.langio.swagger.oas.models.media.Content";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string6).when(linkParameters1).expression();
      doReturn(string2, string7).when(linkParameters1).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
      String[] stringArray0 = new String[7];
      String string8 = "";
      stringArray0[0] = string8;
      String string9 = "FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY";
      stringArray0[1] = string9;
      String string10 = "    in: ";
      stringArray0[2] = string10;
      String string11 = "kK z";
      stringArray0[3] = string11;
      String string12 = "";
      stringArray0[4] = string12;
      String string13 = "no description";
      stringArray0[5] = string13;
      String string14 = "Es4E3kqOK&{r{0";
      stringArray0[6] = string14;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Server[] serverArray0 = new Server[8];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = new MediaType();
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<License> schema0 = new io.swagger.oas.models.media.Schema<License>();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      String string0 = "p\\}4y!oM3d:!pS";
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string0);
      mediaType1.setSchema(arraySchema2);
      MediaType mediaType2 = mediaType1.encoding(hashMap0);
      String string1 = "jr$c_FY.~'";
      MediaType mediaType3 = mediaType2.example(string1);
      String string2 = "com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer";
      Encoding encoding0 = new Encoding();
      String string3 = "2]UL:'t(leL";
      Encoding encoding1 = encoding0.style(string3);
      String string4 = "jyk%+[Fi5n,:koxv";
      parameter0.addExtension(string4, arraySchema1);
      String string5 = ",";
      Encoding encoding2 = encoding1.contentType(string5);
      MediaType mediaType4 = mediaType3.addEncoding(string2, encoding2);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[7];
      io.swagger.oas.annotations.Parameter parameter1 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter1).allowEmptyValue();
      doReturn(false).when(parameter1).allowReserved();
      doReturn((ArraySchema) null).when(parameter1).array();
      doReturn((Content[]) null).when(parameter1).content();
      doReturn(false).when(parameter1).deprecated();
      doReturn((String) null).when(parameter1).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter1).explode();
      doReturn((String) null).when(parameter1).in();
      doReturn((String) null).when(parameter1).name();
      doReturn(false).when(parameter1).required();
      doReturn((Schema) null, (Schema) null).when(parameter1).schema();
      doReturn((String) null).when(parameter1).style();
      parameterArray0[0] = parameter1;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      Components components0 = new Components();
      String string6 = null;
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Header header0 = new Header();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.addHeaderObject(string0, header0);
      Map<String, Header> map1 = apiResponse0.getHeaders();
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.headers(map1);
      Components components1 = components0.addResponses(string6, apiResponse2);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "XTyvt`mR%)*";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string1 = "h'->_QA<?'$%!fU-";
      String string2 = ">z]";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string1).when(info0).termsOfService();
      doReturn(string0, string2).when(info0).title();
      doReturn(string0, string0).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      String[] stringArray0 = new String[7];
      String string3 = "";
      stringArray0[0] = string3;
      String string4 = "";
      stringArray0[1] = string4;
      String string5 = "";
      stringArray0[2] = string5;
      String string6 = "";
      stringArray0[3] = string6;
      String string7 = "";
      stringArray0[4] = string7;
      String string8 = "SH@$edNRIW\"?^d<`";
      stringArray0[5] = string8;
      String string9 = "8-7M'%|)";
      stringArray0[6] = string9;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string10 = ",";
      String string11 = "Nq-j4z;aY%;F=>4I^m";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      String string12 = "': type: value deserializer of type ";
      io.swagger.oas.annotations.info.License license1 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      String string13 = "OX3t=FUk[u]5~DT5";
      io.swagger.oas.annotations.info.Info info1 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact1).when(info1).contact();
      doReturn(string10, string12).when(info1).description();
      doReturn(license1).when(info1).license();
      doReturn(stringArray0[4]).when(info1).termsOfService();
      doReturn(string11, string13).when(info1).title();
      doReturn(string6).when(info1).version();
      Optional<Info> optional2 = OperationParser.getInfo(info1);
      io.swagger.oas.annotations.info.License license2 = null;
      Optional<License> optional3 = OperationParser.getLicense(license2);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema0);
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Components components0 = new Components();
      String string14 = "A%T<S2AaJ>q>'j3!R";
      Parameter parameter0 = new Parameter();
      Components components1 = components0.addParameters(string14, parameter0);
      String string15 = "Z?Woy%";
      Link link0 = new Link();
      Components components2 = components1.addLinks(string15, link0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.content(content1);
      Components components3 = components2.addResponses(string2, apiResponse1);
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      Components components4 = components3.addSchemas(string10, arraySchema1);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "XTyvt`mR%)*";
      String string1 = null;
      String string2 = "java.langjava.lang.Object";
      String string3 = "*XU9,/dp6K i]1)e";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(contact0).email();
      doReturn(string2, (String) null).when(contact0).name();
      doReturn(string3, (String) null).when(contact0).url();
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      String string4 = "h'->_QA<?'$%!fU-";
      String string5 = ">z]";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string4).when(info0).termsOfService();
      doReturn(string0, string5).when(info0).title();
      doReturn(string0, string0).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      String[] stringArray0 = new String[7];
      String string6 = "";
      stringArray0[0] = string6;
      String string7 = "";
      stringArray0[1] = string7;
      String string8 = "";
      stringArray0[2] = string8;
      String string9 = "";
      stringArray0[3] = string9;
      String string10 = "";
      stringArray0[4] = string10;
      String string11 = "SH@$edNRIW\"?^d<`";
      stringArray0[5] = string11;
      String string12 = "8-7M'%|)";
      stringArray0[6] = string12;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string13 = ",";
      String string14 = "Nq-j4z;aY%;F=>4I^m";
      String string15 = "F\",yg/uk/]";
      String string16 = ">r&<Swj 0zbTy9(`";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string15, (String) null).when(contact1).email();
      doReturn(string16, (String) null).when(contact1).name();
      doReturn(string3, (String) null).when(contact1).url();
      String string17 = "': type: value deserializer of type ";
      String string18 = "Qm}kH];U";
      String string19 = "#/components/schemas/";
      io.swagger.oas.annotations.info.License license1 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string18, (String) null).when(license1).name();
      doReturn(string19, (String) null).when(license1).url();
      String string20 = "OX3t=FUk[u]5~DT5";
      io.swagger.oas.annotations.info.Info info1 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact1).when(info1).contact();
      doReturn(string13, string17).when(info1).description();
      doReturn(license1).when(info1).license();
      doReturn(stringArray0[4]).when(info1).termsOfService();
      doReturn(string14, string20).when(info1).title();
      doReturn(string9).when(info1).version();
      Optional<Info> optional2 = OperationParser.getInfo(info1);
      io.swagger.oas.annotations.info.License license2 = null;
      Optional<License> optional3 = OperationParser.getLicense(license2);
      int int0 = 165;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema0);
      Content[] contentArray0 = new Content[4];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[3];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "<Pk57<";
      String string1 = "";
      String string2 = "': ";
      String string3 = "j>[D1M+^_YCI1";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(contact0).email();
      doReturn(string0, string3).when(contact0).name();
      doReturn(string1).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string4 = "";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string1;
      stringArray0[2] = string4;
      boolean boolean0 = true;
      String string5 = "d}#zR 7eXz+K-Mn:";
      String string6 = "YZ|";
      String string7 = "java.lang";
      String string8 = "io.swagge";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string7, (String) null).when(externalDocumentation0).description();
      doReturn(string8, (String) null).when(externalDocumentation0).url();
      int int0 = (-207);
      String string9 = "";
      String string10 = "!k)ocO8j13UW\"4(";
      String string11 = "Oi@gb^";
      boolean boolean1 = false;
      String string12 = "<U";
      boolean boolean2 = true;
      String string13 = "io.swagge";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean0).when(schema0).deprecated();
      doReturn(string0, string4).when(schema0).description();
      doReturn(string5, string6, string2, string1).when(schema0).example();
      doReturn(boolean0, boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[1]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string9).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string0).when(schema0).minimum();
      doReturn(stringArray0[0], string12).when(schema0).pattern();
      doReturn(boolean0, boolean2).when(schema0).readOnly();
      doReturn(string10, string4).when(schema0).ref();
      doReturn(string11, string13).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      boolean boolean3 = true;
      String string14 = " (through reference chain: ";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string6, (String) null).when(link0).operationId();
      doReturn(stringArray0[0]).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional2 = OperationParser.getLink(link0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[9];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string15 = null;
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string15, apiResponse1);
      String string16 = "";
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string16, header0);
      String string17 = "";
      Callback callback0 = new Callback();
      String string18 = "java.langio.swagger.oas.models.media.MediaType";
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string18, pathItem0);
      Callback callback2 = callback1.addPathItem(stringArray0[1], pathItem0);
      Components components3 = components2.addCallbacks(string17, callback2);
      Link link1 = new Link();
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      Link link2 = link1.server(server0);
      Map<String, Header> map0 = link2.getHeaders();
      Components components4 = components3.headers(map0);
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow";
      String string1 = "r':Zw,N#8yBvI}";
      ServerVariable[] serverVariableArray0 = new ServerVariable[2];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null).when(serverVariable0).name();
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[7];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string1, string0).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      String string2 = "io.swagger.jaxrs2.OperationParser";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string2;
      stringArray0[2] = string2;
      stringArray0[3] = string0;
      boolean boolean0 = false;
      String string3 = "Y`+!\"bm:zc=diwp_J5";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      int int0 = (-396);
      int int1 = (-409);
      String string4 = "@$,x(w";
      String string5 = "an\\ dA1V";
      boolean boolean1 = true;
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      String string0 = "java.langjava.lang.Object";
      Encoding encoding0 = new Encoding();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Header> map1 = apiResponse0.getHeaders();
      Encoding encoding1 = encoding0.headers(map1);
      Boolean boolean0 = Boolean.TRUE;
      Encoding encoding2 = encoding1.explode(boolean0);
      MediaType mediaType2 = mediaType1.addEncoding(string0, encoding2);
      String string1 = null;
      String string2 = "851LXt>dVM\"KX}7{";
      String string3 = "Gp~0'K8;G1pNb3N";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string1, string1).when(exampleObject0).name();
      doReturn(string2, (String) null).when(exampleObject0).summary();
      doReturn(string3, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[0];
      boolean boolean1 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0, boolean1).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "no description";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string1, callback0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components2 = components1.examples(map0);
      String string2 = "java.lang";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.description(string1);
      Components components3 = components2.addResponses(string2, apiResponse1);
      Components components4 = components1.examples(map0);
      int int0 = 0;
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>(int0);
      Components components5 = components3.securitySchemes(hashMap0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components5);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      OperationParser operationParser0 = new OperationParser();
      Map<String, Parameter> map2 = components0.getParameters();
      components1.setParameters(map2);
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      Content content0 = null;
      String string3 = "al9h>0Z";
      String string4 = "@rJ<>sox5239!";
      String string5 = "p|F1*z|K,Gh~";
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[7];
      String string6 = "m0e\\\"Z@W`Zn";
      String string7 = "java.lang";
      String string8 = "io.swagge";
      String string9 = "java.langio.swagger.jaxrs2.OperationParser";
      String string10 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string11 = null;
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string7, string2, string4, string6).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, string8, string1, string9, string10).when(link0).operationId();
      doReturn(string5, string11, operationParser0.DEFAULT_DESCRIPTION, string8, string10).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[0];
      String string12 = ",";
      String string13 = null;
      ApiResponse apiResponse2 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0).when(apiResponse2).content();
      doReturn(string3, string4, string2, string5).when(apiResponse2).description();
      doReturn((Object) linkArray0, (Object) linkArray1).when(apiResponse2).links();
      doReturn(operationParser0.MEDIA_TYPE, string12, operationParser0.COMPONENTS_REF, string13).when(apiResponse2).responseCode();
      apiResponseArray0[0] = apiResponse2;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      String string14 = "";
      RequestBody requestBody1 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody1).content();
      doReturn(string14).when(requestBody1).description();
      doReturn(boolean0, boolean1).when(requestBody1).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody1, components4);
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      HashMap<String, Callback> hashMap1 = new HashMap<String, Callback>();
      Components components6 = components0.callbacks(hashMap1);
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components6);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = null;
      Components components0 = new Components();
      Map<String, Parameter> map0 = components0.getParameters();
      Components components1 = components0.parameters(map0);
      String string0 = null;
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string0, header0);
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.name(string0);
      Components components3 = components2.addParameters(string0, parameter1);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components4 = components3.callbacks(hashMap0);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[0];
      Produces produces0 = null;
      Components components0 = new Components();
      Map<String, Callback> map0 = components0.getCallbacks();
      Components components1 = components0.callbacks(map0);
      String string0 = "?pp1[dR8$@z?@Ze";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string0, securityScheme0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Header> map1 = apiResponse0.getHeaders();
      Components components3 = components2.headers(map1);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map2 = components2.getRequestBodies();
      Components components4 = components3.requestBodies(map2);
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      MediaType mediaType0 = new MediaType();
      String string0 = "\\/n.'";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string0, example0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      MediaType mediaType2 = mediaType1.examples(hashMap0);
      Map<String, Encoding> map1 = mediaType2.getEncoding();
      MediaType mediaType3 = mediaType2.encoding(map1);
      Map<String, Encoding> map2 = mediaType1.getEncoding();
      MediaType mediaType4 = mediaType2.encoding(map2);
      MediaType mediaType5 = mediaType4.example(string0);
      mediaType5.setEncoding(map2);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType5, exampleObject0);
      OperationParser operationParser0 = new OperationParser();
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional3 = OperationParser.getLink(link0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema0);
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema1).maxItems();
      doReturn(0, 0).when(arraySchema1).minItems();
      doReturn((Schema) null).when(arraySchema1).schema();
      doReturn(false).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional5 = OperationParser.getArraySchema(arraySchema1);
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = null;
      Components components0 = new Components();
      String string1 = "%,['4hm9h7T%#oq";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string1, header0);
      Map<String, Header> map3 = components1.getHeaders();
      Components components2 = components0.headers(map3);
      String string2 = "";
      Callback callback0 = new Callback();
      Components components3 = components2.addCallbacks(string2, callback0);
      Parameter parameter0 = new Parameter();
      Components components4 = components3.addParameters(operationParser0.DEFAULT_DESCRIPTION, parameter0);
      Components components5 = components4.examples(hashMap0);
      Optional<ApiResponses> optional6 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "V._d\\6_RnI1n#5s&";
      stringArray0[0] = string0;
      String string1 = "7&:4]^ap~;vpp";
      stringArray0[1] = string1;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<Info> optional1 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<License> optional2 = OperationParser.getLicense(license0);
      OperationParser operationParser0 = new OperationParser();
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContent(content0, produces0, produces0, components0);
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional4 = OperationParser.getServers(serverArray0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<License> optional0 = OperationParser.getLicense(license0);
      OperationParser operationParser0 = new OperationParser();
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      RequestBody requestBody0 = null;
      Components components0 = new Components();
      String string0 = "";
      Parameter parameter0 = new Parameter();
      Components components1 = components0.addParameters(string0, parameter0);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components2 = components1.responses(apiResponses0);
      io.swagger.oas.models.media.Schema<Link> schema0 = null;
      Components components3 = components2.addSchemas(apiResponses0.DEFAULT, schema0);
      Map<String, Link> map0 = components0.getLinks();
      Components components4 = components3.links(map0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      Server[] serverArray0 = new Server[7];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Content[] contentArray0 = null;
      Components components0 = new Components();
      String string0 = "f#D(\"R[Nd-^<X1REA";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.links(map0);
      Parameter parameter0 = new Parameter();
      String string1 = "";
      Parameter parameter1 = parameter0.$ref(string1);
      Components components3 = components2.addParameters(string0, parameter1);
      String string2 = "";
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = null;
      Components components4 = components3.addSchemas(string2, schema0);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[1];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components1 = components0.schemas(map0);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components2 = components1.securitySchemes(hashMap0);
      String string0 = "QR:$3+;R5I%^\"Ic";
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.description(string0);
      Components components3 = components2.addParameters(string0, parameter1);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map1 = components2.getResponses();
      Components components4 = components3.responses(map1);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<Info> optional1 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Components components0 = null;
      Optional<List<Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components0);
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray0);
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<License> optional4 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      String string0 = "java.lang";
      Callback callback0 = new Callback();
      String string1 = "java.lang";
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string1, pathItem0);
      Components components1 = components0.addCallbacks(string0, callback1);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components1);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<Info> optional1 = OperationParser.getInfo(info0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      Components components0 = new Components();
      String string0 = "#/components/schemas/";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string0, securityScheme0);
      String string1 = "%";
      Header header0 = new Header();
      Header.StyleEnum header_StyleEnum0 = Header.StyleEnum.SIMPLE;
      Header header1 = header0.style(header_StyleEnum0);
      Components components3 = components2.addHeaders(string1, header1);
      String string2 = "";
      Example example0 = new Example();
      Header header2 = header0.$ref(string2);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string2);
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.items(arraySchema0);
      example0.setValue(arraySchema2);
      String string3 = "";
      Example example1 = example0.summary(string3);
      Components components4 = components3.addExamples(string2, example1);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Server[] serverArray0 = new Server[9];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      serverArray0[8] = serverArray0[7];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      MediaType mediaType0 = new MediaType();
      String string0 = "";
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      String string1 = "Root name '%s' does not match expected ('%s') for type %s";
      Parameter parameter0 = new Parameter();
      Boolean boolean0 = null;
      io.swagger.oas.models.media.Content content0 = null;
      parameter0.setContent(content0);
      Parameter parameter1 = parameter0.allowReserved(boolean0);
      Example example0 = new Example();
      Parameter parameter2 = parameter1.addExamples(string1, example0);
      Parameter parameter3 = parameter2.name(string0);
      Map<String, Example> map0 = parameter3.getExamples();
      mediaType0.setExamples(map0);
      MediaType mediaType2 = mediaType1.example(string1);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType2, exampleObject0);
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content1).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, Header> map1 = null;
      Components components1 = components0.headers(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content1, produces0, produces0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components1 = components0.securitySchemes(map0);
      String string0 = "];<KwQ/O{>i";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components2 = components1.addResponses(string0, apiResponse0);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map1 = components0.getResponses();
      Components components3 = components2.responses(map1);
      Parameter parameter1 = new Parameter();
      Map<String, Link> map2 = apiResponse0.getLinks();
      Components components4 = components3.links(map2);
      Parameter parameter2 = parameter1.example(string0);
      String string1 = components2.toString();
      Parameter.StyleEnum parameter_StyleEnum0 = Parameter.StyleEnum.LABEL;
      Parameter parameter3 = parameter2.style(parameter_StyleEnum0);
      Components components5 = components3.addParameters(string0, parameter3);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.parameters.RequestBody> map0 = null;
      Components components1 = components0.requestBodies(map0);
      Map<String, Callback> map1 = null;
      Components components2 = components1.callbacks(map1);
      Map<String, Link> map2 = components1.getLinks();
      Components components3 = components2.links(map2);
      String string0 = "Q!d";
      Parameter parameter0 = new Parameter();
      String string1 = "";
      Parameter parameter1 = parameter0.$ref(string1);
      Boolean boolean0 = Boolean.valueOf(string1);
      String string2 = parameter1.toString();
      Parameter parameter2 = parameter1.deprecated(boolean0);
      Components components4 = components3.addParameters(string0, parameter2);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "+'\\^q)SN";
      Link link0 = new Link();
      Map<String, Header> map0 = link0.getHeaders();
      Link link1 = link0.headers(map0);
      Components components1 = components0.addLinks(string0, link1);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      Contact contact1 = null;
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact1);
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      io.swagger.oas.annotations.info.Info info0 = null;
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      io.swagger.oas.annotations.info.License license0 = null;
      Optional<License> optional2 = OperationParser.getLicense(license0);
      Server[] serverArray0 = new Server[7];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      Optional<io.swagger.oas.models.servers.Server> optional4 = OperationParser.getServer(serverArray0[1]);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.parameters.RequestBody> map0 = components0.getRequestBodies();
      components0.setRequestBodies(map0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[4];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[6];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      Server[] serverArray0 = new Server[6];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = null;
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional2 = OperationParser.getLink(link0);
      MediaType mediaType0 = new MediaType();
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      String string0 = "org.apache.xalan.xsltc.trax.TemplatesImpl";
      Encoding encoding0 = new Encoding();
      String string1 = "";
      mediaType0.setExample(string1);
      Map<String, Header> map1 = encoding0.getHeaders();
      Encoding encoding1 = encoding0.headers(map1);
      Encoding encoding2 = hashMap0.put(string0, encoding1);
      MediaType mediaType1 = mediaType0.encoding(hashMap0);
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.parameters.RequestBody> schema0 = null;
      mediaType1.setSchema(schema0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType1, exampleObject0);
      Optional<List<io.swagger.oas.models.servers.Server>> optional4 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = null;
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components0);
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<License> optional1 = OperationParser.getLicense(license0);
      io.swagger.oas.annotations.links.Link link0 = null;
      Optional<Link> optional2 = OperationParser.getLink(link0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional3 = OperationParser.getContact(contact0);
      ArraySchema arraySchema0 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema0);
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Components components0 = new Components();
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      String string0 = "";
      Parameter parameter1 = new Parameter();
      Components components2 = components1.addParameters(string0, parameter1);
      HashMap<String, Callback> hashMap1 = new HashMap<String, Callback>();
      Components components3 = components2.callbacks(hashMap1);
      HashMap<String, Parameter> hashMap2 = new HashMap<String, Parameter>();
      Components components4 = components3.parameters(hashMap2);
      Optional<Parameter> optional0 = OperationParser.getParameter(parameter0, components4);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "@@r<mW^UbL\\OZ2/R9Q";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      MediaType mediaType0 = new MediaType();
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      Map<String, Encoding> map1 = null;
      MediaType mediaType2 = mediaType1.encoding(map1);
      String string1 = "io.swagger.oas.models.media.StringSchema";
      Example example0 = null;
      MediaType mediaType3 = mediaType2.addExamples(string1, example0);
      String string2 = "&1>;~UZ Fw:wA$74";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType3, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = null;
      String string1 = "y$k:isGk7y{k";
      String string2 = "*/*";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0).when(info0).description();
      doReturn((io.swagger.oas.annotations.info.License) null).when(info0).license();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string1, (String) null).when(info0).title();
      doReturn(string2, (String) null).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = string2;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      boolean boolean0 = false;
      String string3 = "7!WJ9jaS[Z{;2@&0zf";
      String string4 = "su-X]8";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string5 = "p!8VyOM(";
      int int0 = (-2133);
      String string6 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string7 = null;
      boolean boolean1 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string3, (String) null).when(schema0).description();
      doReturn(string1, string4, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string5, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(stringArray0[1]).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string6).when(schema0).minimum();
      doReturn(string7).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(string3, (String) null).when(schema0).ref();
      doReturn(string3, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      MediaType mediaType0 = new MediaType();
      Components components0 = new Components();
      Map<String, Example> map0 = components0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      io.swagger.oas.models.media.Schema<Integer> schema1 = new io.swagger.oas.models.media.Schema<Integer>();
      MediaType mediaType2 = mediaType1.schema(schema1);
      String string8 = "p)LN'G/B#l^\"*m";
      Example example0 = new Example();
      MediaType mediaType3 = mediaType2.addExamples(string8, example0);
      Map<String, Encoding> map1 = mediaType3.getEncoding();
      MediaType mediaType4 = mediaType2.encoding(map1);
      String string9 = "RxZ$'g]-V9W\\";
      MediaType mediaType5 = mediaType4.example(string9);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType5, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "#/components/schemas/";
      MediaType mediaType1 = mediaType0.example(string0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      String string1 = "io.swagger.jaxrs2.OperationParser";
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      boolean boolean0 = true;
      String string2 = "";
      ExternalDocumentation externalDocumentation0 = null;
      String string3 = "o6B2I#";
      int int0 = (-2133);
      String string4 = "*/*";
      String string5 = "";
      boolean boolean1 = false;
      String string6 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(stringArray0[0], (String) null).when(schema0).description();
      doReturn(string2, stringArray0[4], (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string3, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string4).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string5).when(schema0).minimum();
      doReturn(stringArray0[0], (String) null).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string6).when(schema0).ref();
      doReturn(string6).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[8];
      String string7 = null;
      String string8 = "";
      String string9 = "e:iEK-NMwjn";
      String string10 = "q1F8P{L";
      String string11 = null;
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string8, string6, string9, string10).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string0, string8, string4, string0, string2).when(link0).operationId();
      doReturn(stringArray0[2], stringArray0[3], string11, stringArray0[2], string4).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = ", contains ";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string1 = null;
      String[] stringArray0 = new String[4];
      String string2 = "[xr[.RGU";
      stringArray0[0] = string2;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      stringArray0[3] = string0;
      boolean boolean0 = true;
      String string3 = "";
      String string4 = "\\*)X#8&]";
      boolean boolean1 = true;
      boolean boolean2 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string5 = "";
      int int0 = 6;
      String string6 = "): has to be escaped using backslash to be included in ";
      String string7 = "*yuH[k\"80~5x%t\"S";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string3).when(schema0).description();
      doReturn(string4, string0, (String) null, (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean2, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string5).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string4).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(stringArray0[0]).when(schema0).minimum();
      doReturn(string6, (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(string7, (String) null).when(schema0).ref();
      doReturn(string1).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string8 = "@\\u";
      String string9 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string6, (String) null).when(contact0).email();
      doReturn(string8, (String) null).when(contact0).name();
      doReturn(string9).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      boolean boolean3 = true;
      Components components0 = new Components();
      Map<String, Example> map1 = components0.getExamples();
      Components components1 = components0.examples(map1);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map2 = components1.getRequestBodies();
      Components components2 = components0.requestBodies(map2);
      String string10 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Callback callback0 = null;
      Components components3 = components2.addCallbacks(string10, callback0);
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap0 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Link link0 = new Link();
      Map<String, Header> map3 = link0.getHeaders();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.headers(map3);
      String string11 = "/bot?VHY& <GZp!&,wn";
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.description(string11);
      io.swagger.oas.models.responses.ApiResponse apiResponse3 = apiResponse2.link(string5, link0);
      io.swagger.oas.models.media.Content content0 = null;
      io.swagger.oas.models.responses.ApiResponse apiResponse4 = apiResponse3.content(content0);
      io.swagger.oas.models.responses.ApiResponse apiResponse5 = hashMap0.put(stringArray0[3], apiResponse4);
      Components components4 = components3.responses(hashMap0);
      Components components5 = components4.examples(map1);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "no description";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string1, callback0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components2 = components1.examples(map0);
      String string2 = "java.lang";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.description(string1);
      Components components3 = components2.addResponses(string2, apiResponse1);
      Components components4 = components1.examples(map0);
      int int0 = 0;
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>(int0);
      Components components5 = components3.securitySchemes(hashMap0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components5);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      OperationParser operationParser0 = new OperationParser();
      Map<String, Parameter> map2 = components0.getParameters();
      components1.setParameters(map2);
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      Content content0 = null;
      String string3 = "al9h>0Z";
      String string4 = "@rJ<>sox5239!";
      ApiResponse apiResponse2 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0).when(apiResponse2).content();
      doReturn(string3, string4, (String) null, (String) null).when(apiResponse2).description();
      doReturn((Object) null, (Object) null).when(apiResponse2).links();
      doReturn((String) null, (String) null).when(apiResponse2).responseCode();
      apiResponseArray0[0] = apiResponse2;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      String string5 = "";
      RequestBody requestBody1 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody1).content();
      doReturn(string5).when(requestBody1).description();
      doReturn(boolean0, false).when(requestBody1).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody1, components4);
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      HashMap<String, Callback> hashMap1 = new HashMap<String, Callback>();
      Components components6 = components0.callbacks(hashMap1);
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components6);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "XTyvt`mR%)*";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((io.swagger.oas.annotations.info.License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string0, (String) null).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      String[] stringArray0 = new String[7];
      String string1 = "";
      stringArray0[0] = string1;
      String string2 = "";
      stringArray0[1] = string2;
      String string3 = "";
      stringArray0[2] = string3;
      String string4 = "";
      stringArray0[3] = string4;
      String string5 = "";
      stringArray0[4] = string5;
      String string6 = "SH@$edNRIW\"?^d<`";
      stringArray0[5] = string6;
      String string7 = "8-7M'%|)";
      stringArray0[6] = string7;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string8 = ",";
      String string9 = "Nq-j4z;aY%;F=>4I^m";
      io.swagger.oas.annotations.info.Info info1 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info1).contact();
      doReturn(string8, (String) null).when(info1).description();
      doReturn((io.swagger.oas.annotations.info.License) null).when(info1).license();
      doReturn(stringArray0[4]).when(info1).termsOfService();
      doReturn(string9, (String) null).when(info1).title();
      doReturn(string4).when(info1).version();
      Optional<Info> optional2 = OperationParser.getInfo(info1);
      io.swagger.oas.annotations.info.License license0 = null;
      Optional<License> optional3 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "^";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string0, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      String string1 = "com.fasterxml.jackson.core.JsonFactory$Feature";
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      boolean boolean0 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string2 = "io.swagger.jaxrs2.OperationParser";
      int int0 = 1560;
      String string3 = "";
      int int1 = 0;
      String string4 = "";
      String string5 = "L9pm90N6SH<FNdu|";
      boolean boolean1 = true;
      String string6 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(stringArray0[4]).when(schema0).description();
      doReturn(string1, stringArray0[2], (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string3).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string5, (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(stringArray0[0]).when(schema0).ref();
      doReturn(string6).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string7 = "";
      String string8 = "Od9?V#Hz0TA]]$(";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(stringArray0[1], (String) null).when(info0).description();
      doReturn((io.swagger.oas.annotations.info.License) null).when(info0).license();
      doReturn(stringArray0[5]).when(info0).termsOfService();
      doReturn(string7).when(info0).title();
      doReturn(string8, (String) null).when(info0).version();
      Optional<Info> optional1 = OperationParser.getInfo(info0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string8, string4).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string9 = "Can not deserialize instance of %s out of %s token";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string9, callback0);
      Link link0 = new Link();
      Map<String, Header> map0 = link0.getHeaders();
      Components components2 = components1.headers(map0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[1];
      String string10 = "";
      String string11 = "";
      String string12 = null;
      io.swagger.oas.annotations.links.Link link1 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string10).when(link1).description();
      doReturn(string11).when(link1).operationId();
      doReturn(string12).when(link1).operationRef();
      linkArray0[0] = link1;
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
      Components components3 = components2.links(map1);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map2 = components3.getRequestBodies();
      Components components4 = components2.requestBodies(map2);
      Map<String, Parameter> map3 = components1.getParameters();
      Components components5 = components4.parameters(map3);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      Server[] serverArray0 = new Server[7];
      String string0 = "WRAP_EXCEPTIONS";
      String string1 = "";
      String string2 = "";
      String string3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string2).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = ",}s=IC";
      boolean boolean0 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string0, securityScheme0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components3 = components2.examples(map0);
      Map<String, SecurityScheme> map1 = components2.getSecuritySchemes();
      Components components4 = components3.securitySchemes(map1);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      OperationParser operationParser0 = new OperationParser();
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "Can not use FormatSchema of type ";
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<License> optional0 = OperationParser.getLicense(license0);
      String string1 = "java.lang";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      boolean boolean0 = true;
      String string2 = "0KKj=ttC";
      boolean boolean1 = true;
      boolean boolean2 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string3 = "]...[";
      int int0 = (-1);
      String string4 = "ZNh.^y)v";
      String string5 = "";
      String string6 = "no description";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string0, (String) null).when(schema0).description();
      doReturn(string2, string2, (String) null, (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string3, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string4).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string5).when(schema0).minimum();
      doReturn(string2, (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(string5).when(schema0).ref();
      doReturn(string6, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      String string7 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string7).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String[] stringArray1 = new String[4];
      String string8 = "_|jeg)o8~z9xWMnzmfR";
      stringArray1[0] = string8;
      String string9 = "2hAWiy7ys=|1~";
      stringArray1[1] = string9;
      String string10 = "\\osl`}m?`";
      stringArray1[2] = string10;
      String string11 = "&Yht-\\;7";
      stringArray1[3] = string11;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray1);
      ApiResponse[] apiResponseArray0 = new ApiResponse[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string12 = "ix(Y1s<F[F";
      String string13 = null;
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string6, string12).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[1];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[5] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples(string11, example0);
      Operation operation0 = new Operation();
      Map<String, Callback> map1 = operation0.getCallbacks();
      Components components2 = components1.callbacks(map1);
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Link> map2 = apiResponse1.getLinks();
      Components components3 = components2.links(map2);
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      Components components4 = components3.requestBodies(hashMap0);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Link> map0 = apiResponse0.getLinks();
      Components components1 = components0.links(map0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = components1.getRequestBodies();
      Components components2 = components1.requestBodies(map1);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components3 = components2.parameters(hashMap0);
      String string0 = "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components4 = components3.addSecuritySchemes(string0, securityScheme0);
      Map<String, Header> map2 = components4.getHeaders();
      Components components5 = components3.headers(map2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      int int0 = 488;
      int int1 = (-996);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      MediaType mediaType0 = new MediaType();
      String string0 = "";
      MediaType mediaType1 = mediaType0.example(string0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      mediaType1.setExamples(hashMap0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(exampleObject0).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType1, exampleObject0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples(string0, example0);
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(string0, parameter0);
      Operation operation0 = new Operation();
      Map<String, Callback> map0 = operation0.getCallbacks();
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      Content[] contentArray0 = null;
      Components components0 = new Components();
      String string0 = "class Link {\n";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string0, example0);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components2 = components1.schemas(map0);
      String string1 = "!|~;5-5YJ.2MM)ekN";
      Link link0 = new Link();
      Link link1 = link0.$ref(string1);
      Components components3 = components2.addLinks(string1, link1);
      String string2 = "(mLpWEk&kKZ7oR@";
      Header header0 = new Header();
      MediaType mediaType0 = new MediaType();
      Parameter parameter0 = new Parameter();
      Map<String, Example> map1 = parameter0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map1);
      io.swagger.oas.models.media.Schema<Integer> schema0 = null;
      MediaType mediaType2 = mediaType1.schema(schema0);
      Map<String, Object> map2 = mediaType2.getExtensions();
      components0.setExtensions(map2);
      Header header1 = header0.$ref(string1);
      Components components4 = components3.addHeaders(string2, header1);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
      MediaType mediaType3 = new MediaType();
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType4 = mediaType3.encoding(hashMap0);
      String string3 = "Xr";
      MediaType mediaType5 = mediaType4.example(string3);
      String string4 = "com.fasterxml.jackson.databind.ser.std.FileSerializer";
      Encoding encoding0 = new Encoding();
      MediaType mediaType6 = mediaType5.addEncoding(string4, encoding0);
      String string5 = "EkdK";
      MediaType mediaType7 = mediaType6.addExamples(string5, example0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType7, exampleObject0);
      int int0 = (-387);
      int int1 = 525;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[6];
      boolean boolean0 = false;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[0];
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      boolean boolean2 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string0 = "\"Iqs";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1).when(parameter0).allowReserved();
      doReturn(boolean1).when(parameter0).deprecated();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(parameter0).description();
      doReturn(operationParser0.COMMA, (String) null).when(parameter0).in();
      doReturn(operationParser0.COMMA, (String) null).when(parameter0).name();
      doReturn(boolean2).when(parameter0).required();
      doReturn(string0, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      Components components0 = new Components();
      io.swagger.oas.models.parameters.RequestBody requestBody0 = null;
      Components components1 = components0.addRequestBodies(operationParser0.DEFAULT_DESCRIPTION, requestBody0);
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      ApiResponses apiResponses2 = apiResponses1._default(apiResponse0);
      ApiResponses apiResponses3 = apiResponses2.addApiResponse(apiResponses0.DEFAULT, apiResponse0);
      ApiResponses apiResponses4 = apiResponses3.addApiResponse(apiResponses2.DEFAULT, apiResponse0);
      Components components2 = components1.responses(apiResponses4);
      String string1 = "{(e|";
      Parameter parameter1 = new Parameter();
      Boolean boolean3 = Boolean.TRUE;
      Parameter parameter2 = parameter1.deprecated(boolean3);
      Parameter parameter3 = parameter2.explode(boolean3);
      Components components3 = components2.addParameters(string1, parameter3);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components3);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.\"IQS
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      ArraySchema arraySchema0 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[3];
      boolean boolean0 = true;
      boolean boolean1 = false;
      Content[] contentArray0 = new Content[0];
      String string0 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.TRUE;
      Explode explode2 = Explode.TRUE;
      String string1 = null;
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null, (Class) null, (Class) null, (Class) null, (Class) null).when(schema1).implementation();
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false, false, false, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false, false).when(parameter0).allowReserved();
      doReturn(arraySchema0, (ArraySchema) null, (ArraySchema) null).when(parameter0).array();
      doReturn((Object) contentArray0, (Object) null, (Object) null).when(parameter0).content();
      doReturn(boolean1, false, false).when(parameter0).deprecated();
      doReturn(string0, (String) null, (String) null).when(parameter0).description();
      doReturn(explode0, explode1, explode2, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn(string0, (String) null, (String) null).when(parameter0).in();
      doReturn(string1, (String) null, (String) null).when(parameter0).name();
      doReturn(boolean2, false, false, false, false).when(parameter0).required();
      doReturn(schema0, schema1, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn(string1, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      Components components0 = new Components();
      String string2 = "io.swagger.jaxrs2.OperationParser";
      Parameter parameter1 = new Parameter();
      Components components1 = components0.addParameters(string2, parameter1);
      String string3 = "oq#o";
      Callback callback0 = new Callback();
      Components components2 = components1.addCallbacks(string3, callback0);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = components2.getResponses();
      Components components3 = components2.responses(map0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = null;
      Components components4 = components3.schemas(map1);
      Optional<List<Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components4);
      Server[] serverArray0 = new Server[3];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "";
      String string1 = "*/*";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(contact0).email();
      doReturn(string0).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string2 = "A%vd:Olq.-qxq3]H '";
      String string3 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2).when(server0).description();
      doReturn(string2, string3).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(externalDocumentation0).description();
      doReturn(string0).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[1];
      String string1 = "";
      String string2 = "6{";
      String string3 = "68~r$hT#w`/0q";
      String string4 = "eG";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string2, string0).when(link0).operationId();
      doReturn(string3).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(server0).description();
      doReturn(string2, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "e{wN";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      boolean boolean0 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "";
      Parameter parameter0 = new Parameter();
      Components components1 = components0.addParameters(string1, parameter0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string1, securityScheme0);
      io.swagger.oas.models.media.Schema<Info> schema0 = new io.swagger.oas.models.media.Schema<Info>();
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema0.getProperties();
      Components components3 = components2.schemas(map1);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map2 = null;
      Parameter parameter1 = parameter0.in(string1);
      Components components4 = components3.requestBodies(map2);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Optional<List<Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components0);
      String string2 = "com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string2, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(operationParser0.COMMA, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      boolean boolean1 = true;
      String string0 = "S";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.TRUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string0, (String) null).when(parameter0).name();
      doReturn(boolean0, false).when(parameter0).required();
      doReturn(string0, (String) null).when(parameter0).style();
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components1 = components0.securitySchemes(map0);
      String string1 = null;
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components2 = components1.addResponses(string1, apiResponse0);
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = null;
      Components components3 = components2.requestBodies(map1);
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.example(string1);
      Map<String, Example> map2 = mediaType1.getExamples();
      Components components4 = components3.examples(map2);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.S
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      MediaType mediaType0 = null;
      String string0 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[6];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      String string1 = "\"zy*eV";
      boolean boolean1 = false;
      Schema schema0 = null;
      String string2 = "";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string3 = "";
      io.swagger.oas.models.media.Schema<OperationParser> schema1 = new io.swagger.oas.models.media.Schema<OperationParser>();
      Components components1 = components0.addSchemas(string3, schema1);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Content[] contentArray1 = new Content[3];
      contentArray1[0] = contentArray0[5];
      contentArray1[1] = content0;
      contentArray1[2] = content0;
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray1, components0);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "A2Y";
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      String string1 = ">Fd(;rm7";
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, string1).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      io.swagger.oas.models.media.Schema<Info> schema0 = new io.swagger.oas.models.media.Schema<Info>();
      Map<String, io.swagger.oas.models.media.Schema> map0 = schema0.getProperties();
      Components components1 = components0.schemas(map0);
      String string2 = "";
      Example example0 = new Example();
      Components components2 = components1.addExamples(string2, example0);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components3 = components2.callbacks(hashMap0);
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string2, pathItem0);
      Callback callback2 = callback1.addPathItem(string2, pathItem0);
      String string3 = "";
      Callback callback3 = callback2.addPathItem(string3, pathItem0);
      String string4 = "m/L=R\\!g:Ng'11_jr";
      Callback callback4 = callback3.addPathItem(string4, pathItem0);
      Callback callback5 = hashMap0.put(string2, callback4);
      String string5 = "com.fasterxml.jackson.databind.node.BaseJsonNode";
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.description(string5);
      Parameter parameter2 = parameter1.schema(schema0);
      Components components4 = components3.addParameters(string5, parameter2);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      int int0 = (-883);
      int int1 = (-776);
      Class<Info> class0 = Info.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = null;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      int int0 = (-1848);
      int int1 = (-2176);
      int int2 = (-1867);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Contact contact0 = null;
      String[] stringArray0 = new String[1];
      String string0 = "x#xMp*1n^n8mS";
      stringArray0[0] = string0;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      Content[] contentArray0 = new Content[3];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[8];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      exampleObjectArray0[7] = exampleObjectArray0[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = components0.getResponses();
      Components components1 = components0.responses(map0);
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components1);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = "-n,&di";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string0, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string1 = "min";
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      Optional<License> optional1 = OperationParser.getLicense(license0);
      String string2 = "/L";
      io.swagger.oas.annotations.info.License license1 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(license1).name();
      doReturn(string0, (String) null).when(license1).url();
      Optional<License> optional2 = OperationParser.getLicense(license1);
      int int0 = Integer.MAX_VALUE;
      int int1 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string3 = "d>Hln7Wk|6w`&\\";
      String string4 = "4Doi3{)H";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string3, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components1 = components0.parameters(hashMap0);
      String string5 = "BIG_INTEGER";
      Callback callback0 = new Callback();
      Components components2 = components1.addCallbacks(string5, callback0);
      Encoding encoding0 = new Encoding();
      Map<String, Header> map1 = encoding0.getHeaders();
      Components components3 = components2.headers(map1);
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map2 = arraySchema1.getProperties();
      Components components4 = components3.schemas(map2);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      boolean boolean0 = false;
      String string1 = null;
      String string2 = "no description";
      String string3 = "io.swagger.jackson.SwaggerAnnotationIntrospector";
      boolean boolean1 = false;
      String string4 = "R\\#X\\-J)6*djCV_<";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[2]).when(externalDocumentation0).description();
      doReturn(string4, (String) null).when(externalDocumentation0).url();
      int int0 = 1853;
      String string5 = "Can not handle managed/back reference '";
      int int1 = (-576);
      String string6 = null;
      String string7 = "ra9x";
      String string8 = null;
      String string9 = "#/components/schemas/";
      String string10 = "j]llaL?L{xIar";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string2, string3, stringArray0[1]).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[2]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, 0).when(schema0).maxProperties();
      doReturn(string5).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string6).when(schema0).minimum();
      doReturn(string7, string10).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string8).when(schema0).ref();
      doReturn(string9, string4).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string11 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string12 = "S(Oo*yT5hPwz";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(stringArray0[5]).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string11).when(info0).title();
      doReturn(string3, string12).when(info0).version();
      Optional<Info> optional1 = OperationParser.getInfo(info0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string13 = "b`I|5";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string14 = "Can not deserialize instance of %s out of %s token";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string14, callback0);
      Link link0 = new Link();
      Map<String, Header> map0 = link0.getHeaders();
      Components components2 = components1.headers(map0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[1];
      String string15 = "";
      String string16 = "5X$C^c\\J\"n'k+/";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      int int0 = 2;
      int int1 = 6;
      int int2 = Integer.MAX_VALUE;
      Class<Link> class0 = Link.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      MediaType mediaType0 = new MediaType();
      String string1 = "\\/n.'";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string1, example0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      MediaType mediaType2 = mediaType1.examples(hashMap0);
      Map<String, Encoding> map1 = mediaType2.getEncoding();
      MediaType mediaType3 = mediaType2.encoding(map1);
      Map<String, Encoding> map2 = mediaType1.getEncoding();
      MediaType mediaType4 = mediaType2.encoding(map2);
      MediaType mediaType5 = mediaType4.example(string1);
      mediaType5.setEncoding(map2);
      String string2 = "Incompatible types: declared root type (%s) vs %s";
      String string3 = "l&uLY:Ta";
      String string4 = "";
      String string5 = "";
      String string6 = "";
      String string7 = "6E7lQmGI*#2Eq6M:";
      String string8 = "no description";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(exampleObject0).externalValue();
      doReturn(string2, string4, string5).when(exampleObject0).name();
      doReturn(string7, (String) null).when(exampleObject0).summary();
      doReturn(string8, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType5, exampleObject0);
      OperationParser operationParser0 = new OperationParser();
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      String string9 = "";
      String string10 = "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig";
      String string11 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string9).when(link0).description();
      doReturn(string10, string6).when(link0).operationId();
      doReturn(string11).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      Optional<Link> optional3 = OperationParser.getLink(link0);
      String[] stringArray0 = new String[18];
      stringArray0[0] = string2;
      String string12 = null;
      boolean boolean1 = false;
      boolean boolean2 = true;
      String string13 = "#/components/schemas/";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string13, (String) null).when(externalDocumentation0).description();
      doReturn(string11, (String) null).when(externalDocumentation0).url();
      int int3 = 166;
      String string14 = "io.swagger.util.ResponseDeserializer";
      String string15 = "";
      String string16 = "";
      boolean boolean3 = true;
      String string17 = "";
      int int4 = (-2082);
      int int5 = 2400;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string11, string16).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean0).when(schema2).deprecated();
      doReturn(string12).when(schema2).description();
      doReturn(string12, operationParser0.COMMA, string1).when(schema2).example();
      doReturn(boolean1).when(schema2).exclusiveMaximum();
      doReturn(boolean2, boolean3).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema2).externalDocs();
      doReturn(string2, string17).when(schema2).format();
      doReturn(int3).when(schema2).maxLength();
      doReturn(int4).when(schema2).maxProperties();
      doReturn(stringArray0[0]).when(schema2).maximum();
      doReturn(int0, int5).when(schema2).minProperties();
      doReturn(string11).when(schema2).minimum();
      doReturn(string14, string10).when(schema2).pattern();
      doReturn(boolean1).when(schema2).readOnly();
      doReturn(string15).when(schema2).ref();
      doReturn(string1, stringArray0[0]).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema2);
      int int6 = 713;
      int int7 = 2;
      Class<io.swagger.oas.models.media.ArraySchema> class1 = io.swagger.oas.models.media.ArraySchema.class;
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      int int8 = 2;
      Schema schema4 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema4).implementation();
      boolean boolean4 = false;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int6, int8).when(arraySchema1).maxItems();
      doReturn(int3, int7).when(arraySchema1).minItems();
      doReturn(schema3, schema4).when(arraySchema1).schema();
      doReturn(boolean2, boolean4).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional5 = OperationParser.getArraySchema(arraySchema1);
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      Schema schema5 = null;
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = "io.swagger.jaxrs2.OperationParser";
      String string1 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string1).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string1).when(info0).termsOfService();
      doReturn(string0, string0).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      RequestBody requestBody0 = null;
      Components components0 = new Components();
      String string2 = "";
      Parameter parameter0 = new Parameter();
      Components components1 = components0.addParameters(string2, parameter0);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components2 = components1.responses(apiResponses0);
      io.swagger.oas.models.media.Schema<Link> schema0 = null;
      Components components3 = components2.addSchemas(apiResponses0.DEFAULT, schema0);
      Map<String, Link> map0 = components0.getLinks();
      Components components4 = components3.links(map0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      Server[] serverArray0 = new Server[7];
      String string3 = "ALLOW_UNQUOTED_CONTROL_CHARS";
      String string4 = "~-@04gFypC";
      String string5 = "cw.hk";
      String string6 = null;
      ServerVariable[] serverVariableArray0 = new ServerVariable[3];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn(string3, string4, (String) null, (String) null, (String) null).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      int int0 = 2;
      int int1 = 6;
      int int2 = Integer.MAX_VALUE;
      Class<OperationParser> class0 = OperationParser.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      MediaType mediaType0 = new MediaType();
      String string1 = "\\/n.'";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string1, example0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      MediaType mediaType2 = mediaType1.examples(hashMap0);
      Map<String, Encoding> map1 = mediaType2.getEncoding();
      MediaType mediaType3 = mediaType2.encoding(map1);
      Map<String, Encoding> map2 = mediaType1.getEncoding();
      MediaType mediaType4 = mediaType2.encoding(map2);
      MediaType mediaType5 = mediaType4.example(string1);
      mediaType5.setEncoding(map2);
      String string2 = "Incompatible types: declared root type (%s) vs %s";
      String string3 = "PIPE_DELIMITED";
      String string4 = "";
      String string5 = "0u_|s9@0Vo32";
      String string6 = "kNg 7}Y ";
      String string7 = "NgHG55!RZ'wBn-NuwTn";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string6).when(exampleObject0).externalValue();
      doReturn(string2, string2, string3, string4).when(exampleObject0).name();
      doReturn(string3, string7).when(exampleObject0).summary();
      doReturn(string5, string3, string6).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType5, exampleObject0);
      OperationParser operationParser0 = new OperationParser();
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      String string8 = "";
      String string9 = "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig";
      String string10 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string11 = ",";
      String string12 = "java.lang";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).expression();
      doReturn(string12, (String) null).when(linkParameters1).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string8).when(link0).description();
      doReturn(string9, string11).when(link0).operationId();
      doReturn(string10).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      Optional<Link> optional3 = OperationParser.getLink(link0);
      String[] stringArray0 = new String[18];
      stringArray0[0] = string2;
      String string13 = null;
      boolean boolean1 = false;
      boolean boolean2 = true;
      String string14 = "y?\"yXi%{hwW10oT!";
      String string15 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string16 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string11, string15).when(externalDocumentation0).description();
      doReturn(string14, string16).when(externalDocumentation0).url();
      int int3 = 166;
      String string17 = "io.swagger.util.ResponseDeserializer";
      String string18 = "";
      String string19 = "T3_b=:augH]";
      String string20 = "^=2\"O";
      String string21 = "\"&f[2IU";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string10, string14).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean0).when(schema2).deprecated();
      doReturn(string13).when(schema2).description();
      doReturn(string13, operationParser0.COMMA, string19).when(schema2).example();
      doReturn(boolean1).when(schema2).exclusiveMaximum();
      doReturn(boolean2, boolean2).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema2).externalDocs();
      doReturn(string2, string20).when(schema2).format();
      doReturn(int3).when(schema2).maxLength();
      doReturn(int1, int3).when(schema2).maxProperties();
      doReturn(stringArray0[0]).when(schema2).maximum();
      doReturn(int0, int0).when(schema2).minProperties();
      doReturn(string10).when(schema2).minimum();
      doReturn(string17, string21).when(schema2).pattern();
      doReturn(boolean1).when(schema2).readOnly();
      doReturn(string18).when(schema2).ref();
      doReturn(string1, string2).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema2);
      int int4 = 713;
      int int5 = 2;
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Class<OperationParser> class1 = OperationParser.class;
      Schema schema4 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema4).implementation();
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int4, int1).when(arraySchema1).maxItems();
      doReturn(int3, int5).when(arraySchema1).minItems();
      doReturn(schema3, schema4).when(arraySchema1).schema();
      doReturn(boolean2, boolean0).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional5 = OperationParser.getArraySchema(arraySchema1);
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      Schema schema5 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string22 = "not a valid Long value";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = null;
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[7];
      stringArray0[0] = operationParser0.COMMA;
      stringArray0[1] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[2] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[3] = operationParser0.MEDIA_TYPE;
      stringArray0[4] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[5] = operationParser0.COMPONENTS_REF;
      stringArray0[6] = operationParser0.MEDIA_TYPE;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(operationParser0.COMMA, apiResponse0);
      Components components1 = components0.responses(apiResponses1);
      String string0 = "y}^q0JB|2l'Q8h3^^0";
      Example example0 = new Example();
      Example example1 = example0.value(apiResponses1);
      Example example2 = example1.description(operationParser0.COMPONENTS_REF);
      Components components2 = components1.addExamples(string0, example2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Class<io.swagger.oas.models.ExternalDocumentation> class0 = io.swagger.oas.models.ExternalDocumentation.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(operationParser0.COMMA, apiResponse0);
      String string0 = "y}^q0JB|2l'Q8h3^^0";
      Example example0 = new Example();
      Example example1 = example0.value(apiResponses1);
      Example example2 = example1.description(operationParser0.COMPONENTS_REF);
      Components components1 = components0.addExamples(string0, example2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[0];
      boolean boolean1 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0, boolean1).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "no description";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string1, callback0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components2 = components1.examples(map0);
      String string2 = "java.lang";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.description(string1);
      Components components3 = components2.addResponses(string2, apiResponse1);
      Components components4 = components1.examples(map0);
      int int0 = 0;
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>(int0);
      Components components5 = components3.securitySchemes(hashMap0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components5);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      OperationParser operationParser0 = new OperationParser();
      Map<String, Parameter> map2 = components0.getParameters();
      components1.setParameters(map2);
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      Content content0 = null;
      String string3 = "al9h>0Z";
      String string4 = "@rJ<>sox5239!";
      String string5 = "p|F1*z|K,Gh~";
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[7];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[0];
      String string6 = ",";
      ApiResponse apiResponse2 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0).when(apiResponse2).content();
      doReturn(string3, string4, string2, string5).when(apiResponse2).description();
      doReturn((Object) linkArray0, (Object) linkArray1).when(apiResponse2).links();
      doReturn(operationParser0.MEDIA_TYPE, string6, (String) null, (String) null).when(apiResponse2).responseCode();
      apiResponseArray0[0] = apiResponse2;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      String string7 = "";
      RequestBody requestBody1 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody1).content();
      doReturn(string7).when(requestBody1).description();
      doReturn(boolean0, boolean1).when(requestBody1).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody1, components4);
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      HashMap<String, Callback> hashMap1 = new HashMap<String, Callback>();
      Components components6 = components0.callbacks(hashMap1);
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components6);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      String string0 = "XTyvt`mR%)*";
      String string1 = "'IM|Zv0aJ6 W6a>f*0";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string0, (String) null).when(contact0).url();
      String string2 = "*/*";
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string2, (String) null).when(license0).url();
      String string3 = "h'->_QA<?'$%!fU-";
      String string4 = ">z]";
      io.swagger.oas.annotations.info.Info info0 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string3).when(info0).termsOfService();
      doReturn(string0, string4).when(info0).title();
      doReturn(string0, string0).when(info0).version();
      Optional<Info> optional0 = OperationParser.getInfo(info0);
      String[] stringArray0 = new String[7];
      String string5 = "";
      stringArray0[0] = string5;
      String string6 = "";
      stringArray0[1] = string6;
      String string7 = "";
      stringArray0[2] = string7;
      String string8 = "";
      stringArray0[3] = string8;
      String string9 = "";
      stringArray0[4] = string9;
      String string10 = "SH@$edNRIW\"?^d<`";
      stringArray0[5] = string10;
      String string11 = "8-7M'%|)";
      stringArray0[6] = string11;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string12 = ",";
      String string13 = "Nq-j4z;aY%;F=>4I^m";
      String string14 = "xBKV@\"";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[1]).when(contact1).email();
      doReturn(string10, (String) null).when(contact1).name();
      doReturn(string14, (String) null).when(contact1).url();
      String string15 = "': type: value deserializer of type ";
      io.swagger.oas.annotations.info.License license1 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string10, (String) null).when(license1).name();
      doReturn(string5).when(license1).url();
      String string16 = "OX3t=FUk[u]5~DT5";
      io.swagger.oas.annotations.info.Info info1 = mock(io.swagger.oas.annotations.info.Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact1).when(info1).contact();
      doReturn(string12, string15).when(info1).description();
      doReturn(license1).when(info1).license();
      doReturn(stringArray0[4]).when(info1).termsOfService();
      doReturn(string13, string16).when(info1).title();
      doReturn(string8).when(info1).version();
      Optional<Info> optional2 = OperationParser.getInfo(info1);
      io.swagger.oas.annotations.info.License license2 = null;
      Optional<License> optional3 = OperationParser.getLicense(license2);
      int int0 = (-9999);
      int int1 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema0);
      Content[] contentArray0 = new Content[4];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[3];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Components components0 = new Components();
      String string17 = "A%T<S2AaJ>q>'j3!R";
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      String string0 = "java.langjava.lang.Object";
      Encoding encoding0 = new Encoding();
      Boolean boolean0 = Boolean.TRUE;
      String string1 = " bytes (out of ";
      String string2 = "' (";
      String string3 = ".\\aS^KVw`P_*u}{Up.";
      String string4 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      Class<io.swagger.oas.models.media.ArraySchema> class0 = io.swagger.oas.models.media.ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[14];
      stringArray0[0] = operationParser0.COMMA;
      stringArray0[0] = operationParser0.MEDIA_TYPE;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[5] = operationParser0.COMPONENTS_REF;
      stringArray0[6] = operationParser0.COMMA;
      stringArray0[7] = operationParser0.DEFAULT_DESCRIPTION;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(operationParser0.COMMA, apiResponse0);
      Components components1 = components0.responses(apiResponses1);
      String string1 = "y}^q0JB|2l'Q8h3^^0";
      Example example0 = new Example();
      Example example1 = example0.value(apiResponses1);
      Example example2 = example1.description(operationParser0.COMPONENTS_REF);
      Components components2 = components1.addExamples(string1, example2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      String string0 = "root";
      String string1 = null;
      ServerVariable[] serverVariableArray0 = new ServerVariable[4];
      String string2 = "1J3\"uF[_F(n";
      String string3 = null;
      String string4 = null;
      String string5 = "\"=QG[4Fg)!0K2.Z)";
      String string6 = "E5F{vi.EF!yiE<";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2, string1, string3, (String) null).when(serverVariable0).description();
      doReturn(string4, string5, string0, string6).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server0).description();
      doReturn(string0, string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      String string7 = "com.fasterxml.jackson.databind.deser.impl.FieldProperty";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string7;
      stringArray0[1] = string7;
      boolean boolean0 = true;
      String string8 = null;
      String string9 = "NUMBER_FLOAT";
      String string10 = "";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      String string11 = "^K2x2\"e^aPA";
      int int0 = 2;
      String string12 = "";
      String string13 = "";
      boolean boolean2 = true;
      boolean boolean3 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean4 = false;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      String string14 = null;
      boolean boolean5 = true;
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      int int0 = 2;
      int int1 = 6;
      int int2 = Integer.MAX_VALUE;
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      int int3 = 26;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      MediaType mediaType0 = new MediaType();
      String string1 = "\\/n.'";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string1, example0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      MediaType mediaType2 = mediaType1.examples(hashMap0);
      Map<String, Encoding> map1 = mediaType2.getEncoding();
      MediaType mediaType3 = mediaType2.encoding(map1);
      Map<String, Encoding> map2 = mediaType1.getEncoding();
      MediaType mediaType4 = mediaType2.encoding(map2);
      MediaType mediaType5 = mediaType4.example(string1);
      mediaType5.setEncoding(map2);
      String string2 = "Incompatible types: declared root type (%s) vs %s";
      String string3 = "";
      String string4 = "^Oh=vOJ+{Q#FO4";
      String string5 = "java.lang";
      String string6 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string7 = "7";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(exampleObject0).externalValue();
      doReturn(string2, string3, string4).when(exampleObject0).name();
      doReturn(string6, (String) null).when(exampleObject0).summary();
      doReturn(string7, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType5, exampleObject0);
      OperationParser operationParser0 = new OperationParser();
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      String string8 = "";
      String string9 = "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig";
      String string10 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string11 = "java.langjava.lang.Integer";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string8).when(link0).description();
      doReturn(string9, string11).when(link0).operationId();
      doReturn(string10).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      Optional<Link> optional2 = OperationParser.getLink(link0);
      String[] stringArray0 = new String[18];
      stringArray0[0] = string2;
      String string12 = null;
      boolean boolean1 = false;
      boolean boolean2 = true;
      String string13 = "io.swagge";
      String string14 = "5>}p'lWjKEGjdHf^i";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      int int4 = 166;
      String string15 = "io.swagger.util.ResponseDeserializer";
      String string16 = "";
      String string17 = "*/*";
      boolean boolean3 = false;
      int int5 = 495;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      int int6 = 713;
      int int7 = 2;
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      int int8 = (-1);
      Schema schema4 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema4).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int6, int8).when(arraySchema0).maxItems();
      doReturn(int4, int7).when(arraySchema0).minItems();
      doReturn(schema3, schema4).when(arraySchema0).schema();
      doReturn(boolean2, boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      Schema schema5 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string18 = "not a valid Long value";
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[0];
      boolean boolean1 = false;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0, boolean1).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "no description";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string1, callback0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components2 = components1.examples(map0);
      String string2 = "java.lang";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.description(string1);
      Components components3 = components2.addResponses(string2, apiResponse1);
      Components components4 = components1.examples(map0);
      int int0 = 0;
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>(int0);
      Components components5 = components3.securitySchemes(hashMap0);
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components5);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      OperationParser operationParser0 = new OperationParser();
      Map<String, Parameter> map2 = components0.getParameters();
      components1.setParameters(map2);
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      Content content0 = null;
      String string3 = "al9h>0Z";
      String string4 = "@rJ<>sox5239!";
      String string5 = "p|F1*z|K,Gh~";
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[7];
      String string6 = null;
      String string7 = "NfP:~Ei~1BQU`?A";
      String string8 = "Mjn/L^-Qh MkDhO";
      String string9 = "java.langio.swagger.oas.models.ExternalDocumentation";
      String string10 = "vxjq]>4@b07@(2yb";
      String string11 = "xv9o190bS>|_Ykrf";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string2, string7, operationParser0.MEDIA_TYPE, string6).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string8, operationParser0.MEDIA_TYPE, string6, string5, string6).when(link0).operationId();
      doReturn(string9, string10, string3, string5, string11).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[0];
      String string12 = ",";
      String string13 = null;
      ApiResponse apiResponse2 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0).when(apiResponse2).content();
      doReturn(string3, string4, string2, string5).when(apiResponse2).description();
      doReturn((Object) linkArray0, (Object) linkArray1).when(apiResponse2).links();
      doReturn(operationParser0.MEDIA_TYPE, string12, string11, string13).when(apiResponse2).responseCode();
      apiResponseArray0[0] = apiResponse2;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      String string14 = "";
      RequestBody requestBody1 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody1).content();
      doReturn(string14).when(requestBody1).description();
      doReturn(boolean0, boolean1).when(requestBody1).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody1, components4);
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      HashMap<String, Callback> hashMap1 = new HashMap<String, Callback>();
      Components components6 = components0.callbacks(hashMap1);
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components6);
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Class<io.swagger.oas.models.parameters.RequestBody> class0 = io.swagger.oas.models.parameters.RequestBody.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "`u?,Js1U9o:";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[3];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0, string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[1];
      stringArray0[0] = operationParser0.MEDIA_TYPE;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(operationParser0.COMMA, apiResponse0);
      Components components1 = components0.responses(apiResponses1);
      String string1 = "y}^q0JB|2l'Q8h3^^0";
      Example example0 = new Example();
      Example example1 = example0.value(apiResponses1);
      Example example2 = example1.description(operationParser0.COMPONENTS_REF);
      Components components2 = components1.addExamples(string1, example2);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components2);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
  }
}
