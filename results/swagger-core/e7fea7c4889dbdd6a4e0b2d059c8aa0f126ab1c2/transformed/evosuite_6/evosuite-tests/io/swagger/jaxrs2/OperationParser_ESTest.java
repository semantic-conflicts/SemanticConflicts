/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 00:46:49 GMT 2020
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.Parameter;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.links.Link;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.ArraySchema;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.info.License;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.parameters.RequestBody;
import io.swagger.oas.models.responses.ApiResponse;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[6];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(arraySchema0).maxItems();
      doReturn(0, 0, 0, 0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null, (Schema) null).when(arraySchema0).schema();
      doReturn(false, false, false, false, false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = null;
      String string0 = "io.swagger.jaxrs2.OperationParser";
      Explode explode0 = Explode.FALSE;
      String string1 = "io.swagger.jaxrs2.OperationParser";
      String string2 = ",";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null, (Class) null, (Class) null, (Class) null, (Class) null).when(schema0).implementation();
      String string3 = null;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false, false, false, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false, false, false, false).when(parameter0).allowReserved();
      doReturn(arraySchema0, (ArraySchema) null, (ArraySchema) null, (ArraySchema) null, (ArraySchema) null).when(parameter0).array();
      doReturn((Object) contentArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(parameter0).content();
      doReturn(boolean0, false, false, false, false).when(parameter0).deprecated();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).description();
      doReturn(explode0, explode0, explode0, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn(string1, (String) null, (String) null, (String) null, (String) null).when(parameter0).in();
      doReturn(string2, (String) null, (String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(boolean0, false, false, false, false).when(parameter0).required();
      doReturn(schema0, schema0, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn(string3, (String) null, (String) null, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      Components components0 = new Components();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      String string4 = "*";
      String string5 = "b6=;LTrR1mZG}+\\RxSu";
      Header header0 = new Header();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      Header header1 = header0.schema(arraySchema1);
      io.swagger.oas.models.media.Schema<Callback> schema1 = new io.swagger.oas.models.media.Schema<Callback>();
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.items(schema1);
      io.swagger.oas.models.media.ArraySchema arraySchema3 = arraySchema2.type(string0);
      Boolean boolean1 = arraySchema3.getWriteOnly();
      Header header2 = header1.required(boolean1);
      Components components2 = components1.addHeaders(string5, header2);
      ApiResponse apiResponse0 = null;
      Components components3 = components1.addResponses(string4, apiResponse0);
      String string6 = "{trq m60DHQF0G#&";
      RequestBody requestBody0 = new RequestBody();
      String string7 = "b9&2R'";
      RequestBody requestBody1 = requestBody0.$ref(string7);
      Components components4 = components3.addRequestBodies(string6, requestBody1);
      Map<String, SecurityScheme> map0 = null;
      Components components5 = components4.securitySchemes(map0);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components5);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "no description";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string1 = "io.swagger.jaxrs2.OperationParser";
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      String string2 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = (-5115);
      String string3 = "java.lang";
      boolean boolean2 = false;
      String string4 = "java.lang";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string0, (String) null).when(schema0).description();
      doReturn(string2, string1, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string3).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string1).when(schema0).minimum();
      doReturn(string3, (String) null).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string4, (String) null).when(schema0).ref();
      doReturn(string1, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "no description";
      String string1 = "java.langio.swagger.oas.models.media.Content";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string2 = "io.swagger.jaxrs2.OperationParser";
      boolean boolean0 = true;
      String string3 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      boolean boolean1 = false;
      String string4 = "NM|aHR>lWth0";
      String string5 = "@uwy";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      int int0 = (-5115);
      String string6 = "java.lang";
      boolean boolean2 = false;
      String string7 = "java.lang";
      String string8 = "FN]";
      String string9 = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
      String string10 = "java.langjava.lang.String";
      String string11 = "]JQHXX=HWcf_2CGW";
      String string12 = "java.lang";
      String string13 = "java.lang";
      Server[] serverArray0 = new Server[4];
      String string14 = ", field: ";
      String string15 = "java.langio.swagger.jaxrs2.OperationParser";
      String string16 = null;
      ServerVariable[] serverVariableArray0 = new ServerVariable[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string3, (String) null, (String) null, (String) null).when(server0).description();
      doReturn(string15, string12, (String) null, (String) null, (String) null).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) null, (Object) null, (Object) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "vj5& OC%L,";
      stringArray0[0] = string0;
      String string1 = "ZQ!V_,R<v";
      stringArray0[1] = string1;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 10;
      int int1 = 1114111;
      int int2 = (-1);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Server[] serverArray0 = new Server[6];
      String string0 = "";
      String string1 = "io.swagger.oas.models.media.XML";
      String string2 = "f{<(C*;0)quKNH&@hP";
      String string3 = "#/components/schemas/";
      String string4 = "io.swagger.jaxrs2.OperationParser";
      String string5 = "{}x";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(server0).description();
      doReturn(string2, string4).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[0] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Server[] serverArray0 = new Server[6];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[2];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = null;
      Components components0 = new Components();
      String string0 = "Y<Fg,";
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components2 = components1.securitySchemes(map0);
      Example example0 = new Example();
      Example example1 = example0.summary(string0);
      Components components3 = components2.addExamples(string0, example1);
      String string1 = "9F`<~w#9W(,jFYY70\"B";
      SecurityScheme securityScheme0 = new SecurityScheme();
      String string2 = "com.fasterxml.jackson.core.type.ResolvedType";
      SecurityScheme securityScheme1 = securityScheme0.openIdConnectUrl(string2);
      SecurityScheme securityScheme2 = securityScheme1.name(string2);
      Components components4 = components3.addSecuritySchemes(string1, securityScheme2);
      Optional<ApiResponses> optional4 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      MediaType mediaType1 = mediaType0.schema(arraySchema0);
      String string0 = "";
      MediaType mediaType2 = mediaType1.example(string0);
      mediaType2.addExtension(string0, mediaType0);
      String string1 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string0);
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.items(schema0);
      mediaType0.addExtension(string1, arraySchema2);
      Encoding encoding0 = null;
      MediaType mediaType3 = mediaType2.addEncoding(string0, encoding0);
      License license0 = new License();
      String string2 = "#/components/schemas/";
      License license1 = license0.url(string2);
      MediaType mediaType4 = mediaType3.schema(arraySchema0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType3, exampleObject0);
      String[] stringArray0 = null;
      String string3 = null;
      boolean boolean0 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      String string4 = "toRf$bOrX(4@zK";
      int int0 = 13;
      int int1 = 1;
      String string5 = "";
      String string6 = "fpotj";
      String string7 = "9'";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      String string8 = "";
      int int2 = 32767;
      String string9 = null;
      String string10 = "*/*";
      String string11 = "com.fasterxml.jackson.core.base.GeneratorBase";
      String string12 = "rJM2CMin#[6@( BdPmA";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string10, string11).when(link0).description();
      doReturn(string5).when(link0).operationId();
      doReturn(string7, string12).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      int int3 = 108;
      int int4 = 687;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string13 = "    options: ";
      String string14 = "?!-gj";
      io.swagger.oas.annotations.info.License license2 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string13, string8).when(license2).name();
      doReturn(string14, string4).when(license2).url();
      Optional<License> optional2 = OperationParser.getLicense(license2);
      String string15 = "t2xsR}Q ^^T,";
      String string16 = "no description";
      String string17 = "V";
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "')";
      String string1 = "    anyOf: ";
      String string2 = "    example: ";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string2, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string0, string0).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = new MediaType();
      String string3 = "any";
      Example example0 = new Example();
      Example example1 = example0.value(optional0);
      MediaType mediaType1 = mediaType0.addExamples(string3, example1);
      Map<String, Encoding> map0 = null;
      MediaType mediaType2 = mediaType1.encoding(map0);
      boolean boolean0 = mediaType2.equals(mediaType1);
      mediaType1.setEncoding(map0);
      String string4 = "Utq:?V9";
      String string5 = ",LK";
      String string6 = "#/components/schemas/";
      String string7 = "G<8(T7oWc22x%Es";
      String string8 = "*/*";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string7).when(exampleObject0).externalValue();
      doReturn(string4, operationParser0.DEFAULT_DESCRIPTION, string4, string6).when(exampleObject0).name();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, string8).when(exampleObject0).summary();
      doReturn(string3, operationParser0.DEFAULT_DESCRIPTION, string0).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType2, exampleObject0);
      String string9 = "";
      String string10 = "io.swagge";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.MEDIA_TYPE, string10).when(contact0).email();
      doReturn(string9).when(contact0).name();
      doReturn(operationParser0.MEDIA_TYPE, operationParser0.COMMA).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      String string11 = "xDcHGSzw^|m";
      String string12 = "]LS=L{P P\"3%o6C+";
      String string13 = null;
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string13).when(linkParameters1).name();
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string11).when(link1).description();
      doReturn(operationParser0.COMPONENTS_REF, string12).when(link1).operationId();
      doReturn(operationParser0.MEDIA_TYPE).when(link1).operationRef();
      doReturn(linkParameters1).when(link1).parameters();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = string3;
      stringArray0[2] = operationParser0.COMMA;
      stringArray0[3] = string9;
      stringArray0[5] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[6] = string3;
      String string14 = "Gm0Y7BT][rzUo/mw";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      String string15 = null;
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ArraySchema arraySchema0 = null;
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      boolean boolean0 = false;
      String string0 = "*2)I!W/5i @K$CYX";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string1 = "java.langio.swagger.oas.models.callbacks.Callback";
      String string2 = "";
      String string3 = "java.langio.swagger.oas.models.media.Content";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string2).when(info0).description();
      doReturn((io.swagger.oas.annotations.info.License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string2).when(info0).title();
      doReturn(string3, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Explode explode2 = Explode.FALSE;
      Explode explode3 = Explode.FALSE;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[5];
      Parameter parameter1 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter1;
      parameterArray0[4] = parameter0;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema1);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema2)._default();
      doReturn((String[]) null).when(schema2)._enum();
      doReturn(false).when(schema2).deprecated();
      doReturn((String) null).when(schema2).description();
      doReturn((String) null, (String) null).when(schema2).example();
      doReturn(false).when(schema2).exclusiveMaximum();
      doReturn(false).when(schema2).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema2).externalDocs();
      doReturn((String) null).when(schema2).format();
      doReturn(0).when(schema2).maxLength();
      doReturn((String) null).when(schema2).maximum();
      doReturn(0).when(schema2).minProperties();
      doReturn((String) null).when(schema2).minimum();
      doReturn((String) null).when(schema2).pattern();
      doReturn(false).when(schema2).readOnly();
      doReturn((String) null).when(schema2).ref();
      doReturn((String) null).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema2);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Class<io.swagger.oas.models.parameters.Parameter> class0 = io.swagger.oas.models.parameters.Parameter.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components1 = components0.schemas(map0);
      String string0 = "no description";
      Example example0 = new Example();
      Components components2 = components1.addExamples(string0, example0);
      Operation operation0 = new Operation();
      Map<String, Callback> map1 = operation0.getCallbacks();
      Components components3 = components2.callbacks(map1);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map2 = mediaType0.getExamples();
      Content[] contentArray0 = null;
      String string1 = "O>Q@-[4pv#{Nb";
      io.swagger.oas.models.media.Schema<MediaType> schema1 = null;
      Components components4 = components2.addSchemas(string1, schema1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      int int0 = (-17);
      int int1 = (-9999);
      Class<io.swagger.oas.models.info.Info> class0 = io.swagger.oas.models.info.Info.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      OperationParser operationParser0 = new OperationParser();
      String string0 = "1P^<,SCBj;_PJ'BqK";
      Content[] contentArray0 = new Content[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, operationParser0.COMPONENTS_REF).when(requestBody0).description();
      doReturn(boolean0, boolean0).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components1 = components0.schemas(map0);
      Link[] linkArray0 = new Link[3];
      String string1 = "{}";
      Map<String, SecurityScheme> map1 = components1.getSecuritySchemes();
      components1.setSecuritySchemes(map1);
      String string2 = "5D-A?6";
      String string3 = "no description";
      String string4 = "rial,~|'Z1h;HC)";
      String string5 = "s";
      String string6 = null;
      String string7 = null;
      String string8 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string9 = "java.langio.swagger.oas.models.links.Link";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string1, string5, string6).when(link0).description();
      doReturn(string7, string1, string8).when(link0).name();
      doReturn(string2, string0, string3, operationParser0.DEFAULT_DESCRIPTION, string9).when(link0).operationId();
      doReturn(operationParser0.COMPONENTS_REF, string3, string4).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.links(map2);
      String string10 = "-Dat:hk";
      Example example0 = new Example();
      Example example1 = example0.externalValue(operationParser0.DEFAULT_DESCRIPTION);
      Components components3 = components2.addExamples(string10, example1);
      ApiResponse apiResponse0 = new ApiResponse();
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      Map<String, Header> map3 = link1.getHeaders();
      ApiResponse apiResponse1 = apiResponse0.headers(map3);
      Map<String, Header> map4 = apiResponse1.getHeaders();
      Components components4 = components3.headers(map4);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "6n1U3,`NI9\"(C`";
      String string1 = "java.lang";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      OperationParser operationParser0 = new OperationParser();
      String string2 = "H[S[Qe";
      String string3 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMPONENTS_REF, string3).when(externalDocumentation0).description();
      doReturn(string2, string2).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser.LOGGER = operationParser0.LOGGER;
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string4 = "xMO;`tFwjj&G5;";
      String string5 = "";
      String string6 = "\\%E; ";
      String string7 = "java.langio.swagger.jaxrs2.OperationParser";
      String string8 = "java.lang";
      String string9 = "s@8JuF0=<M&(";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string7, (String) null).when(contact0).email();
      doReturn(string8, (String) null).when(contact0).name();
      doReturn(string9, (String) null).when(contact0).url();
      String string10 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string11 = "value not one of declared Enum instance names: %s";
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string7, (String) null).when(license0).name();
      doReturn(string11, (String) null).when(license0).url();
      String string12 = "%T;5S1t<,";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string4, string10).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string5).when(info0).termsOfService();
      doReturn(string6, string12).when(info0).title();
      doReturn(string5).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      String string13 = "ALLOW_UNQUOTED_CONTROL_CHARS";
      String string14 = "ELN0BGdef";
      String string15 = "java.langio.swagger.oas.models.callbacks.Callback";
      String string16 = null;
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string16).when(linkParameters1).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string13, string14).when(link0).description();
      doReturn(operationParser0.COMMA, string15).when(link0).operationId();
      doReturn(string6).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      Class<io.swagger.oas.models.info.Info> class0 = io.swagger.oas.models.info.Info.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = null;
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples(operationParser0.MEDIA_TYPE, example0);
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Map<String, Example> map1 = parameter0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map1);
      String string17 = "java.langjava.lang.Integer";
      Encoding encoding0 = new Encoding();
      String string18 = "S%7q*;T$ASVI>";
      Encoding encoding1 = encoding0.style(string18);
      MediaType mediaType2 = mediaType1.addEncoding(string17, encoding1);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType3 = mediaType2.encoding(hashMap0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional4 = OperationParser.getMediaType(mediaType3, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[7];
      String string0 = "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[0] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components1 = components0.schemas(map0);
      String string1 = null;
      SecurityScheme securityScheme0 = new SecurityScheme();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      components1.setSecuritySchemes(hashMap0);
      Components components2 = components1.addSecuritySchemes(string1, securityScheme0);
      Map<String, Callback> map1 = null;
      Components components3 = components2.callbacks(map1);
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.schema(arraySchema0);
      String string2 = null;
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.description(string2);
      Components components4 = components3.addParameters(string1, parameter2);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "v.y,7D;>";
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      String string1 = "c\"*hE";
      boolean boolean1 = false;
      String string2 = "-";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string2, (String) null).when(externalDocumentation0).url();
      String string3 = null;
      int int0 = 39;
      String string4 = "io.swagger.jaxrs2.OperationParser";
      boolean boolean2 = true;
      String string5 = "=c/*i9?REDwD);6UJd";
      String string6 = "java.langjava.lang.String";
      boolean boolean3 = true;
      String string7 = "virtual";
      int int1 = 187;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean3).when(schema0).deprecated();
      doReturn(string0, string4).when(schema0).description();
      doReturn(string1, string1, string7, string7).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string3).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, 0).when(schema0).maxProperties();
      doReturn(string4).when(schema0).maximum();
      doReturn(int0, int1).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string3).when(schema0).pattern();
      doReturn(boolean2, boolean3).when(schema0).readOnly();
      doReturn(string5, string4).when(schema0).ref();
      doReturn(string6, string4).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      int int2 = 55;
      int int3 = 1;
      Class<Integer> class0 = Integer.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean4 = true;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema2).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int3).when(arraySchema0).maxItems();
      doReturn(int2, int3).when(arraySchema0).minItems();
      doReturn(schema1, schema2).when(arraySchema0).schema();
      doReturn(boolean4, boolean4).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[4];
      Content content0 = null;
      String string8 = "com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter";
      String string9 = "e)*s9EA%#/dT0F8sneR";
      Link[] linkArray0 = new Link[2];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      String string10 = "java.langjava.lang.String";
      String string11 = "java.langjava.lang.Integer";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string4, string1, string8, string9, string1).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string7, string10, string11, string9, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string12 = ")yEI<";
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema3 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      Components components1 = new Components();
      String string13 = "A'~\\ %^mc@'Yg(h";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components2 = components1.addParameters(string13, parameter0);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components3 = components2.responses(apiResponses0);
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map0 = arraySchema1.getProperties();
      Components components4 = components3.schemas(map0);
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      Parameter[] parameterArray0 = null;
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional3 = OperationParser.getParametersList(parameterArray0, components2);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "6n1U3,`NI9\"(C`";
      String string1 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(linkParameters0).expression();
      doReturn(string0, string0).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      OperationParser operationParser0 = new OperationParser();
      String string2 = "H[S[Qe";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMPONENTS_REF, operationParser0.DEFAULT_DESCRIPTION).when(externalDocumentation0).description();
      doReturn(string2, operationParser0.DEFAULT_DESCRIPTION).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser.LOGGER = operationParser0.LOGGER;
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string3 = "xMO;`tFwjj&G5;";
      String string4 = "";
      String string5 = "\\%E; ";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string1).when(contact0).name();
      doReturn(operationParser0.MEDIA_TYPE, (String) null).when(contact0).url();
      String string6 = "UhV pIC";
      String string7 = " (from class ";
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string6, (String) null).when(license0).name();
      doReturn(string7, (String) null).when(license0).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string3, string3).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string4).when(info0).termsOfService();
      doReturn(string5, operationParser0.COMMA).when(info0).title();
      doReturn(string4).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      String string8 = "ALLOW_UNQUOTED_CONTROL_CHARS";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).expression();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(linkParameters1).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string8, operationParser0.COMMA).when(link0).description();
      doReturn(operationParser0.COMMA, operationParser0.COMPONENTS_REF).when(link0).operationId();
      doReturn(string5).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      ExampleObject[] exampleObjectArray0 = new ExampleObject[3];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      String string9 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string9).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples(operationParser0.MEDIA_TYPE, example0);
      io.swagger.oas.models.media.Schema<String> schema1 = null;
      Components components2 = components1.addSchemas(operationParser0.COMMA, schema1);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components3 = components2.examples(hashMap0);
      RequestBody requestBody0 = new RequestBody();
      RequestBody requestBody1 = requestBody0.description(operationParser0.DEFAULT_DESCRIPTION);
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      RequestBody requestBody2 = requestBody1.content(content1);
      Components components4 = components3.addRequestBodies(operationParser0.MEDIA_TYPE, requestBody2);
      Optional<io.swagger.oas.models.media.Content> optional4 = OperationParser.getContent(content0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      Parameter[] parameterArray0 = new Parameter[4];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      components0.setSchemas(map0);
      Map<String, RequestBody> map1 = null;
      components0.setRequestBodies(map1);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[6];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "io.swagger.jaxs2.OperationParser";
      String string1 = "[xt9@#PS%Iro ";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string1, (String) null).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      OperationParser operationParser0 = new OperationParser();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<License> optional0 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Content[] contentArray0 = new Content[0];
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      Components components0 = new Components();
      String string0 = "";
      ApiResponse apiResponse0 = new ApiResponse();
      ApiResponse apiResponse1 = apiResponse0.$ref(string0);
      Map<String, Header> map0 = null;
      ApiResponse apiResponse2 = apiResponse1.headers(map0);
      Components components1 = components0.addResponses(string0, apiResponse2);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = string0;
      stringArray0[1] = stringArray0[0];
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      MediaType mediaType0 = new MediaType();
      Map<String, Encoding> map1 = mediaType0.getEncoding();
      MediaType mediaType1 = mediaType0.encoding(map1);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      MediaType mediaType2 = mediaType1.schema(arraySchema0);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType2, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Parameter parameter0 = null;
      Components components0 = new Components();
      String string0 = "";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string0, header0);
      ApiResponse apiResponse0 = new ApiResponse();
      Components components2 = components1.addResponses(string0, apiResponse0);
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string0, pathItem0);
      Components components3 = components2.addCallbacks(string0, callback1);
      Map<String, Example> map0 = components1.getExamples();
      Components components4 = components3.examples(map0);
      Optional<io.swagger.oas.models.parameters.Parameter> optional1 = OperationParser.getParameter(parameter0, components4);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      io.swagger.oas.annotations.info.License license0 = null;
      Optional<License> optional0 = OperationParser.getLicense(license0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      MediaType mediaType0 = new MediaType();
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType1 = mediaType0.encoding(map0);
      String string0 = "+<%Y0Ng";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(string0, encoding0);
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Map<String, Example> map1 = parameter0.getExamples();
      MediaType mediaType3 = mediaType2.examples(map1);
      Example example0 = new Example();
      Example example1 = example0.summary(string0);
      String string1 = "";
      Example example2 = example1.$ref(string1);
      MediaType mediaType4 = mediaType3.addExamples(string0, example2);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Link[] linkArray0 = new Link[2];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Components components0 = new Components();
      String string0 = "4w/u`~')T5fT7n#qT";
      Header header0 = new Header();
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content>();
      Header header1 = header0.schema(schema0);
      Boolean boolean0 = null;
      io.swagger.oas.models.info.Contact contact0 = new io.swagger.oas.models.info.Contact();
      boolean boolean1 = header1.equals(contact0);
      Header header2 = header1.deprecated(boolean0);
      header2.setRequired(boolean0);
      io.swagger.oas.models.media.Schema<Integer> schema1 = null;
      io.swagger.oas.models.media.Schema schema2 = schema0.additionalProperties(schema1);
      Components components1 = components0.addHeaders(string0, header2);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components1);
      Server[] serverArray0 = new Server[1];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType0, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[5];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map0 = mediaType0.getExamples();
      Components components1 = components0.examples(map0);
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      Components components2 = components1.addSchemas(operationParser0.COMMA, schema0);
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Header header0 = new Header();
      Header header1 = header0.schema(schema0);
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      Header header2 = header1.content(content1);
      LinkedList<Example> linkedList0 = new LinkedList<Example>();
      Header header3 = header2.examples(linkedList0);
      Header header4 = header3.$ref(operationParser0.MEDIA_TYPE);
      Components components3 = components2.addHeaders(operationParser0.DEFAULT_DESCRIPTION, header4);
      Components components4 = components2.headers(hashMap0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = components1.getSchemas();
      Components components5 = components4.schemas(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Components components0 = new Components();
      String string0 = "xL0(?a";
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      RequestBody requestBody0 = new RequestBody();
      Components components2 = components1.addRequestBodies(string0, requestBody0);
      Map<String, Header> map0 = components0.getHeaders();
      Components components3 = components2.headers(map0);
      Map<String, Callback> map1 = components0.getCallbacks();
      Components components4 = components3.callbacks(map1);
      Callback callback0 = new Callback();
      Components components5 = components4.addCallbacks(string0, callback0);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.info.License license0 = null;
      Optional<License> optional1 = OperationParser.getLicense(license0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema1);
      Optional<License> optional3 = OperationParser.getLicense(license0);
      String[] stringArray0 = new String[1];
      String string0 = "=U~?Rh6*V)S.l";
      stringArray0[0] = string0;
      Optional<Set<Tag>> optional4 = OperationParser.getTags(stringArray0);
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map0 = arraySchema0.getProperties();
      Components components2 = components1.schemas(map0);
      Encoding encoding0 = new Encoding();
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      Encoding encoding1 = encoding0.explode(boolean1);
      Map<String, Header> map1 = encoding1.getHeaders();
      Components components3 = components2.headers(map1);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional4 = OperationParser.getContact(contact1);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Parameter[] parameterArray0 = new Parameter[4];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      Components components0 = new Components();
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      Components components1 = components0.parameters(hashMap0);
      String string0 = "";
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string0, header0);
      String string1 = "i0Tn_bBSR{y0h}X-";
      ApiResponse apiResponse0 = null;
      Components components3 = components2.addResponses(string1, apiResponse0);
      HashMap<String, ApiResponse> hashMap1 = new HashMap<String, ApiResponse>();
      Components components4 = components3.responses(hashMap1);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Schema<OperationParser> schema0 = new io.swagger.oas.models.media.Schema<OperationParser>();
      MediaType mediaType1 = mediaType0.schema(schema0);
      String string0 = "";
      Example example0 = new Example();
      Example example1 = example0.summary(string0);
      MediaType mediaType2 = mediaType1.addExamples(string0, example1);
      Map<String, Encoding> map0 = mediaType1.getEncoding();
      MediaType mediaType3 = mediaType2.encoding(map0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType3, exampleObject0);
      Server[] serverArray0 = new Server[3];
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      mediaType0.setExamples(hashMap0);
      serverArray0[0] = server0;
      serverArray0[1] = server0;
      serverArray0[2] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      ExampleObject exampleObject1 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject1).name();
      Optional<MediaType> optional4 = OperationParser.getMediaType(mediaType3, exampleObject1);
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional5 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = new Components();
      String string0 = "";
      RequestBody requestBody0 = new RequestBody();
      io.swagger.oas.models.media.Content content0 = null;
      RequestBody requestBody1 = requestBody0.content(content0);
      String string1 = "=}jX`2X0hu";
      RequestBody requestBody2 = requestBody1.$ref(string1);
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      RequestBody requestBody3 = requestBody2.required(boolean1);
      Components components1 = components0.addRequestBodies(string0, requestBody3);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      Content content0 = null;
      Produces produces0 = null;
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components0.getParameters();
      Components components1 = components0.parameters(map0);
      String string0 = "tW$-fO);*1lo-3+$Gwn";
      io.swagger.oas.models.media.Schema<Void> schema0 = new io.swagger.oas.models.media.Schema<Void>();
      Components components2 = components1.addSchemas(string0, schema0);
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      Components components3 = components2.responses(hashMap0);
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      String string1 = "scheme";
      ApiResponse apiResponse0 = new ApiResponse();
      Map<String, Header> map1 = apiResponse0.getHeaders();
      ApiResponse apiResponse1 = apiResponse0.headers(map1);
      String string2 = "I";
      Header header0 = null;
      ApiResponse apiResponse2 = apiResponse1.addHeaderObject(string2, header0);
      String string3 = "h}{Wf(pO0j(`7k*/2q";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      String string4 = "no description";
      io.swagger.oas.models.links.Link link1 = link0.parameters(string4, string4);
      ApiResponse apiResponse3 = apiResponse2.link(string3, link1);
      ApiResponse apiResponse4 = apiResponse3.description(string3);
      ApiResponse apiResponse5 = hashMap0.put(string1, apiResponse4);
      HashMap<String, SecurityScheme> hashMap2 = new HashMap<String, SecurityScheme>(hashMap1);
      Components components4 = components3.securitySchemes(hashMap2);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "java.lang";
      String string1 = null;
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((io.swagger.oas.annotations.info.License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Parameter[] parameterArray0 = new Parameter[6];
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      String string2 = "w,WBU";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.DEFAULT;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      parameterArray0[1] = parameterArray0[0];
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[8];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      Map<String, ApiResponse> map0 = null;
      Components components2 = components1.responses(map0);
      io.swagger.oas.models.media.Schema<RequestBody> schema0 = new io.swagger.oas.models.media.Schema<RequestBody>();
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema0.getProperties();
      Components components3 = components2.schemas(map1);
      Map<String, io.swagger.oas.models.parameters.Parameter> map2 = components2.getParameters();
      Components components4 = components3.parameters(map2);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components4);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, Callback> map0 = components0.getCallbacks();
      Components components1 = components0.callbacks(map0);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Map<String, Header> map1 = link0.getHeaders();
      Components components2 = components1.headers(map1);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      Map<String, SecurityScheme> map1 = components0.getSecuritySchemes();
      Components components2 = components1.securitySchemes(map1);
      HashMap<String, io.swagger.oas.models.links.Link> hashMap1 = new HashMap<String, io.swagger.oas.models.links.Link>();
      Components components3 = components2.links(hashMap1);
      String string0 = "io.swagger.jaxrs2.OperationParser";
      Example example0 = new Example();
      Example example1 = example0.$ref(string0);
      String string1 = "Problem deserializing property '";
      Example example2 = example1.description(string1);
      Components components4 = components3.addExamples(string0, example2);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      OperationParser operationParser0 = new OperationParser();
      String string0 = "";
      OperationParser.COMPONENTS_REF = string0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema1);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string1, example0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string1, securityScheme0);
      String string2 = "";
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      io.swagger.oas.models.links.Link link2 = link1.description(string2);
      Components components3 = components2.addLinks(string2, link2);
      Map<String, ApiResponse> map0 = null;
      Components components4 = components3.responses(map0);
      SecurityScheme securityScheme1 = securityScheme0.bearerFormat(operationParser0.COMPONENTS_REF);
      Components components5 = components3.responses(map0);
      Optional<RequestBody> optional3 = OperationParser.getRequestBody(requestBody0, components5);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<License> optional0 = OperationParser.getLicense(license0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      Parameter[] parameterArray0 = null;
      Components components0 = null;
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components0);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      Link[] linkArray0 = new Link[3];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(linkArray0[1]);
      LinkParameters linkParameters0 = null;
      Map<String, String> map2 = OperationParser.getLinkParameters(linkParameters0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      Map<String, String> map3 = OperationParser.getLinkParameters(linkParameters0);
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "io.swagger.jaxrs2.OperationParser";
      String string1 = "7Pjh>.cWj-";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string2 = "Zg3`*!aoJED!tsR$";
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string2, requestBody0);
      io.swagger.oas.models.links.Link link0 = null;
      Components components2 = components1.addLinks(string2, link0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components0.getParameters();
      Components components3 = components2.parameters(map0);
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      Components components4 = components3.responses(hashMap0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "com.fasterxml.jackson.annotation.ObjectIdGenerator";
      stringArray0[0] = string0;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string1 = "";
      String string2 = "!g|_`vH~_";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string1).when(info0).description();
      doReturn((io.swagger.oas.annotations.info.License) null).when(info0).license();
      doReturn(string1).when(info0).termsOfService();
      doReturn(string2, (String) null).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      String string3 = "DEFAULT";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string3, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
      Server[] serverArray0 = new Server[7];
      String string4 = "V],Ars}%3QGCSFc";
      String string5 = "`\"";
      String string6 = "-laW&P{ZTKj";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string1).when(server0).description();
      doReturn(stringArray0[0], string4).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "{QfGgK2GQ4IT";
      Example example0 = null;
      MediaType mediaType1 = mediaType0.addExamples(string0, example0);
      MediaType mediaType2 = mediaType1.example(string0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      MediaType mediaType3 = mediaType2.examples(hashMap0);
      MediaType mediaType4 = mediaType3.examples(hashMap0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType3, exampleObject0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[1] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = stringArray0[1];
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "*/*";
      String string1 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((io.swagger.oas.annotations.info.License) null).when(info0).license();
      doReturn(string1).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(string0, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Link[] linkArray0 = new Link[8];
      String string2 = "'f[Wh";
      String string3 = "";
      String string4 = "";
      String string5 = ",";
      String string6 = "Could not resolve type";
      String string7 = "tdyG13}!:Tnz'3*mA";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string3).when(link0).operationId();
      doReturn(string3).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[2] = linkArray0[1];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[3];
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "n.S92)kr:==R(=2G";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser operationParser0 = new OperationParser();
      String string1 = "k_Ar&Z?pjR@Ma+\\bZ\"[";
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string1, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      String string2 = "tpe&&i`>qt<M";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string2, header0);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components2 = components1.addLinks(operationParser0.COMPONENTS_REF, link0);
      ApiResponse apiResponse0 = new ApiResponse();
      String string3 = ">";
      ApiResponse apiResponse1 = apiResponse0.description(string3);
      Map<String, Header> map0 = null;
      apiResponse1.setHeaders(map0);
      Components components3 = components2.addResponses(operationParser0.COMMA, apiResponse1);
      Map<String, Header> map1 = link0.getHeaders();
      Components components4 = components3.headers(map1);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      String string4 = "qSz$G$) FL{s2X<`/";
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(license0).name();
      doReturn(string4, (String) null).when(license0).url();
      Optional<License> optional2 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      String string1 = "zrI#e";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string2 = "rp6,PPCn1";
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string2, requestBody0);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components2 = components1.schemas(map0);
      String string3 = "id>";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      String string4 = "";
      io.swagger.oas.models.links.Link link1 = link0.operationRef(string4);
      Map<String, Header> map1 = link1.getHeaders();
      io.swagger.oas.models.links.Link link2 = link0.headers(map1);
      Components components3 = components2.addLinks(string3, link2);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<Object> schema0 = new io.swagger.oas.models.media.Schema<Object>();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string4);
      Components components4 = components3.addSchemas(string4, arraySchema2);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "VB+MviEdw";
      String string1 = "avKP)A'wJ0}[OT:\\";
      String string2 = "";
      String string3 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string0, string1).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = ".)";
      String string1 = "#%HX(";
      String string2 = ") not compatible with managed type (";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((io.swagger.oas.annotations.info.License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string1, (String) null).when(info0).title();
      doReturn(string2, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Content[] contentArray0 = new Content[3];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[7];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      Components components0 = new Components();
      String string3 = "";
      ApiResponse apiResponse0 = new ApiResponse();
      ApiResponse apiResponse1 = apiResponse0.$ref(string3);
      Map<String, Header> map0 = null;
      ApiResponse apiResponse2 = apiResponse1.headers(map0);
      Components components1 = components0.addResponses(string3, apiResponse2);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components1);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "xX.P#kbA>xn";
      boolean boolean0 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.ArraySchema> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.ArraySchema>();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      Components components1 = components0.addSchemas(string1, arraySchema1);
      Header header0 = new Header();
      Header.StyleEnum header_StyleEnum0 = Header.StyleEnum.SIMPLE;
      Header header1 = header0.style(header_StyleEnum0);
      LinkedList<Example> linkedList0 = new LinkedList<Example>();
      Header header2 = header1.examples(linkedList0);
      Components components2 = components1.addHeaders(string1, header2);
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      components2.setParameters(hashMap0);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components2);
      io.swagger.oas.annotations.parameters.RequestBody requestBody1 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody1).content();
      doReturn(string0, (String) null).when(requestBody1).description();
      doReturn(boolean0, false).when(requestBody1).required();
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody1, components2);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "{vFs{>4$ ";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(stringArray0[0], (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string2 = "#[ir";
      String string3 = "";
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(license0).name();
      doReturn(string3).when(license0).url();
      Optional<License> optional1 = OperationParser.getLicense(license0);
      Parameter[] parameterArray0 = new Parameter[5];
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean1 = true;
      Explode explode0 = Explode.DEFAULT;
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string0 = "Problem deserializing property '";
      String string1 = "";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string2 = null;
      Example example0 = new Example();
      Components components1 = components0.addExamples(string2, example0);
      String string3 = "2+MM,}R&_(e0yB0Pv";
      String string4 = "tmX&m_ABc+#";
      example0.setSummary(string4);
      Header header0 = null;
      Components components2 = components1.addHeaders(string3, header0);
      ApiResponse apiResponse1 = new ApiResponse();
      ApiResponse apiResponse2 = apiResponse1.description(string2);
      Components components3 = components2.addResponses(string3, apiResponse2);
      Map<String, Callback> map0 = components1.getCallbacks();
      components2.addExtension(string2, apiResponseArray0[0]);
      Components components4 = components3.callbacks(map0);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      String string0 = "c`-p";
      String[] stringArray0 = null;
      boolean boolean0 = true;
      String string1 = "|b";
      boolean boolean1 = true;
      boolean boolean2 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 2;
      int int1 = 0;
      String string2 = "com.fasterxml.jackson.databind.deser.AbstractDeserializer";
      String string3 = ">;";
      String string4 = "-Fop_";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string0, (String) null).when(schema0).description();
      doReturn(operationParser0.MEDIA_TYPE, string1, (String) null, (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean2, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string1).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(string3, (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(string4, (String) null).when(schema0).ref();
      doReturn(string0, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Link[] linkArray0 = new Link[4];
      String string5 = ",";
      String string6 = "a ECc&`Vk>$1Hy'2XC}";
      String string7 = "<kzay@}{=8<A";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string3, string5, operationParser0.DEFAULT_DESCRIPTION, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string4, string2, string6, string7, (String) null).when(link0).operationId();
      doReturn(string4, string5, string3, operationParser0.COMMA).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string8 = "oGKbk.Fa!}Ya";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string8, header0);
      Parameter[] parameterArray0 = new Parameter[6];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "^]`=HCjSy";
      String string1 = "_bG'";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      ArraySchema arraySchema0 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      boolean boolean0 = true;
      String string2 = "";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string3 = "x^4o}Z$\\.";
      int int0 = 6;
      String string4 = "B3i";
      String string5 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string2).when(schema0).description();
      doReturn(stringArray0[1], string0, (String) null, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string3, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string4).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(stringArray0[1]).when(schema0).minimum();
      doReturn(string2).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(string0, (String) null).when(schema0).ref();
      doReturn(string5).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      String[] stringArray1 = new String[9];
      String string6 = "";
      stringArray1[0] = string6;
      String string7 = "2>y?T-L=)ftlR";
      stringArray1[1] = string7;
      String string8 = ")CD7rN.|,cusd+b0ws";
      stringArray1[2] = string8;
      String string9 = "";
      stringArray1[3] = string9;
      String string10 = "DEUlH>3*";
      stringArray1[4] = string10;
      String string11 = "Strange Map type ";
      stringArray1[5] = string11;
      String string12 = "uL4";
      stringArray1[6] = string12;
      String string13 = "no description";
      stringArray1[7] = string13;
      String string14 = "";
      stringArray1[8] = string14;
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray1);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "OR>R";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "CS}'y*~#ztI}%l1";
      stringArray0[4] = string4;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      String string5 = "00";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(externalDocumentation0).description();
      doReturn(string3).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType0, exampleObject0);
      int int0 = 1;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string6 = "double";
      String string7 = "com.fasterxml.jackson.databind.AnnotationIntrospector";
      String string8 = "";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[3] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string9 = "zUK,4y~q[;JA#g]ETw";
      Example example0 = new Example();
      Example example1 = example0.value(optional2);
      Components components1 = components0.addExamples(string9, example1);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components2 = components1.securitySchemes(hashMap0);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string0, example0);
      io.swagger.oas.models.media.Schema<Integer> schema0 = null;
      MediaType mediaType2 = mediaType1.schema(schema0);
      String string1 = "PaU6N U8dk[l\\m";
      Encoding encoding0 = new Encoding();
      Boolean boolean0 = Boolean.valueOf(string0);
      Encoding encoding1 = encoding0.explode(boolean0);
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = Boolean.logicalXor(boolean1, boolean2);
      boolean boolean4 = mediaType0.equals(encoding0);
      MediaType mediaType3 = mediaType2.addEncoding(string1, encoding1);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType4 = mediaType3.encoding(hashMap0);
      MediaType mediaType5 = mediaType0.schema(schema0);
      Encoding encoding2 = hashMap0.put(string1, encoding0);
      boolean boolean5 = mediaType4.equals(encoding0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string1, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
      String string2 = "no description";
      String string3 = "J7";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(contact0).email();
      doReturn(string3, (String) null).when(contact0).name();
      doReturn(string0).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      int int0 = 1068;
      int int1 = 7;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean5).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string1, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      int int2 = (-819);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema2).implementation();
      boolean boolean6 = false;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int2).when(arraySchema1).maxItems();
      doReturn(int1, int2).when(arraySchema1).minItems();
      doReturn(schema2, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean6).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema1);
      Content[] contentArray0 = new Content[7];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      Components components0 = new Components();
      String string4 = "S";
      Components components1 = components0.addSchemas(string4, schema0);
      String string5 = "BQAkG-?\"%8J8TW.";
      Callback callback0 = new Callback();
      String string6 = "";
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string6, pathItem0);
      String string7 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Callback callback2 = callback1.addPathItem(string7, pathItem0);
      String string8 = null;
      PathItem pathItem1 = pathItem0.summary(string8);
      Callback callback3 = callback2.addPathItem(string7, pathItem1);
      Components components2 = components1.addCallbacks(string5, callback3);
      io.swagger.oas.models.media.ArraySchema arraySchema2 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map1 = arraySchema2.getProperties();
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "n.S92)kr:==R(=2G";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string0, string0).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser operationParser0 = new OperationParser();
      String string1 = "k_Ar&Z?pjR@Ma+\\bZ\"[";
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      String string2 = "S'nidQGCy*/&kd9G\"Z>";
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string1, string2).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      String string3 = "tp&&i`>qt<M";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string3, header0);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components2 = components1.addLinks(operationParser0.COMPONENTS_REF, link0);
      ApiResponse apiResponse0 = new ApiResponse();
      String string4 = ">";
      ApiResponse apiResponse1 = apiResponse0.description(string4);
      Map<String, Header> map0 = null;
      apiResponse1.setHeaders(map0);
      Components components3 = components2.addResponses(operationParser0.COMMA, apiResponse1);
      Map<String, Header> map1 = apiResponse0.getHeaders();
      Components components4 = components3.headers(map1);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "*/*";
      RequestBody requestBody1 = new RequestBody();
      Components components1 = components0.addRequestBodies(string1, requestBody1);
      Map<String, io.swagger.oas.models.links.Link> map0 = components0.getLinks();
      Components components2 = components1.links(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map1 = arraySchema0.getProperties();
      Components components3 = components2.schemas(map1);
      ApiResponse apiResponse0 = new ApiResponse();
      Components components4 = components3.addResponses(string1, apiResponse0);
      String string2 = null;
      Components components5 = components4.addRequestBodies(string2, requestBody1);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      Server[] serverArray0 = new Server[9];
      String string3 = "g~j";
      String string4 = "";
      String string5 = null;
      ServerVariable[] serverVariableArray0 = new ServerVariable[1];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(serverVariable0).description();
      doReturn((String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string0, (String) null, (String) null, (String) null).when(server0).description();
      doReturn(string3, string2, (String) null, (String) null, (String) null).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      serverArray0[8] = serverArray0[7];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      Link[] linkArray0 = new Link[2];
      String string0 = "G";
      String string1 = null;
      String string2 = "";
      String string3 = "jP0%^>d%K]aB\"9H/";
      String string4 = "NO&&QF,+R]";
      String string5 = "1t$<Y";
      String string6 = "3lr=Z `{fI^";
      String string7 = "YtM";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(linkParameters0).expression();
      doReturn(string6, string3, string7, (String) null, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string0, string1, string0).when(link0).description();
      doReturn(string2, string2).when(link0).name();
      doReturn(string1, string2, string1).when(link0).operationId();
      doReturn(string3, string4, string5, string1, string3).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string8 = "4B]R#1p8Io";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(contact0).email();
      doReturn(string6, (String) null).when(contact0).name();
      doReturn(string2).when(contact0).url();
      String string9 = "";
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(license0).name();
      doReturn(string5, (String) null).when(license0).url();
      String string10 = "bMP^*W";
      String string11 = null;
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string9).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string8, string10).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(string8, string11).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.info.License license1 = null;
      Optional<License> optional1 = OperationParser.getLicense(license1);
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(linkArray0[1]);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[3];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string12 = null;
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = components0.getParameters();
      components0.setParameters(map1);
      String string13 = "";
      ApiResponse apiResponse1 = new ApiResponse();
      Components components1 = components0.addResponses(string13, apiResponse1);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      MediaType mediaType0 = null;
      String string0 = "io.swagger.jaxrs2.OperationParser";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      Class<io.swagger.oas.models.info.Info> class0 = io.swagger.oas.models.info.Info.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components1 = components0.schemas(map0);
      String string0 = "no description";
      Example example0 = new Example();
      Components components2 = components1.addExamples(string0, example0);
      Operation operation0 = new Operation();
      Map<String, Callback> map1 = operation0.getCallbacks();
      Components components3 = components2.callbacks(map1);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map2 = mediaType0.getExamples();
      Components components4 = components3.examples(map2);
      Link[] linkArray0 = new Link[7];
      String string1 = "$]c>e%fmc(Vv/C`#~pVK";
      String string2 = "tDW%?.HY/n\"k\\,VX";
      String string3 = "h";
      String string4 = "ke2Y!3*\\0=$m";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string1, string1, string1).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string2, string2, string1, string3, string0).when(link0).operationId();
      doReturn(string0, string4, string1, string1, string0).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map3 = OperationParser.getLinks(linkArray0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      String string0 = "com.fasterxwl.jackson.core.Tr-eCodec";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      boolean boolean0 = false;
      boolean boolean1 = true;
      String string1 = " Y!y)";
      String string2 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(externalDocumentation0).description();
      doReturn(string2).when(externalDocumentation0).url();
      int int0 = 18;
      String string3 = null;
      boolean boolean2 = true;
      String string4 = "3 ";
      String string5 = "!3AsT(";
      String string6 = "6W|7Gp;29=A@=>";
      String string7 = "java.langio.swagger.oas.models.info.Info";
      boolean boolean3 = false;
      String string8 = null;
      int int1 = 2296;
      String string9 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string4).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(stringArray0[0], string5).when(schema0).description();
      doReturn(stringArray0[0], stringArray0[0], string6, string7).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1, boolean3).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[0], string8).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1, 0).when(schema0).maxProperties();
      doReturn(string0).when(schema0).maximum();
      doReturn(int0, int0).when(schema0).minProperties();
      doReturn(stringArray0[0]).when(schema0).minimum();
      doReturn(string3).when(schema0).pattern();
      doReturn(boolean2, boolean3).when(schema0).readOnly();
      doReturn(stringArray0[1], string9).when(schema0).ref();
      doReturn(string0, string6).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = "|hq~:'P0";
      String string1 = "java.lang";
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      Optional<License> optional0 = OperationParser.getLicense(license0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[9];
      Content content0 = null;
      String string2 = ": latter is not a subtype of former";
      String string3 = "java.lang";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string2, string3, string2, string0, string2).when(apiResponse0).description();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = null;
      Components components1 = components0.parameters(map0);
      String string4 = "M";
      RequestBody requestBody0 = new RequestBody();
      Boolean boolean0 = Boolean.FALSE;
      RequestBody requestBody1 = requestBody0.required(boolean0);
      RequestBody requestBody2 = requestBody1.description(string4);
      Components components2 = components1.addRequestBodies(string4, requestBody2);
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = string4;
      String string5 = "";
      stringArray0[1] = string5;
      String string6 = "False";
      stringArray0[2] = string6;
      stringArray0[3] = string4;
      stringArray0[4] = string4;
      stringArray0[5] = string4;
      stringArray0[6] = string4;
      stringArray0[7] = string4;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      OperationParser.DEFAULT_DESCRIPTION = operationParser0.DEFAULT_DESCRIPTION;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, operationParser0.COMMA).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(operationParser0.MEDIA_TYPE, string0).when(info0).termsOfService();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, OperationParser.DEFAULT_DESCRIPTION).when(info0).title();
      doReturn(operationParser0.MEDIA_TYPE, operationParser0.MEDIA_TYPE).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      String string1 = "jd\\ n=F";
      String string2 = "K~r&tuY3jA-,%alvo";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string1, operationParser0.COMPONENTS_REF, operationParser0.MEDIA_TYPE, OperationParser.DEFAULT_DESCRIPTION, string2).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      ExampleObject[] exampleObjectArray1 = new ExampleObject[9];
      exampleObjectArray1[0] = exampleObject0;
      exampleObjectArray1[1] = exampleObject0;
      exampleObjectArray1[2] = exampleObject0;
      exampleObjectArray1[3] = exampleObject0;
      exampleObjectArray1[4] = exampleObject0;
      exampleObjectArray1[5] = exampleObject0;
      exampleObjectArray1[6] = exampleObject0;
      exampleObjectArray1[7] = exampleObject0;
      exampleObjectArray1[8] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray1, (Object) exampleObjectArray0, (Object) exampleObjectArray1, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components0);
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      MediaType mediaType0 = null;
      String string0 = "io.swagger.jaxrs2.OperationParser";
      String string1 = "RJPBx!q7c\\*^yB;$";
      String string2 = "Unresolved forward reference but no identity info";
      String string3 = "java.lang";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string1, string1, string2).when(exampleObject0).name();
      doReturn(string1, (String) null).when(exampleObject0).summary();
      doReturn(string3, (String) null, (String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      int int0 = 0;
      int int1 = 1651;
      int int2 = 1512;
      Class<Tag> class0 = Tag.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = null;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "6n1U3,`NI9\"(C`";
      String string1 = ",";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      OperationParser operationParser0 = new OperationParser();
      String string2 = "H[S[Qe";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMPONENTS_REF, operationParser0.DEFAULT_DESCRIPTION).when(externalDocumentation0).description();
      doReturn(string2, operationParser0.DEFAULT_DESCRIPTION).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser.LOGGER = operationParser0.LOGGER;
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string3 = "xMO;`tFwjj&G5;";
      String string4 = "";
      String string5 = "\\%E; ";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string3, operationParser0.DEFAULT_DESCRIPTION).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string4).when(info0).termsOfService();
      doReturn(string5, operationParser0.COMMA).when(info0).title();
      doReturn(string4).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      String string6 = "ALLOW_UNQUOTED_CONTROL_CHARS";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string6, operationParser0.DEFAULT_DESCRIPTION).when(link0).description();
      doReturn(operationParser0.COMMA, string3).when(link0).operationId();
      doReturn(string5).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      Class<MediaType> class0 = MediaType.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples(operationParser0.MEDIA_TYPE, example0);
      io.swagger.oas.models.media.Schema<String> schema1 = null;
      Components components2 = components1.addSchemas(operationParser0.COMMA, schema1);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components3 = components2.examples(hashMap0);
      RequestBody requestBody0 = new RequestBody();
      RequestBody requestBody1 = requestBody0.description(operationParser0.DEFAULT_DESCRIPTION);
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      RequestBody requestBody2 = requestBody1.content(content1);
      Components components4 = components3.addRequestBodies(operationParser0.MEDIA_TYPE, requestBody2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      int int1 = 998;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Server[] serverArray0 = new Server[6];
      String string0 = "f6]_K&";
      String string1 = "(6dpcyc@";
      String string2 = "Lfv2";
      String string3 = "com.fasterxml.jackson.core.util.DefaultIndenter";
      String string4 = "com.fasterxml.jackson.dataformat.yaml.YAMLFactory";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string1, string1).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "6n1U3,`NI9\"(C`";
      String string1 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(linkParameters0).expression();
      doReturn(string0, string0).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      OperationParser operationParser0 = new OperationParser();
      String string2 = "H[S[Qe";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMPONENTS_REF, operationParser0.DEFAULT_DESCRIPTION).when(externalDocumentation0).description();
      doReturn(string2, operationParser0.DEFAULT_DESCRIPTION).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser.LOGGER = operationParser0.LOGGER;
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string3 = "xMO;`tFwjj&G5;";
      String string4 = "";
      String string5 = "\\%E; ";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string3, string3).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string4).when(info0).termsOfService();
      doReturn(string5, operationParser0.COMMA).when(info0).title();
      doReturn(string4).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      String string6 = "ALLOW_UNQUOTED_CONTROL_CHARS";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string6, operationParser0.COMMA).when(link0).description();
      doReturn(operationParser0.COMMA, operationParser0.COMPONENTS_REF).when(link0).operationId();
      doReturn(string5).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples(operationParser0.MEDIA_TYPE, example0);
      io.swagger.oas.models.media.Schema<String> schema1 = null;
      Components components2 = components1.addSchemas(operationParser0.COMMA, schema1);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components3 = components2.examples(hashMap0);
      RequestBody requestBody0 = new RequestBody();
      RequestBody requestBody1 = requestBody0.description(operationParser0.DEFAULT_DESCRIPTION);
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      RequestBody requestBody2 = requestBody1.content(content1);
      Components components4 = components3.addRequestBodies(operationParser0.MEDIA_TYPE, requestBody2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = "6n1U3,`NI9\"(C`";
      String string1 = ",";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      OperationParser operationParser0 = new OperationParser();
      String string2 = "H[S[Qe";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMPONENTS_REF, operationParser0.DEFAULT_DESCRIPTION).when(externalDocumentation0).description();
      doReturn(string2, operationParser0.DEFAULT_DESCRIPTION).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser.LOGGER = operationParser0.LOGGER;
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string3 = "xMO;`tFwjj&G5;";
      String string4 = "";
      String string5 = "\\%E; ";
      String string6 = "{S7c./4/";
      String string7 = "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer";
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      String string8 = "ALLOW_UNQUOTED_CONTROL_CHARS";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).expression();
      doReturn(operationParser0.MEDIA_TYPE, (String) null).when(linkParameters1).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string8, operationParser0.DEFAULT_DESCRIPTION).when(link0).description();
      doReturn(operationParser0.COMMA, string3).when(link0).operationId();
      doReturn(string5).when(link0).operationRef();
      doReturn(linkParameters1).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
      Class<MediaType> class0 = MediaType.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      ExampleObject[] exampleObjectArray0 = new ExampleObject[7];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string6, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples(operationParser0.MEDIA_TYPE, example0);
      io.swagger.oas.models.media.Schema<String> schema1 = null;
      Components components2 = components1.addSchemas(operationParser0.COMMA, schema1);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components3 = components2.examples(hashMap0);
      RequestBody requestBody0 = new RequestBody();
      RequestBody requestBody1 = requestBody0.description(operationParser0.DEFAULT_DESCRIPTION);
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      RequestBody requestBody2 = requestBody1.content(content1);
      Components components4 = components3.addRequestBodies(operationParser0.MEDIA_TYPE, requestBody2);
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContent(content0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      int int0 = (-1052);
      int int1 = Integer.MAX_VALUE;
      int int2 = (-3886);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Server[] serverArray0 = new Server[6];
      String string0 = "PQ>fw";
      String string1 = "class Callback {\n";
      String string2 = "com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer";
      String string3 = "NYYYx/m";
      String string4 = "";
      String string5 = "f";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string3, string4).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[3];
      Content content0 = null;
      String string0 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string1 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string2 = "IT\"b\\ADk*o5+%Dtff";
      Link[] linkArray0 = new Link[9];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      String string3 = "<";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string0, string0, string1, string2).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string1, string0, string3, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      String[] stringArray0 = new String[3];
      String string4 = "D(b1QgT\\";
      stringArray0[0] = string4;
      String string5 = "java.langio.swagger.oas.models.info.Contact";
      stringArray0[1] = string5;
      String string6 = "";
      stringArray0[2] = string6;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = new Content[7];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      String string7 = null;
      String string8 = "java.langio.swagger.oas.models.media.MediaType";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(stringArray0[2], string3, string7, string1, string8).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content1).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content1).mediaType();
      contentArray0[0] = content1;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContents(contentArray0, components0);
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      Class<io.swagger.oas.models.parameters.Parameter> class0 = io.swagger.oas.models.parameters.Parameter.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components1 = components0.schemas(map0);
      String string1 = "no description";
      Example example0 = new Example();
      Components components2 = components1.addExamples(string1, example0);
      Operation operation0 = new Operation();
      Map<String, Callback> map1 = operation0.getCallbacks();
      Components components3 = components2.callbacks(map1);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map2 = mediaType0.getExamples();
      Content[] contentArray0 = null;
      String string2 = "O>Q@-[4pv#{Nb";
      io.swagger.oas.models.media.Schema<MediaType> schema1 = null;
      Components components4 = components2.addSchemas(string2, schema1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[3];
      Content content0 = null;
      String string0 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string1 = "ARRAY";
      Link[] linkArray0 = new Link[2];
      String string2 = "Bz#%_g[O-E5M}^ha6";
      String string3 = "cA2";
      String string4 = null;
      String string5 = "]nCBv5";
      String string6 = "#/components/schemas/";
      String string7 = "q%Y`hM_+g}AZ1";
      String string8 = "#()}_a@23y# ;7";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2, string1, string2, string3).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string1, string4, string1, string5, string6).when(link0).operationId();
      doReturn(string6, string4, string7, string0, string8).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Link[] linkArray1 = new Link[9];
      linkArray1[0] = link0;
      linkArray1[2] = link0;
      linkArray1[3] = link0;
      linkArray1[4] = link0;
      linkArray1[5] = link0;
      linkArray1[6] = link0;
      linkArray1[7] = link0;
      linkArray1[8] = link0;
      String string9 = "50*%QRM5YlPf:U!";
      String string10 = "u30b>~Z$DS";
      String string11 = "4,o!nR;YSJZ9SF@";
      String string12 = "JX7nK(zyc'Uj)4";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string0, string0, string1, string1).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray1).when(apiResponse0).links();
      doReturn(string9, string0, string10, string11, string12).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      String[] stringArray0 = new String[3];
      String string13 = "D(b1QgT\\";
      stringArray0[0] = string13;
      String string14 = "java.langio.swagger.oas.models.info.Contact";
      stringArray0[1] = string14;
      String string15 = "";
      stringArray0[2] = string15;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = new Content[7];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      String string16 = "";
      String string17 = "java.langio.swagger.oas.models.callbacks.Callback";
      String string18 = "java.lang";
      String string19 = "java.langio.swagger.oas.models.parameters.Parameter";
      String string20 = null;
      String string21 = ">2D'<=`6s_ZE}";
      String string22 = "";
      String string23 = null;
      String string24 = "e&_/vRw'2#6Tp";
      String string25 = "LABEL";
      String string26 = "Q ~@URQ!";
      String string27 = "S$/I*r:[B-TN=mZP";
      String string28 = "Ez)B]}pn}#>z6";
      String string29 = "java.langjava.lang.Integer";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string19, string4, string20, string2, string21).when(exampleObject0).externalValue();
      doReturn(string16, string16, stringArray0[1], string17, string18).when(exampleObject0).name();
      doReturn(string22, string23, string24, string3, string10).when(exampleObject0).summary();
      doReturn(string25, string26, string27, string28, string29).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      String string30 = "XRj";
      String string31 = "]UW+M?Iz";
      String string32 = "-rsl";
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content1).examples();
      doReturn(string30, string31, string16, string16).when(content1).mediaType();
      contentArray0[0] = content1;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      ArraySchema arraySchema0 = null;
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      boolean boolean0 = false;
      String string0 = "*2)I!W/5i @K$CYX";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string1 = "java.langio.swagger.oas.models.callbacks.Callback";
      String string2 = "";
      String string3 = "java.langio.swagger.oas.models.media.Content";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      io.swagger.oas.annotations.info.License license0 = mock(io.swagger.oas.annotations.info.License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string4 = "java.langio.swagger.oas.models.responses.ApiResponses";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string2).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string4).when(info0).termsOfService();
      doReturn(string2).when(info0).title();
      doReturn(string3, string2).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Explode explode2 = Explode.FALSE;
      Explode explode3 = Explode.FALSE;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[5];
      Parameter parameter1 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter1;
      parameterArray0[4] = parameter0;
      String string5 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      Link link1 = null;
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link1);
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      String string6 = null;
      String string7 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact1).email();
      doReturn(string6).when(contact1).name();
      doReturn(string7, (String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact1);
      String string8 = "KXg\\*|2IT";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string5;
      stringArray0[1] = string1;
      stringArray0[2] = string8;
      stringArray0[3] = string1;
      stringArray0[4] = string2;
      String string9 = "4v!I";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string10 = "R3.cRW";
      int int0 = 1124;
      String string11 = null;
      int int1 = 6;
      String string12 = "java.langio.swagger.oas.models.parameters.Parameter";
      boolean boolean2 = true;
      String string13 = "'d/+9G";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string8, (String) null).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean0).when(schema1).deprecated();
      doReturn(string9, (String) null).when(schema1).description();
      doReturn(string2, string1, (String) null).when(schema1).example();
      doReturn(boolean0).when(schema1).exclusiveMaximum();
      doReturn(boolean1).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema1).externalDocs();
      doReturn(string10, (String) null).when(schema1).format();
      doReturn(int0).when(schema1).maxLength();
      doReturn(0).when(schema1).maxProperties();
      doReturn(string11).when(schema1).maximum();
      doReturn(int1, 0).when(schema1).minProperties();
      doReturn(stringArray0[0]).when(schema1).minimum();
      doReturn(string12, (String) null).when(schema1).pattern();
      doReturn(boolean2, false).when(schema1).readOnly();
      doReturn(string13, (String) null).when(schema1).ref();
      doReturn(string6).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema1);
      String[] stringArray1 = new String[5];
      stringArray1[0] = string11;
      stringArray1[1] = string5;
      stringArray1[2] = string1;
      stringArray1[3] = string5;
      stringArray1[4] = string10;
      String string14 = " of 4-char base64 unit: can only used between units";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      int int2 = 3308;
      int int3 = 16;
      String string15 = ".96";
      String string16 = "0RL6]g1B:xM_|G+!4-c";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(schema2)._default();
      doReturn(stringArray1).when(schema2)._enum();
      doReturn(boolean2, false).when(schema2).deprecated();
      doReturn(stringArray1[1]).when(schema2).description();
      doReturn(string14, string3, (String) null, (String) null).when(schema2).example();
      doReturn(boolean1).when(schema2).exclusiveMaximum();
      doReturn(boolean1).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema2).externalDocs();
      doReturn(stringArray1[1]).when(schema2).format();
      doReturn(int2).when(schema2).maxLength();
      doReturn(0).when(schema2).maxProperties();
      doReturn(string7).when(schema2).maximum();
      doReturn(int3, 0).when(schema2).minProperties();
      doReturn(string15, (String) null).when(schema2).minimum();
      doReturn(string16, (String) null).when(schema2).pattern();
      doReturn(boolean2, false).when(schema2).readOnly();
      doReturn(string14, (String) null).when(schema2).ref();
      doReturn(stringArray1[4], (String) null).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema2);
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      String string0 = "no description";
      String string1 = "java.langio.swagger.oas.models.media.Content";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string2 = "io.swagger.jaxrs2.OperationParser";
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      String string3 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      boolean boolean1 = false;
      String string4 = "NM|aHR>lWth0";
      String string5 = "@uwy";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string4).when(externalDocumentation0).description();
      doReturn(string5, string2).when(externalDocumentation0).url();
      int int0 = (-5115);
      String string6 = "java.lang";
      boolean boolean2 = false;
      String string7 = "java.lang";
      String string8 = "FN]";
      String string9 = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
      String string10 = "java.langjava.lang.String";
      String string11 = "]JQHXX=HWcf_2CGW";
      String string12 = "java.lang";
      String string13 = "java.lang";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string8).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean2).when(schema0).deprecated();
      doReturn(string0, string1).when(schema0).description();
      doReturn(string3, string2, string9, string10).when(schema0).example();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string3, string11).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string6).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(string6, string9).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string7, string12).when(schema0).ref();
      doReturn(string2, string13).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Server[] serverArray0 = new Server[4];
      String string14 = ", field: ";
      String string15 = "java.langio.swagger.jaxrs2.OperationParser";
      String string16 = null;
      ServerVariable[] serverVariableArray0 = new ServerVariable[2];
      String string17 = "java.langio.swagger.oas.models.links.Link";
      String string18 = ";D6=,4";
      String string19 = "C#DxEh:79QSJ5";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string12, string17, string10, string16, string10).when(serverVariable0).description();
      doReturn(string6, string4, string3, string18, string19).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      String string20 = "%33";
      String string21 = "|Nk";
      String string22 = "=i4QPSPpx Y";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string3, string9, string20, string21).when(server0).description();
      doReturn(string15, string12, string8, string5, string22).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
  }
}
