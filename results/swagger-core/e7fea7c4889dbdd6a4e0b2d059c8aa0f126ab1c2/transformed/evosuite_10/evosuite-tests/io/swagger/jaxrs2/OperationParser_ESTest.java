/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 01:09:06 GMT 2020
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.Parameter;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.Link;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.ArraySchema;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.responses.ApiResponse;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.parameters.RequestBody;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.OAuthFlows;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.function.BiFunction;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "=2??I6#";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(license0).name();
      doReturn(string0, string0).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string1 = ",";
      String string2 = "hvyXl";
      String string3 = ",";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string3).when(license1).name();
      doReturn(string2, string0).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license1);
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      String string4 = "*Ag.>d*";
      String string5 = "java.langio.swagger.oas.models.PathItem";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(linkParameters0).expression();
      doReturn(string4, string5).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = string2;
      stringArray1[1] = string4;
      stringArray1[2] = string1;
      stringArray1[3] = string4;
      stringArray1[4] = string1;
      boolean boolean0 = true;
      String string6 = "25Ex;;7f)V\"95R$b";
      String string7 = "java.langio.swagger.oas.models.responses.ApiResponse";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string7).when(externalDocumentation0).description();
      doReturn(string6, string5).when(externalDocumentation0).url();
      int int0 = 2524;
      String string8 = "";
      String string9 = null;
      String string10 = "Z'kg";
      String string11 = "Zf914eO2<9bBmTYg";
      String string12 = "Class ";
      String string13 = "h!1F|#3_\"y)zTy6H";
      int int1 = 562;
      String string14 = "1U$|l|*TVF(sw";
      String string15 = "com.fasterxml.jackson.databind.node.ShortNode";
      String string16 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(schema0)._default();
      doReturn(stringArray1).when(schema0)._enum();
      doReturn(boolean0, boolean0).when(schema0).deprecated();
      doReturn(string6, string10).when(schema0).description();
      doReturn(string1, string0, string13, string6).when(schema0).example();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string1, string12).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1, int0).when(schema0).maxProperties();
      doReturn(string8).when(schema0).maximum();
      doReturn(int0, int1).when(schema0).minProperties();
      doReturn(string9).when(schema0).minimum();
      doReturn(string10, string14).when(schema0).pattern();
      doReturn(boolean0, boolean0).when(schema0).readOnly();
      doReturn(string11, string15).when(schema0).ref();
      doReturn(string12, string16).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      Server[] serverArray0 = new Server[3];
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "zn*pGa218fKx8C4du";
      String string1 = "jS?T{~}iOl\"OOi";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(license0).name();
      doReturn(string0, string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string0, string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string2 = "    anyOf: ";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string1).when(license1).name();
      doReturn(string0, string2).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license1);
      int int0 = 4;
      int int1 = 6386;
      Class<RequestBody> class0 = RequestBody.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Class<String> class1 = String.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      String string3 = "java.lang";
      String string4 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string3).when(contact0).email();
      doReturn(string0, string1).when(contact0).name();
      doReturn(string3, string4).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional4 = OperationParser.getContact(contact0);
      String string5 = "GIzppeQSan9sT8";
      String string6 = "Cannot call setValue() on constructor parameter of ";
      String string7 = "Dqh6b/5%wk}";
      String string8 = "b-P[2+&/v-Loa";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string8).when(linkParameters0).expression();
      doReturn(string3, string3).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string6).when(link0).description();
      doReturn(string0, string7).when(link0).operationId();
      doReturn(string5).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional5 = OperationParser.getLink(link0);
      MediaType mediaType0 = null;
      String string9 = "Eoa|";
      String string10 = "\\$FdvV<kDV*q,Kcm!";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string9, (String) null).when(exampleObject0).externalValue();
      doReturn(string5, string6, string2, string5).when(exampleObject0).name();
      doReturn(string10, (String) null).when(exampleObject0).summary();
      doReturn(string9, (String) null, (String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      Content content0 = null;
      String string0 = "";
      String string1 = "^[_:k1";
      Link[] linkArray0 = new Link[5];
      String string2 = "(Cks";
      String string3 = null;
      String string4 = "[@Rkj'f";
      String string5 = null;
      String string6 = null;
      String string7 = "e9FH$eY#ZmR";
      String string8 = "gdo{e";
      String string9 = "2W";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3, string1, string4, string5).when(link0).description();
      doReturn((String) null, (String) null, (String) null).when(link0).name();
      doReturn(string6, string0, string7, string8, string3).when(link0).operationId();
      doReturn(string0, string9, string7, string2, string5).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      String string10 = "";
      String string11 = "b)3eN|Us";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string0, string1, string1).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string0, string10, string1, string11, string0).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string12 = "";
      RequestBody requestBody0 = new RequestBody();
      String string13 = "$5I";
      RequestBody requestBody1 = requestBody0.description(string13);
      String string14 = "@<45-GR";
      RequestBody requestBody2 = requestBody1.$ref(string14);
      Boolean boolean0 = Boolean.FALSE;
      RequestBody requestBody3 = requestBody2.required(boolean0);
      Components components1 = components0.addRequestBodies(string12, requestBody3);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Content[] contentArray0 = new Content[5];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[9];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      exampleObjectArray0[7] = exampleObjectArray0[6];
      exampleObjectArray0[8] = exampleObjectArray0[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      Components components0 = new Components();
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components1 = components0.examples(hashMap0);
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      Components components2 = components1.securitySchemes(hashMap1);
      String string0 = "xo?jIK[5<e*U-a";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      String string1 = null;
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.description(string1);
      Components components3 = components2.addResponses(string0, apiResponse1);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components3);
      Parameter[] parameterArray0 = new Parameter[5];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      Server server1 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server1).description();
      doReturn((String) null).when(server1).url();
      Optional<io.swagger.oas.models.servers.Server> optional4 = OperationParser.getServer(server1);
      OperationParser operationParser0 = new OperationParser();
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, Header> map0 = components0.getHeaders();
      Components components1 = components0.headers(map0);
      String string0 = "P=~TIz]";
      io.swagger.oas.models.media.Schema<OperationParser> schema0 = null;
      Components components2 = components1.addSchemas(string0, schema0);
      Optional<RequestBody> optional5 = OperationParser.getRequestBody(requestBody0, components2);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional6 = OperationParser.getLicense(license0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map1 = arraySchema0.getProperties();
      components1.setSchemas(map1);
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "kpf$21rg !-";
      String string1 = "DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s";
      String string2 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      String string3 = "io.swagger.jaxrs2.OperationParser";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string4 = null;
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string1, string3).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string2, string0).when(info0).termsOfService();
      doReturn(string0, string4).when(info0).title();
      doReturn(string1, string2).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string5 = "io.swagge";
      OperationParser operationParser0 = new OperationParser();
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[0];
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, operationParser0.DEFAULT_DESCRIPTION).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, Header> map0 = components0.getHeaders();
      Components components1 = components0.headers(map0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, io.swagger.oas.models.links.Link> map1 = apiResponse0.getLinks();
      Components components2 = components1.links(map1);
      String string6 = "P=~TIz]";
      io.swagger.oas.models.media.Schema<OperationParser> schema0 = null;
      components1.setLinks(map1);
      Components components3 = components1.addSchemas(string6, schema0);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components3);
      Parameter[] parameterArray0 = new Parameter[2];
      boolean boolean1 = false;
      ArraySchema arraySchema0 = null;
      boolean boolean2 = true;
      Explode explode0 = Explode.DEFAULT;
      String string7 = "'Hk";
      boolean boolean3 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null, (Class) null, (Class) null, (Class) null).when(schema1).implementation();
      String string8 = null;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(arraySchema0, (ArraySchema) null).when(parameter0).array();
      doReturn((Object) contentArray0, (Object) null).when(parameter0).content();
      doReturn(boolean2, false, false, false).when(parameter0).deprecated();
      doReturn(string6, (String) null, (String) null, (String) null).when(parameter0).description();
      doReturn(explode0, explode0, explode0, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn(string0, (String) null, (String) null, (String) null).when(parameter0).in();
      doReturn(string7, (String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(boolean3, false, false, false).when(parameter0).required();
      doReturn(schema1, schema1, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn(string8, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      String string2 = "! wmBvUnk5V7Ga79";
      String string3 = "aqDskQQ(Ynk";
      String string4 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      Class<io.swagger.oas.models.media.Content> class0 = io.swagger.oas.models.media.Content.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      Server[] serverArray0 = new Server[6];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      Optional<io.swagger.oas.models.servers.Server> optional4 = OperationParser.getServer(serverArray0[0]);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional5 = OperationParser.getArraySchema(arraySchema0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Optional<io.swagger.oas.models.info.Contact> optional6 = OperationParser.getContact(contact0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional7 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Server[] serverArray1 = new Server[7];
      serverArray1[0] = server0;
      serverArray1[1] = server0;
      serverArray1[2] = server0;
      serverArray1[3] = server0;
      serverArray1[4] = server0;
      serverArray1[5] = server0;
      serverArray1[6] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional8 = OperationParser.getServers(serverArray1);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Link[] linkArray0 = new Link[2];
      String string0 = ":&\"jNR=CRc,3";
      String string1 = "*/*";
      String string2 = "java.lang";
      String string3 = null;
      String string4 = "com.fasterxml.jackson.databind.ser.SerializerCache";
      String string5 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      linkArray0[1] = linkArray0[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      String string6 = ")9Qw>ux#IY<-_l";
      String string7 = "";
      ServerVariable[] serverVariableArray0 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string7).when(server0).description();
      doReturn(string1, string0).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String[] stringArray0 = new String[5];
      String string0 = "Numeric value (%s) out of range of long (%d - %s)";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = ">w_Au#S#3&";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      int int0 = (-793);
      int int1 = 62;
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Class<Object> class1 = Object.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      MediaType mediaType0 = new MediaType();
      String string0 = "G`pW}<HL 2M\\";
      io.swagger.oas.models.media.Schema<Tag> schema2 = new io.swagger.oas.models.media.Schema<Tag>();
      String string1 = "U^5o^kU_zz(,v^6";
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      String string2 = "R-%nBg6(&j-";
      Class<MediaType> class2 = MediaType.class;
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(schema3).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string2, (String) null).when(content0).mediaType();
      doReturn(schema3).when(content0).schema();
      String[] stringArray0 = new String[9];
      String string3 = "";
      stringArray0[0] = string3;
      stringArray0[1] = string2;
      stringArray0[2] = string2;
      stringArray0[3] = string0;
      stringArray0[4] = string1;
      stringArray0[5] = string0;
      stringArray0[6] = string1;
      stringArray0[7] = string2;
      stringArray0[8] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "/Usd9+d";
      String string1 = "#/components/schemas/";
      String string2 = null;
      String string3 = "ynq/\\#k?O6<yjJ7]\\So";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(license0).name();
      doReturn(string1, string3).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string1).when(license1).name();
      doReturn(string1, string2).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license1);
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      String string4 = "";
      String string5 = "java.langio.swagger.oas.models.links.Link";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(linkParameters0).expression();
      doReturn(string1, string5).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      String string6 = "io.swagger.jaxrs2.OperationParser";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(externalDocumentation0).description();
      doReturn(string1, string6).when(externalDocumentation0).url();
      String string7 = "Invalid 'any-setter' annotation on field ";
      int int0 = (-131);
      String string8 = "java.langio.swagger.oas.models.PathItem";
      boolean boolean2 = false;
      String string9 = "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer";
      String string10 = "java.lang";
      boolean boolean3 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string10).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1, string0).when(schema0).description();
      doReturn(string0, string1, string3, string2).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string7, string4).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string1).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string0).when(schema0).minimum();
      doReturn(string8, string10).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string9, string4).when(schema0).ref();
      doReturn(string7, string2).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      Server[] serverArray0 = new Server[3];
      String string11 = "W";
      String string12 = null;
      String string13 = "C";
      ServerVariable[] serverVariableArray0 = new ServerVariable[2];
      String string14 = "java.langio.swagger.oas.models.info.Contact";
      String string15 = "IGNORE_DUPLICATE_MODULE_REGISTRATIONS";
      String string16 = "Problem with definition of ";
      String string17 = "D\\,gEIEh|E";
      String string18 = "java.langio.swagger.jaxrs2.OperationParser";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string14, string15, string16, string4, string1).when(serverVariable0).description();
      doReturn(string14, string1, string4, string17, string18).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      String string19 = null;
      String string20 = "no description";
      String string21 = "4_L7g";
      String string22 = "java.langio.swagger.oas.models.info.License";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string9, string11, string16, string19, string20).when(server0).description();
      doReturn(string13, string0, string21, string22, string17).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      Optional<List<io.swagger.oas.models.servers.Server>> optional4 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Class<io.swagger.oas.models.parameters.Parameter> class0 = io.swagger.oas.models.parameters.Parameter.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String string0 = "";
      String string1 = "io.swagger.jaxrs2.OperationParser";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      Map<String, Callback> map0 = components0.getCallbacks();
      Components components1 = components0.callbacks(map0);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Link[] linkArray0 = new Link[4];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components1 = components0.callbacks(hashMap0);
      Map<String, SecurityScheme> map1 = components0.getSecuritySchemes();
      Components components2 = components1.securitySchemes(map1);
      String string0 = "+))oeMF|a$";
      Example example0 = new Example();
      Example example1 = example0.summary(string0);
      Components components3 = components2.addExamples(string0, example1);
      Link[] linkArray0 = new Link[2];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray0);
      Components components4 = components3.links(map2);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "8@gz!";
      stringArray0[1] = string1;
      String string2 = "localizedMessage";
      stringArray0[2] = string2;
      String string3 = "D\\WhkBV8rW?L@T=3l";
      stringArray0[3] = string3;
      String string4 = "no description";
      stringArray0[4] = string4;
      String string5 = "T@";
      stringArray0[5] = string5;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap0 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      String string6 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      String string7 = "?*'Pl&}5F\"*}Y=_j&F";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.link(string7, link0);
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.description(string6);
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Content content2 = content1.addMediaType(stringArray0[1], mediaType0);
      io.swagger.oas.models.media.Content content3 = content2.addMediaType(string5, mediaType0);
      io.swagger.oas.models.media.Content content4 = content3.addMediaType(stringArray0[4], mediaType0);
      String string8 = "";
      io.swagger.oas.models.media.Content content5 = content4.addMediaType(string8, mediaType0);
      io.swagger.oas.models.responses.ApiResponse apiResponse3 = apiResponse2.content(content5);
      Map<String, Header> map0 = link0.getHeaders();
      io.swagger.oas.models.responses.ApiResponse apiResponse4 = apiResponse3.headers(map0);
      io.swagger.oas.models.responses.ApiResponse apiResponse5 = hashMap0.put(string6, apiResponse4);
      Components components1 = components0.responses(hashMap0);
      String string9 = components1.toString();
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Components components0 = new Components();
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Map<String, Example> map0 = null;
      components0.setExamples(map0);
      schema0.setMultipleOf(bigDecimal0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema0.getProperties();
      Components components1 = components0.schemas(map1);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      components1.setSchemas(map1);
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, Header> map0 = components0.getHeaders();
      Components components1 = components0.headers(map0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components2 = components1.examples(hashMap0);
      String string0 = "";
      io.swagger.oas.models.media.Schema<String> schema1 = null;
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema2 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      Boolean boolean0 = null;
      schema2.setDeprecated(boolean0);
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap1 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      Components components3 = components2.parameters(hashMap1);
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema2.getProperties();
      components0.setSchemas(map1);
      Components components4 = components2.addSchemas(string0, schema1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      MediaType mediaType1 = mediaType0.example(string0);
      Map<String, Example> map0 = mediaType1.getExamples();
      MediaType mediaType2 = mediaType1.examples(map0);
      Map<String, Encoding> map1 = null;
      MediaType mediaType3 = mediaType2.encoding(map1);
      Encoding encoding0 = new Encoding();
      Encoding encoding1 = encoding0.style(string0);
      Boolean boolean0 = Boolean.TRUE;
      Encoding encoding2 = encoding1.explode(boolean0);
      MediaType mediaType4 = mediaType3.addEncoding(string0, encoding2);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      String string1 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string2 = "zCje9.!";
      String string3 = "l{";
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      String string0 = ".co>";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components2 = components1.schemas(map0);
      io.swagger.oas.models.media.Schema<Tag> schema0 = new io.swagger.oas.models.media.Schema<Tag>();
      Components components3 = components2.addSchemas(operationParser0.DEFAULT_DESCRIPTION, schema0);
      Header header0 = new Header();
      io.swagger.oas.models.media.Content content0 = null;
      Header header1 = header0.content(content0);
      String string1 = "no description";
      Header header2 = header1.example(string1);
      Components components4 = components3.addHeaders(string0, header2);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.type.ReferenceType";
      String string1 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      String string2 = "*Q3z^Wg@7E~`";
      String string3 = "Dj`^";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string2, (String) null).when(contact0).name();
      doReturn(string3, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      String string0 = "|<<6KyB^/BfH";
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      Components components1 = components0.parameters(hashMap0);
      String string1 = "I35j";
      Header header0 = new Header();
      Header header1 = header0.$ref(string0);
      Header header2 = header1.example(string1);
      List<Example> list0 = header0.getExamples();
      Header header3 = header2.examples(list0);
      Header.StyleEnum header_StyleEnum0 = Header.StyleEnum.SIMPLE;
      Header header4 = header3.style(header_StyleEnum0);
      Components components2 = components0.addHeaders(string1, header4);
      Example example0 = new Example();
      Components components3 = components0.addExamples(string0, example0);
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      Components components4 = components3.securitySchemes(hashMap1);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components3);
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      Optional<Set<Tag>> optional4 = OperationParser.getTags(stringArray0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional5 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(externalDocumentation0).description();
      doReturn(string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser operationParser0 = new OperationParser();
      String string2 = "49cxoacZKy";
      String string3 = "";
      String string4 = "+&nVXo2x";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string2, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string3).when(info0).termsOfService();
      doReturn(string0).when(info0).title();
      doReturn(string4, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, Example> map0 = components0.getExamples();
      Components components1 = components0.examples(map0);
      String string0 = "|O< lTH~M-:W_>S`3!";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components2 = components1.addSchemas(string0, arraySchema0);
      RequestBody requestBody0 = new RequestBody();
      Components components3 = components2.addRequestBodies(string0, requestBody0);
      String string1 = null;
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = null;
      Components components4 = components3.addResponses(string1, apiResponse1);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components4);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      Components components0 = new Components();
      String string0 = "`|~8BRgyLVOg4F";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string0, example0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content>();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      String string1 = "JIPC#EK5K";
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string1);
      Map<String, io.swagger.oas.models.media.Schema> map0 = arraySchema2.getProperties();
      components0.setSchemas(map0);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components0);
      Parameter[] parameterArray0 = new Parameter[3];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional4 = OperationParser.getServers(serverArray0);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components1 = components0.callbacks(hashMap0);
      String string0 = "jgaJg-I9-";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components2 = components1.addResponses(string0, apiResponse0);
      Components components3 = components2.links(map0);
      HashMap<String, Example> hashMap1 = new HashMap<String, Example>();
      Components components4 = components3.examples(hashMap1);
      Optional<RequestBody> optional5 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      Server[] serverArray0 = new Server[4];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      Parameter[] parameterArray0 = new Parameter[4];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      ApiResponses apiResponses2 = apiResponses1.addApiResponse(apiResponses0.DEFAULT, apiResponse0);
      Components components1 = components0.responses(apiResponses2);
      Map<String, io.swagger.oas.models.media.Schema> map0 = null;
      Components components2 = components1.schemas(map0);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components3 = components2.requestBodies(hashMap0);
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      String string0 = null;
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.example(string0);
      Map<String, Example> map1 = parameter2.getExamples();
      Components components4 = components3.examples(map1);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      MediaType mediaType0 = new MediaType();
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      MediaType mediaType1 = mediaType0.example(string0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType1, exampleObject0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Optional<io.swagger.oas.models.servers.Server> optional4 = OperationParser.getServer(server0);
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      Server[] serverArray0 = new Server[7];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      Parameter parameter0 = null;
      Components components0 = new Components();
      Map<String, Example> map0 = components0.getExamples();
      Components components1 = components0.examples(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map1 = arraySchema0.getProperties();
      Components components2 = components1.schemas(map1);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Map<String, Header> map2 = link0.getHeaders();
      Components components3 = components2.headers(map2);
      String string0 = ",";
      Example example0 = new Example();
      Components components4 = components3.addExamples(string0, example0);
      Optional<io.swagger.oas.models.parameters.Parameter> optional1 = OperationParser.getParameter(parameter0, components4);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components1 = components0.securitySchemes(hashMap0);
      String string0 = "no description";
      RequestBody requestBody0 = new RequestBody();
      Components components2 = components1.addRequestBodies(string0, requestBody0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, io.swagger.oas.models.links.Link> map0 = apiResponse0.getLinks();
      Components components3 = components2.links(map0);
      String string1 = "\"&i~*P)";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components4 = components3.addLinks(string1, link0);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Server server1 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server1).description();
      doReturn((String) null).when(server1).url();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server1);
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components1 = components0.schemas(map0);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map1 = components0.getResponses();
      Components components2 = components1.responses(map1);
      String string0 = "!-4dbC{l.OTH";
      RequestBody requestBody0 = new RequestBody();
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      RequestBody requestBody1 = requestBody0.required(boolean1);
      Components components3 = components2.addRequestBodies(string0, requestBody1);
      String string1 = "";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      String string2 = "@$*9K";
      io.swagger.oas.models.links.Link link1 = link0.operationId(string2);
      io.swagger.oas.models.servers.Server server2 = new io.swagger.oas.models.servers.Server();
      io.swagger.oas.models.links.Link link2 = link1.server(server2);
      Components components4 = components3.addLinks(string1, link2);
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional3 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(info0).description();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string0).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string2 = "'}!95_fKBS[b|";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(server0).description();
      doReturn(string1).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "";
      String string1 = "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(link0).description();
      doReturn(string0).when(link0).operationId();
      doReturn(string1, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      String string2 = "A(}=$o:";
      String string3 = "N*oN`<";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string2, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string2, (String) null).when(info0).title();
      doReturn(string3, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      Parameter[] parameterArray0 = new Parameter[2];
      boolean boolean0 = false;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      boolean boolean2 = false;
      String string4 = "n0kK1>ehr!";
      Explode explode0 = Explode.FALSE;
      String string5 = "com.fasterxml.jackson.databind.ser.std.IterableSerializer";
      String string6 = "NYq(r7P{a";
      boolean boolean3 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "_vY";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string0, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = null;
      String string1 = "    securitySchemes: ";
      String string2 = "";
      String string3 = "(binary value of %d bytes)";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1, (String) null).when(info0).termsOfService();
      doReturn(string2).when(info0).title();
      doReturn(string3, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      int int0 = 6;
      int int1 = 1;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = new String[5];
      String string4 = "no description";
      stringArray0[0] = string4;
      String string5 = "com.fasterxml.jackson.core.json.UTF8JsonGenerator";
      stringArray0[1] = string5;
      String string6 = "G'5@j";
      stringArray0[2] = string0;
      String string7 = "was expecting comma to separate ";
      stringArray0[3] = string7;
      String string8 = "EWKVEr>u mU";
      stringArray0[4] = string8;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "=";
      String string1 = "GkCAcg_FM[";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string1, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Server[] serverArray0 = new Server[5];
      String string2 = "]Q]Ws2s?";
      String string3 = "NUMBER";
      String string4 = "<e\\ T}$8D4wq";
      String string5 = "no description";
      String string6 = "";
      String string7 = "?c3.";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string0).when(server0).description();
      doReturn(string1, string5).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "zn*pGa218fKx8C4du";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string1 = "    anyOf: ";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(license1).name();
      doReturn(string0, (String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license1);
      int int0 = 4;
      int int1 = 6386;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      String string2 = "java.lang";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string2, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional4 = OperationParser.getContact(contact0);
      String string3 = "GIzppeQSan9sT8";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(link0).description();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string3).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional5 = OperationParser.getLink(link0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string0 = "zYAh.&nQ{xZib8]-$4";
      String string1 = "Unexpected end-of-String in base64 content";
      String string2 = "*{1Fe)<Lz;L.jO5fi*M";
      String string3 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string4 = "gm(|$:yzw^c5";
      Header header0 = null;
      Components components1 = components0.addHeaders(string4, header0);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components2 = components1.schemas(map0);
      String string5 = "3lC(.{Gpa_";
      Example example0 = new Example();
      String string6 = "";
      Components components3 = components2.addExamples(string5, example0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = null;
      Components components4 = components3.parameters(map1);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "<#QJ@, DtEsHNM2v2|[";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license1).name();
      doReturn(string0, (String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license1);
      String[] stringArray0 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 224;
      int int1 = 1;
      String string1 = "zQ[]MY";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string0, (String) null).when(schema0).description();
      doReturn(string0, string0, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string0, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string0).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string0).when(schema0).minimum();
      doReturn(string0, (String) null).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(string1, (String) null).when(schema0).ref();
      doReturn(string0, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      Server[] serverArray0 = new Server[3];
      String string2 = "io.swagger.jaxrs2.OperationParser";
      String string3 = "8EyCB-0yz)G";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string1, string0).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "i_rmyOB.";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      String string1 = "";
      stringArray0[3] = string1;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      boolean boolean0 = true;
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = null;
      int int0 = (-1074);
      int int1 = 4105;
      String string2 = ",";
      String string3 = ",";
      String string4 = "2f=!|IYz>H";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(stringArray0[4], (String) null).when(schema0).description();
      doReturn(stringArray0[5], stringArray0[1], (String) null, (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[0], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(stringArray0[2]).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(string3, (String) null).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(string0, (String) null).when(schema0).ref();
      doReturn(string4, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(stringArray0[1], stringArray0[2]).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[0];
      boolean boolean1 = false;
      String string0 = "qE9";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      String string1 = "#/components/schemas/";
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(boolean1).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string1, (String) null).when(parameter0).name();
      doReturn(boolean2, false).when(parameter0).required();
      doReturn(string1, (String) null).when(parameter0).style();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.#/COMPONENTS/SCHEMAS/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      contentArray0[8] = contentArray0[7];
      boolean boolean1 = true;
      String string0 = "z~~/(\\t2,KO`AoC";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      String string1 = "laP6oeY&K<1l_=LhL.k";
      String string2 = "Y2[G;`oh{K";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string3 = "XU$a|0";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string1, (String) null).when(parameter0).in();
      doReturn(string2, (String) null).when(parameter0).name();
      doReturn(boolean1, false).when(parameter0).required();
      doReturn(string3, (String) null).when(parameter0).style();
      Components components0 = new Components();
      String string4 = "";
      RequestBody requestBody0 = new RequestBody();
      RequestBody requestBody1 = requestBody0.$ref(string4);
      RequestBody requestBody2 = requestBody1.description(string4);
      Components components1 = components0.addRequestBodies(string4, requestBody2);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components1);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.XU$A|0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = ";O";
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      String string1 = "8_$DAqTD}FA";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = (-533);
      String string2 = "i]\"N*#to J>";
      String string3 = "#/components/schemas/";
      String string4 = "com.fasterxml.jackson.databind.AbstractTypeResolver";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string0, (String) null).when(schema0).description();
      doReturn(string1, string1, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string0, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string2).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(string3, (String) null).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(string1, (String) null).when(schema0).ref();
      doReturn(string4, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(externalDocumentation1).description();
      doReturn(string4, (String) null).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation1);
      String string5 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string2, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string5).when(info0).termsOfService();
      doReturn(string3, (String) null).when(info0).title();
      doReturn(string5).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string6 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(license0).name();
      doReturn(string6).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional4 = OperationParser.getServers(serverArray0);
      String string7 = "io.swagger.jaxrs2.OperationParser";
      boolean boolean1 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string7, (String) null).when(requestBody0).description();
      doReturn(boolean1).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components1 = components0.callbacks(hashMap0);
      String string8 = "jgaJg-I9-";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components2 = components1.addResponses(string8, apiResponse0);
      Components components3 = components2.links(map0);
      HashMap<String, Example> hashMap1 = new HashMap<String, Example>();
      Components components4 = components3.examples(hashMap1);
      Optional<RequestBody> optional5 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "*/*";
      boolean boolean0 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      Components components1 = components0.parameters(hashMap0);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = components0.getResponses();
      Components components2 = components1.responses(map0);
      String string1 = "";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Example example0 = new Example();
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.addExamples(string1, example0);
      Components components3 = components2.addParameters(string1, parameter1);
      String string2 = "";
      RequestBody requestBody1 = new RequestBody();
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      String string3 = null;
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Content content1 = content0.addMediaType(string3, mediaType0);
      RequestBody requestBody2 = requestBody1.content(content1);
      String string4 = null;
      RequestBody requestBody3 = requestBody2.description(string4);
      Components components4 = components3.addRequestBodies(string2, requestBody3);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      Server[] serverArray0 = new Server[9];
      String string5 = null;
      String string6 = "";
      String string7 = "jE?'";
      String string8 = "6*lM>[@CD)'j";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(server0).description();
      doReturn(string7, string8).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      serverArray0[8] = serverArray0[7];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = null;
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components1 = components0.addSchemas(string0, arraySchema0);
      String string1 = "CqrzNl";
      Example example0 = new Example();
      Example example1 = example0.summary(string1);
      Components components2 = components1.addExamples(string1, example1);
      String string2 = "~'7,>w]U_9R34'w[";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = null;
      Components components3 = components2.addResponses(string2, apiResponse0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[9];
      ApiResponse apiResponse1 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse1).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse1).description();
      apiResponseArray0[0] = apiResponse1;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      String string2 = "-bY7#m5C7};juN/N";
      String string3 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1).when(info0).termsOfService();
      doReturn(string2, (String) null).when(info0).title();
      doReturn(string3).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = null;
      boolean boolean1 = false;
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      String string4 = "";
      String string5 = "vJ'o/uP@Xm\\<N?)";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(arraySchema0).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1).when(parameter0).deprecated();
      doReturn(string3).when(parameter0).description();
      doReturn(explode0, explode1, explode0).when(parameter0).explode();
      doReturn(string4).when(parameter0).in();
      doReturn(string5, (String) null).when(parameter0).name();
      doReturn(boolean0).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string4).when(parameter0).style();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = null;
      Components components1 = components0.parameters(map0);
      Map<String, io.swagger.oas.models.links.Link> map1 = components0.getLinks();
      Components components2 = components1.links(map1);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components3 = components2.requestBodies(hashMap0);
      Map<String, SecurityScheme> map2 = null;
      Components components4 = components3.securitySchemes(map2);
      Optional<io.swagger.oas.models.parameters.Parameter> optional1 = OperationParser.getParameter(parameter0, components4);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      MediaType mediaType0 = null;
      String string0 = "9TH[8z+Uix.K@";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      Content content0 = null;
      String string0 = "";
      String string1 = "^[_:k1";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string0, string1, string1).when(apiResponse0).description();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string2 = "";
      RequestBody requestBody0 = new RequestBody();
      String string3 = "$5I";
      RequestBody requestBody1 = requestBody0.description(string3);
      String string4 = "@<45-GR";
      RequestBody requestBody2 = requestBody1.$ref(string4);
      Boolean boolean0 = Boolean.FALSE;
      RequestBody requestBody3 = requestBody2.required(boolean0);
      Components components1 = components0.addRequestBodies(string2, requestBody3);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "!jIm:";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      int int0 = (-1341);
      int int1 = (-1409);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string1 = "RbK>73";
      String string2 = "{;{(";
      String string3 = "\"` *+9{";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string1, string2).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string4 = "R-[g";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Components components1 = components0.addParameters(string4, parameter0);
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string4, header0);
      String string5 = "";
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme.In securityScheme_In0 = SecurityScheme.In.COOKIE;
      SecurityScheme securityScheme1 = securityScheme0.in(securityScheme_In0);
      Components components3 = components2.addSecuritySchemes(string5, securityScheme1);
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components3.getParameters();
      Components components4 = components3.parameters(map0);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(server0).description();
      doReturn(string0).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      String string1 = "d<.KH7%YAVmpU|Y:=YW";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      int int0 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = new String[7];
      String string2 = "";
      stringArray0[0] = string2;
      String string3 = "not a valid long value";
      stringArray0[1] = string3;
      String string4 = "*/*";
      stringArray0[2] = string4;
      String string5 = "E1Hwny@";
      stringArray0[3] = string5;
      String string6 = "";
      stringArray0[4] = string6;
      String string7 = "com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer";
      stringArray0[5] = string7;
      String string8 = "+kC\\=H/\\_>;=/.V&";
      stringArray0[6] = string8;
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray0);
      String string9 = " nZriiZ9{LwY";
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string9, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      String string10 = "*x*W!rb]Cj8e:";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string7, pathItem0);
      Components components1 = components0.addCallbacks(string10, callback1);
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components2 = components1.examples(map0);
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      String string11 = ",";
      io.swagger.oas.models.links.Link link1 = link0.parameters(string2, string11);
      Components components3 = components2.addLinks(stringArray0[5], link1);
      String string12 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      Components components4 = components3.addSchemas(string12, arraySchema1);
      Optional<RequestBody> optional4 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "*/*";
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      MediaType mediaType3 = mediaType2.examples(hashMap0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      String string1 = "com.fasterxml.jackson.databind.ser.impl.StringArraySerializer";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string1);
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.items(arraySchema0);
      MediaType mediaType4 = mediaType3.schema(arraySchema2);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(info0).description();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string0).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string2 = "'}!95_fKBS[b|";
      ServerVariable[] serverVariableArray0 = new ServerVariable[8];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      serverVariableArray0[6] = serverVariableArray0[5];
      serverVariableArray0[7] = serverVariableArray0[6];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string0).when(server0).description();
      doReturn(string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      Link[] linkArray0 = new Link[1];
      String string3 = "0b#0;;EB?,";
      String string4 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string0).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string0).when(link0).operationId();
      doReturn(string4).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = ";O";
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      String string1 = "8_$DAqTD}FA";
      String string2 = "";
      String string3 = "WRITE_ENUMS_USING_INDEX";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(externalDocumentation0).description();
      doReturn(string3, (String) null).when(externalDocumentation0).url();
      int int0 = (-533);
      String string4 = "i]\"N*#to J>";
      String string5 = "#/components/schemas/";
      String string6 = "com.fasterxml.jackson.databind.AbstractTypeResolver";
      String string7 = "\\9N.;5?TXoF1 Y=;y";
      String string8 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string7).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string0, string0).when(schema0).description();
      doReturn(string1, string1, string2).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string0, string4).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string4).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string5, string8).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(string1, string0).when(schema0).ref();
      doReturn(string6, string2).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string9 = "";
      String string10 = "+0{a\\VX,^\\b";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string9).when(externalDocumentation1).description();
      doReturn(string6, string10).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation1);
      String string11 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = null;
      String string12 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string4, string9).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string11).when(info0).termsOfService();
      doReturn(string5, string12).when(info0).title();
      doReturn(string11).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string13 = "";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string12).when(license1).name();
      doReturn(string13).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license1);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional4 = OperationParser.getServers(serverArray0);
      String string14 = "io.swagger.jaxrs2.OperationParser";
      boolean boolean1 = false;
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string14, string9).when(requestBody0).description();
      doReturn(boolean1).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      String string15 = "jgaJg-I9-";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string15, apiResponse0);
      Components components2 = components1.links(map0);
      HashMap<String, Example> hashMap1 = new HashMap<String, Example>();
      Components components3 = components2.examples(hashMap1);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      Content content0 = null;
      String string0 = "";
      String string1 = "^[_:k1";
      Link[] linkArray0 = new Link[5];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      Link[] linkArray1 = new Link[3];
      linkArray1[0] = link0;
      linkArray1[1] = link0;
      linkArray1[2] = link0;
      String string2 = "3.Pg[HZ}0HjIEWvWs";
      String string3 = ", creator: ";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string0, string1, string1).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray1).when(apiResponse0).links();
      doReturn(string2, string1, string2, string3, string2).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string4 = "";
      RequestBody requestBody0 = new RequestBody();
      String string5 = "$5I";
      RequestBody requestBody1 = requestBody0.description(string5);
      String string6 = "@<45-GR";
      RequestBody requestBody2 = requestBody1.$ref(string6);
      Boolean boolean0 = Boolean.FALSE;
      RequestBody requestBody3 = requestBody2.required(boolean0);
      Components components1 = components0.addRequestBodies(string4, requestBody3);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(contact0).email();
      doReturn(string1).when(contact0).name();
      doReturn(string1).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Class<io.swagger.oas.models.info.License> class0 = io.swagger.oas.models.info.License.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, io.swagger.oas.models.links.Link> map0 = apiResponse0.getLinks();
      Components components1 = components0.links(map0);
      String string2 = "";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components2 = components1.addLinks(string2, link0);
      String string3 = null;
      RequestBody requestBody0 = new RequestBody();
      Components components3 = components2.addRequestBodies(string3, requestBody0);
      Components components4 = components3.addResponses(string3, apiResponse0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(string2, apiResponse0);
      BiFunction<Object, Object, io.swagger.oas.models.responses.ApiResponse> biFunction0 = (BiFunction<Object, Object, io.swagger.oas.models.responses.ApiResponse>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(apiResponse0).when(biFunction0).apply(any() , any());
      Map<String, Header> map1 = apiResponse0.getHeaders();
      link0.setHeaders(map1);
      apiResponses1.replaceAll(biFunction0);
      components4.setResponses(apiResponses1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = apiResponses1.DEFAULT;
      stringArray0[3] = string3;
      stringArray0[4] = apiResponses1.DEFAULT;
      stringArray0[5] = string1;
      stringArray0[6] = apiResponses0.DEFAULT;
      stringArray0[7] = string0;
      stringArray0[8] = apiResponses0.DEFAULT;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = "D:y;.b|";
      String string1 = "java.langio.swagger.oas.models.info.License";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      int int0 = Integer.MAX_VALUE;
      int int1 = 4;
      int int2 = (-3465);
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int3 = 3130;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int3).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string2 = "additionalProperties";
      String[] stringArray0 = new String[0];
      boolean boolean1 = false;
      String string3 = "mj_{u2Iw";
      String string4 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string5 = ";I.,0fIc?IxOx()Z##";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      String string6 = "sQ$fJftE]5W$T,mQo";
      boolean boolean2 = false;
      String string7 = ",";
      boolean boolean3 = true;
      String string8 = "&v.tR)T`sk`L";
      int int4 = 24;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string2).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean1).when(schema2).deprecated();
      doReturn(string3, string0).when(schema2).description();
      doReturn(string4, string3, string1, string7).when(schema2).example();
      doReturn(boolean0, boolean3).when(schema2).exclusiveMaximum();
      doReturn(boolean0, boolean2).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema2).externalDocs();
      doReturn(string4, string8).when(schema2).format();
      doReturn(int1).when(schema2).maxLength();
      doReturn(int4, 0).when(schema2).maxProperties();
      doReturn(string6).when(schema2).maximum();
      doReturn(int2).when(schema2).minProperties();
      doReturn(string3).when(schema2).minimum();
      doReturn(string4, string5).when(schema2).pattern();
      doReturn(boolean2).when(schema2).readOnly();
      doReturn(string6, string8).when(schema2).ref();
      doReturn(string0, string8).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema2);
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Schema<Void> schema3 = new io.swagger.oas.models.media.Schema<Void>();
      MediaType mediaType1 = mediaType0.schema(schema3);
      Map<String, Example> map1 = null;
      mediaType1.setExamples(map1);
      Map<String, Encoding> map2 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map2);
      String string9 = null;
      MediaType mediaType3 = mediaType2.example(string9);
      Encoding encoding0 = new Encoding();
      String string10 = null;
      Encoding encoding1 = encoding0.contentType(string10);
      Boolean boolean4 = Boolean.TRUE;
      Encoding encoding2 = encoding1.explode(boolean4);
      MediaType mediaType4 = mediaType3.addEncoding(string9, encoding2);
      String string11 = "': get method returned null";
      String string12 = "CC!m+cEi8D^#=u 4L";
      String string13 = "io.swagge";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string7, (String) null).when(exampleObject0).externalValue();
      doReturn(string6, string11, string12, string13).when(exampleObject0).name();
      doReturn(string8, (String) null).when(exampleObject0).summary();
      doReturn(string12, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Components components0 = new Components();
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Map<String, Example> map0 = null;
      components0.setExamples(map0);
      schema0.setMultipleOf(bigDecimal0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema0.getProperties();
      Components components1 = components0.schemas(map1);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components0);
      String string0 = "dKX)5qv#.";
      String string1 = "";
      String string2 = "no description";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string2, string0).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      components1.setSchemas(map1);
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      Content[] contentArray0 = new Content[4];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      String string3 = "java.lang";
      String string4 = "%),YgqQX#r8!b9t)v";
      String string5 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, string3, string4, string5, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components1);
      String string6 = "java.langio.swagger.oas.models.info.License";
      String string7 = "com.fasterxml.jackson.core.TreeCodec";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string5).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string6, (String) null).when(info0).termsOfService();
      doReturn(string5).when(info0).title();
      doReturn(string7, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      LinkParameters linkParameters1 = null;
      Map<String, String> map2 = OperationParser.getLinkParameters(linkParameters1);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<Integer> schema0 = new io.swagger.oas.models.media.Schema<Integer>();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      MediaType mediaType1 = mediaType0.schema(arraySchema1);
      String string0 = "|xAj2t1s{aEEf\"";
      Example example0 = null;
      MediaType mediaType2 = mediaType0.addExamples(string0, example0);
      String string1 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
      int int0 = 3;
      int int1 = (-2310);
      Class<MediaType> class0 = MediaType.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema2 = null;
      boolean boolean1 = true;
      ArraySchema arraySchema2 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema2).maxItems();
      doReturn(int1, int1).when(arraySchema2).minItems();
      doReturn(schema1, schema2).when(arraySchema2).schema();
      doReturn(boolean0, boolean1).when(arraySchema2).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.ser.std.NullSerializer";
      String string1 = "EltJA.";
      String string2 = "OKc-n";
      ServerVariable[] serverVariableArray0 = new ServerVariable[4];
      String string3 = "";
      String string4 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(link0).description();
      doReturn(string4).when(link0).operationId();
      doReturn(string2, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      String string5 = ") ";
      String string6 = "java.langio.swagger.oas.models.info.License";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string5, string3, string3, (String) null).when(serverVariable0).description();
      doReturn(string6, string3, string2, string6).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string5).when(server0).description();
      doReturn(string1, string2).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      String string7 = null;
      String string8 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string1, string5).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string7).when(info0).termsOfService();
      doReturn(string8).when(info0).title();
      doReturn(string7).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      String[] stringArray0 = new String[0];
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      Content content0 = null;
      String string0 = "";
      String string1 = "^[_:k1";
      Link[] linkArray0 = new Link[5];
      String string2 = "fC.* H<9S*Zv";
      String string3 = "HEAD";
      String string4 = "ORDER_MAP_ENTRIES_BY_KEYS";
      String string5 = "";
      String string6 = "2.ceftkRMS.";
      String string7 = "Could not find JsonDeserializer for type %s (via property %s)";
      String string8 = "!`\\]! ";
      String string9 = null;
      String string10 = "$(_t>\"QgY+";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string1, string3, string4, string4).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string2, string3, string5, string6, string6).when(link0).operationId();
      doReturn(string6, string7, string8, string9, string10).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      String string11 = "";
      String string12 = "b)3eN|Us";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string0, string1, string1).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string0, string11, string1, string12, string0).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string13 = "";
      RequestBody requestBody0 = new RequestBody();
      String string14 = "$5I";
      RequestBody requestBody1 = requestBody0.description(string14);
      String string15 = "@<45-GR";
      RequestBody requestBody2 = requestBody1.$ref(string15);
      Boolean boolean0 = Boolean.FALSE;
      RequestBody requestBody3 = requestBody2.required(boolean0);
      Components components1 = components0.addRequestBodies(string13, requestBody3);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      String string0 = "zn*pGa218fKx8C4du";
      String string1 = "io.swagge";
      String string2 = "no description";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(externalDocumentation0).description();
      doReturn(string0, string2).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string3 = "com.fasterxml.jackson.annotation.JsonInclude$Value";
      String string4 = "|~q~ktkcpG/Jx";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string3).when(license0).name();
      doReturn(string0, string4).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      int int0 = 4;
      int int1 = 6386;
      Class<io.swagger.oas.models.ExternalDocumentation> class0 = io.swagger.oas.models.ExternalDocumentation.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Class<String> class1 = String.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      String string5 = "java.lang";
      String string6 = "";
      String string7 = "GIzppeQSan9sT8";
      String string8 = "lNDjgB{H";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters0).expression();
      doReturn(string8, (String) null, (String) null, (String) null, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string1, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string0, string4, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn(string7, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      doReturn(linkParameters0, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema1).maxItems();
      doReturn(0, 0).when(arraySchema1).minItems();
      doReturn((Schema) null).when(arraySchema1).schema();
      doReturn(false).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema1);
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>(int1, int0);
      Components components1 = components0.callbacks(hashMap0);
      Link[] linkArray0 = new Link[6];
      linkArray0[0] = link0;
      linkArray0[1] = link0;
      linkArray0[2] = link0;
      linkArray0[3] = link0;
      linkArray0[4] = link0;
      linkArray0[5] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.links(map0);
      String string9 = null;
      Callback callback0 = new Callback();
      Components components3 = components2.addCallbacks(string9, callback0);
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = components3.getParameters();
      Components components4 = components3.parameters(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "/Usd9+d";
      String string1 = "#/components/schemas/";
      String string2 = null;
      String string3 = "ynq/\\#k?O6<yjJ7]\\So";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(license0).name();
      doReturn(string1, string3).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string1).when(license1).name();
      doReturn(string1, string2).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license1);
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      String string4 = "";
      String string5 = "java.langio.swagger.oas.models.links.Link";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(linkParameters0).expression();
      doReturn(string1, string5).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(externalDocumentation0).description();
      doReturn(string1, (String) null).when(externalDocumentation0).url();
      String string6 = "Invalid 'any-setter' annotation on field ";
      int int0 = (-131);
      String string7 = "java.langio.swagger.oas.models.PathItem";
      boolean boolean2 = false;
      String string8 = "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer";
      String string9 = "java.lang";
      boolean boolean3 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string9).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1, string0).when(schema0).description();
      doReturn(string0, string1, string3, string2).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string6, string4).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string1).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string0).when(schema0).minimum();
      doReturn(string7, string9).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string8, string4).when(schema0).ref();
      doReturn(string6, string2).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      Server[] serverArray0 = new Server[3];
      String string10 = "W";
      String string11 = null;
      String string12 = "C";
      ServerVariable[] serverVariableArray0 = new ServerVariable[2];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string8, string10, (String) null, (String) null, (String) null).when(server0).description();
      doReturn(string12, string0, (String) null, (String) null, (String) null).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) null, (Object) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      Optional<List<io.swagger.oas.models.servers.Server>> optional4 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      String string2 = "! wmBvUnk5V7Ga79";
      String string3 = "aqDskQQ(Ynk";
      String string4 = null;
      Contact contact0 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string1).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string2, string3).when(info0).termsOfService();
      doReturn(string3, string1).when(info0).title();
      doReturn(string4).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      String string2 = "! wmBvUnk5V7Ga79";
      String string3 = "aqDskQQ(Ynk";
      String string4 = null;
      Contact contact0 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(license0).name();
      doReturn(string3, (String) null).when(license0).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string1).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string2, string3).when(info0).termsOfService();
      doReturn(string3, string1).when(info0).title();
      doReturn(string4).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string1;
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Header> map0 = apiResponse0.getHeaders();
      Components components1 = components0.headers(map0);
      String string5 = "S:g{h(h=ZVR-8`'";
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string5, header0);
      String string6 = "java.langio.swagger.oas.models.parameters.RequestBody";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.schema(arraySchema0);
      Components components3 = components2.addParameters(string6, parameter1);
      Map<String, Example> map1 = null;
      Components components4 = components3.examples(map1);
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      stringArray0[2] = string4;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = string0;
      String string7 = "com.fasterxml.jackson.databind.type.CollectionType";
      stringArray0[6] = string7;
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces1).value();
      Components components5 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces1, produces1, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "zn*pGa218fKx8C4du";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(license0).name();
      doReturn(string0, string0).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string1 = "java.lang";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string0, string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string2 = "    aQTinyOf: ";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string2).when(license1).name();
      doReturn(string0, string1).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license1);
      int int0 = 4;
      int int1 = 6386;
      Class<Void> class0 = Void.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      int int2 = (-341613276);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(class0).when(schema1).implementation();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int2).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      String string3 = "java.lang";
      String string4 = "DELETE";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string2).when(contact0).email();
      doReturn(string0, string4).when(contact0).name();
      doReturn(string3, string3).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional4 = OperationParser.getContact(contact0);
      String string5 = "GIzppeQSan9sT8";
      String string6 = "no description";
      String string7 = "~n'->lbm*/nf";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string7, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3).when(link0).description();
      doReturn(string0, string6).when(link0).operationId();
      doReturn(string5).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional5 = OperationParser.getLink(link0);
      boolean boolean1 = true;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      int int0 = (-793);
      int int1 = (-122);
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Class<Object> class1 = Object.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      MediaType mediaType0 = new MediaType();
      String string0 = "G`pW}<HL 2M\\";
      io.swagger.oas.models.media.Schema<Tag> schema2 = new io.swagger.oas.models.media.Schema<Tag>();
      String string1 = "U^5o^kU_zz(,v^6";
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      String string2 = "R-%nBg6(&j-";
      Class<MediaType> class2 = MediaType.class;
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(schema3).implementation();
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      String string3 = "#/components/schemas/";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string2, string3).when(content0).mediaType();
      doReturn(schema3).when(content0).schema();
      String[] stringArray0 = new String[9];
      String string4 = "";
      stringArray0[0] = string4;
      stringArray0[1] = string2;
      stringArray0[2] = string2;
      stringArray0[3] = string0;
      stringArray0[4] = string1;
      stringArray0[5] = string0;
      stringArray0[6] = string1;
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema1);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, RequestBody> map0 = null;
      Components components1 = components0.requestBodies(map0);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContent(content0, produces0, produces0, components1);
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType0, exampleObjectArray0[0]);
  }
}
