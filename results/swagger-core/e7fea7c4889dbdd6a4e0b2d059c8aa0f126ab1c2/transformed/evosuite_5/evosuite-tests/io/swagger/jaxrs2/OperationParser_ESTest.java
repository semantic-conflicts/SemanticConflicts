/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 00:44:01 GMT 2020
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.ArraySchema;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.links.Link;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.parameters.Parameter;
import io.swagger.oas.models.parameters.RequestBody;
import io.swagger.oas.models.responses.ApiResponse;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Class<Link> class0 = Link.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Produces produces1 = null;
      Components components0 = new Components();
      String string0 = "oR0Z>^ gf(`P2";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string0, callback0);
      Map<String, Parameter> map0 = components0.getParameters();
      Components components2 = components0.parameters(map0);
      io.swagger.oas.models.media.Schema<ApiResponses> schema1 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema1.getProperties();
      Components components3 = components2.schemas(map1);
      PathItem pathItem0 = new PathItem();
      String string1 = OperationParser.COMMA;
      Operation operation0 = new Operation();
      RequestBody requestBody0 = new RequestBody();
      Operation operation1 = operation0.requestBody(requestBody0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponse apiResponse0 = new ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(string0, apiResponse0);
      ApiResponses apiResponses2 = apiResponses1.addApiResponse(string0, apiResponse0);
      String string2 = "no description";
      ApiResponses apiResponses3 = apiResponses2.addApiResponse(string2, apiResponse0);
      Operation operation2 = operation1.responses(apiResponses3);
      PathItem pathItem1 = pathItem0.post(operation2);
      PathItem pathItem2 = callback0.put(string0, pathItem1);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map2 = parameter0.getExamples();
      Components components4 = components3.examples(map2);
      Map<String, RequestBody> map3 = components2.getRequestBodies();
      Components components5 = components4.requestBodies(map3);
      int int0 = 495;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema2).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema2, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces1, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "java.lang";
      String string1 = ")M";
      String string2 = null;
      String string3 = "java.lang";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(license0).name();
      doReturn(string1, string3).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      String string4 = "'@,o@iAkygh(W9+XF'";
      stringArray0[2] = string4;
      stringArray0[3] = string1;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      boolean boolean0 = true;
      String string5 = "#/components/schemas/";
      String string6 = "~G2uMC@a6f9g=k+gw";
      ExternalDocumentation externalDocumentation0 = null;
      int int0 = Integer.MAX_VALUE;
      String string7 = null;
      int int1 = 0;
      String string8 = "problem handler tried to resolve into non-subtype: ";
      boolean boolean1 = true;
      String string9 = "ka!TQGUDa8=F";
      String string10 = "java.langio.swagger.oas.models.info.Contact";
      boolean boolean2 = true;
      String string11 = "java.langjava.lang.String";
      String string12 = "java.langio.swagger.oas.models.media.MediaType";
      boolean boolean3 = true;
      int int2 = 5;
      String string13 = "&s";
      boolean boolean4 = true;
      String string14 = "0r&OD*";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string10).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean2).when(schema0).deprecated();
      doReturn(string5, string11).when(schema0).description();
      doReturn(stringArray0[5], string6, string12, string12).when(schema0).example();
      doReturn(boolean0, boolean3).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[1], string1).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2, 0).when(schema0).maxProperties();
      doReturn(string7).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string1).when(schema0).minimum();
      doReturn(string8, string13).when(schema0).pattern();
      doReturn(boolean1, boolean4).when(schema0).readOnly();
      doReturn(string6, string2).when(schema0).ref();
      doReturn(string9, string14).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      OperationParser operationParser0 = new OperationParser();
      String string15 = "C0it^vS\\Junh%";
      String string16 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string17 = "io.swagger.jaxrs2.OperationParser";
      String string18 = "java.lang";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMPONENTS_REF, string16).when(contact0).email();
      doReturn(string8, string17).when(contact0).name();
      doReturn(string15, string18).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      String string19 = ",]'5c@aZ@}M ,-!G H@";
      String string20 = "no description";
      String string21 = "'cU";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string9, string20).when(externalDocumentation1).description();
      doReturn(string19, string21).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "java.langio.swagger.oas.models.links.Link";
      String string1 = "io.swagger.jaxrs2.OperationParser";
      String string2 = ".j/.diA{";
      String string3 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string4 = ">19A27P7&'v-";
      String string5 = "Failed to parse @JsonSerializableSchema.schemaObjectPropertiesDefinition value";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string1, string4).when(info0).termsOfService();
      doReturn(string2, string5).when(info0).title();
      doReturn(string3).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string6 = "p]4z-";
      String string7 = "";
      Contact contact1 = null;
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      String string8 = null;
      Info info1 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact1).when(info1).contact();
      doReturn(string0, (String) null).when(info1).description();
      doReturn(license1).when(info1).license();
      doReturn(string6, string8).when(info1).termsOfService();
      doReturn(string7).when(info1).title();
      doReturn(string2, string1).when(info1).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info1);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[4];
      String string9 = "";
      String string10 = "pK:Y_|";
      String string11 = "1nb6=F";
      String string12 = "";
      String string13 = "#uD(+GMHIib)~!";
      String string14 = "Q\\v^KG";
      String string15 = "%/3#^%";
      String string16 = "";
      String string17 = "";
      String string18 = null;
      String string19 = ">^eoVcAa)";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string9, string10, string9, string11, string12).when(link0).description();
      doReturn(string9, string7, string19).when(link0).name();
      doReturn(string13, string14, string15, string9, string16).when(link0).operationId();
      doReturn(string13, string3, string17, string18).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      String string20 = "";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string20).when(linkParameters1).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
      int int0 = Integer.MAX_VALUE;
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Schema schema1 = null;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = ".h*#s{<V*)&DCVAv\"E9";
      String string1 = "#/components/schemas/";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(externalDocumentation0).description();
      doReturn(string0, string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string2 = "#/components/schemas/";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string2;
      stringArray0[2] = string0;
      String string3 = "=QIu Y,87";
      stringArray0[3] = string3;
      boolean boolean0 = true;
      String string4 = "com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator";
      String string5 = null;
      boolean boolean1 = false;
      String string6 = "java.lang";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string6).when(externalDocumentation1).description();
      doReturn(string3, stringArray0[3]).when(externalDocumentation1).url();
      String string7 = "#/components/schemas/";
      int int0 = 4;
      String string8 = null;
      int int1 = 2671;
      String string9 = "";
      String string10 = "eYJap";
      boolean boolean2 = true;
      String string11 = null;
      String string12 = null;
      String string13 = "java.langio.swagger.oas.models.info.Contact";
      String string14 = ">HSiNc}l@^L(.,?";
      int int2 = (-1496);
      String string15 = "java.lang";
      int int3 = 3726;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string13).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string4, string14).when(schema0).description();
      doReturn(string3, string5, string5).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema0).externalDocs();
      doReturn(string7, stringArray0[0]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1, int3).when(schema0).maxProperties();
      doReturn(string8).when(schema0).maximum();
      doReturn(int1, int2).when(schema0).minProperties();
      doReturn(string9).when(schema0).minimum();
      doReturn(string10, string15).when(schema0).pattern();
      doReturn(boolean2, boolean0).when(schema0).readOnly();
      doReturn(string11).when(schema0).ref();
      doReturn(string12).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components1 = components0.securitySchemes(map0);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map1 = mediaType0.getExamples();
      Components components2 = components1.examples(map1);
      Map<String, Link> map2 = null;
      Components components3 = components2.links(map2);
      Map<String, Parameter> map3 = components0.getParameters();
      Components components4 = components3.parameters(map3);
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components4);
      int int4 = (-455);
      Class<OperationParser> class0 = OperationParser.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean3 = true;
      Class<PathItem> class1 = PathItem.class;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema2).implementation();
      boolean boolean4 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int4).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema1, schema2).when(arraySchema0).schema();
      doReturn(boolean3, boolean4).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      Schema schema3 = null;
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema3);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[8];
      String string16 = "EPC?eyc2sC4?z{";
      String string17 = "java.lang";
      String string18 = "iT";
      String string19 = "Ldh7o(o_&";
      String string20 = "";
      String string21 = "Dq-s{,q|UZj42";
      String string22 = "Invalid 'any-setter' annotation on field ";
      String string23 = null;
      String string24 = "";
      String string25 = "";
      String string26 = " NH#YR271 [/*";
      String string27 = "";
      String string28 = " of 4-char base64 unit: can only used between units";
      String string29 = " has no default (no arg) constructor";
      String string30 = "Wdv/";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(linkParameters0).expression();
      doReturn(string30, string14, string15, (String) null, (String) null).when(linkParameters0).name();
      String string31 = "java.lang";
      String string32 = null;
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters1).expression();
      doReturn(string21, string31, string1, string32, string17).when(linkParameters1).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string16, string17, string18, string19, string12).when(link0).description();
      doReturn(string27, string28, string14, stringArray0[3], string29).when(link0).name();
      doReturn(string20, string21, string19, string22, string7).when(link0).operationId();
      doReturn(string23, string24, string25, string18, string26).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters1, linkParameters1).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, Link> map4 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[2];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Optional<Link> optional3 = OperationParser.getLink(linkArray0[1]);
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map1 = components0.getSchemas();
      Components components1 = components0.schemas(map1);
      String string0 = "io.swagger.jaxrs2.OperationParser";
      Example example0 = new Example();
      Components components2 = components1.addExamples(string0, example0);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map2 = mediaType0.getExamples();
      Components components3 = components2.examples(map2);
      Header header0 = new Header();
      Header header1 = header0.addExamplesItem(example0);
      Components components4 = components3.addHeaders(string0, header1);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string0, header0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components2 = components1.examples(hashMap0);
      int int0 = 0;
      String string1 = "java.lang";
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[8];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "'D[P&";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string0, example0);
      String string1 = "";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string1, securityScheme0);
      Header header0 = new Header();
      Header header1 = header0.example(string1);
      Components components3 = components2.addHeaders(string1, header1);
      MediaType mediaType0 = new MediaType();
      String string2 = "0YEWqh";
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      Components components4 = components3.responses(hashMap0);
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string2, encoding0);
      Map<String, Example> map0 = mediaType1.getExamples();
      Components components5 = components3.examples(map0);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components2);
      Server[] serverArray0 = new Server[1];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[8];
      Content content0 = null;
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string1 = "";
      String string2 = ", static serializer of type ";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string1, string1, string2).when(apiResponse0).description();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string3 = "'D[P&";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string3, example0);
      String string4 = "";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string4, securityScheme0);
      Header header0 = new Header();
      Header header1 = header0.example(string4);
      Components components3 = components2.addHeaders(string4, header1);
      MediaType mediaType0 = new MediaType();
      String string5 = "0YEWqh";
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      Components components4 = components3.responses(hashMap0);
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string5, encoding0);
      Map<String, Example> map0 = mediaType1.getExamples();
      Components components5 = components3.examples(map0);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      boolean boolean0 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components2);
      Server[] serverArray0 = new Server[1];
      String string6 = "k$AiCeTyaU{c;j";
      String string7 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string6, (String) null).when(server0).description();
      doReturn(string7).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[4];
      boolean boolean0 = false;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      String string0 = "Strings must not be null";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.TRUE;
      Explode explode2 = Explode.FALSE;
      String string1 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Components components0 = new Components();
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components1 = components0.examples(hashMap0);
      Operation operation0 = new Operation();
      Map<String, Callback> map0 = operation0.getCallbacks();
      Components components2 = components1.callbacks(map0);
      String string2 = "=.d++|?5?Y0G2a";
      Example example0 = new Example();
      Example example1 = example0.description(string2);
      Components components3 = components2.addExamples(string2, example1);
      Map<String, io.swagger.oas.models.media.Schema> map1 = components0.getSchemas();
      Components components4 = components3.schemas(map1);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "java.lang";
      String string1 = "Vfte-Z";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[11];
      String string2 = "";
      stringArray0[0] = string2;
      String string3 = "#/components/schemas/";
      stringArray0[1] = string3;
      String string4 = "";
      stringArray0[2] = string4;
      String string5 = "";
      stringArray0[3] = string5;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      String string6 = "<";
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string6, string0).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses(string3, apiResponse0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      boolean boolean1 = apiResponse0.equals(apiResponses1);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components2 = components1.schemas(map0);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      String string0 = null;
      String string1 = "min";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, string1, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      Components components0 = new Components();
      String string2 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Header header0 = new Header();
      Header header1 = header0.example(string2);
      String string3 = "io.swagger.oas.models.media.XML";
      Header header2 = header0.example(string3);
      Components components1 = components0.addHeaders(string2, header2);
      String string4 = "-,1A8zLM1f";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      String string5 = "S&}A/0";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string5);
      arraySchema1.setAdditionalProperties(arraySchema0);
      Components components2 = components1.addSchemas(string4, arraySchema1);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components2);
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 1579;
      String string6 = "HEADER";
      int int1 = (-1977);
      String string7 = "1La'7[-{D`M:";
      String string8 = "java.lang";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(string4, string5, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string1, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string6).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string7).when(schema0).minimum();
      doReturn(string7, (String) null).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(string5, (String) null).when(schema0).ref();
      doReturn(string8, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      String string9 = "java.langjava.lang.Object";
      String string10 = null;
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string9, (String) null).when(link0).description();
      doReturn(string10).when(link0).operationId();
      doReturn(string6, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional2 = OperationParser.getLink(link0);
      String string11 = null;
      String string12 = "2!5F~jn9~if";
      String string13 = "/.mfsbU!T]G;;";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation1 = null;
      int int2 = 1776;
      String string14 = " in character escape sequence";
      int int3 = Integer.MAX_VALUE;
      String string15 = "io.swagge";
      String string16 = "v>";
      String string17 = "&u.r`UAaSi>e";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string11).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean0).when(schema1).deprecated();
      doReturn(string6, (String) null).when(schema1).description();
      doReturn(string12, string13, (String) null, (String) null).when(schema1).example();
      doReturn(boolean0).when(schema1).exclusiveMaximum();
      doReturn(boolean1).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema1).externalDocs();
      doReturn(string2, (String) null).when(schema1).format();
      doReturn(int2).when(schema1).maxLength();
      doReturn(0).when(schema1).maxProperties();
      doReturn(string14).when(schema1).maximum();
      doReturn(int3, 0).when(schema1).minProperties();
      doReturn(string15).when(schema1).minimum();
      doReturn(string16, (String) null).when(schema1).pattern();
      doReturn(boolean0).when(schema1).readOnly();
      doReturn(string17, (String) null).when(schema1).ref();
      doReturn(string13, (String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Server[] serverArray0 = new Server[1];
      String string0 = "java.langjava.lang.Object";
      String string1 = "io.swagge";
      ServerVariable[] serverVariableArray0 = new ServerVariable[7];
      String string2 = "object";
      String string3 = "'>Uo:b|\\";
      String string4 = "openIdConnect";
      String string5 = "";
      String string6 = "1`RO\"Gis";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2, string3, string3, string2).when(serverVariable0).description();
      doReturn(string4, string5, string1, string0, string6).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      serverVariableArray0[6] = serverVariableArray0[5];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string0, string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      Server[] serverArray0 = new Server[4];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      String[] stringArray0 = new String[2];
      String string0 = "Trying to release buffer smaller than original";
      stringArray0[0] = string0;
      String string1 = "$r:Hj$x5-";
      stringArray0[1] = string1;
      Optional<Set<Tag>> optional4 = OperationParser.getTags(stringArray0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[6];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      Components components0 = new Components();
      String string2 = "io.swagge";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string2, example0);
      io.swagger.oas.models.media.Schema<ApiResponses> schema1 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      Map<String, io.swagger.oas.models.media.Schema> map0 = schema1.getProperties();
      Components components2 = components1.schemas(map0);
      RequestBody requestBody0 = new RequestBody();
      Components components3 = components2.addRequestBodies(stringArray0[1], requestBody0);
      Parameter parameter1 = new Parameter();
      Components components4 = components3.addParameters(string1, parameter1);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "io.swagge";
      String string1 = "9";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string2 = "java.langio.swagger.oas.models.info.Contact";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(contact1).email();
      doReturn(string2, (String) null).when(contact1).name();
      doReturn(string2, (String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact1);
      boolean boolean0 = true;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      boolean boolean2 = true;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      boolean boolean3 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string3 = "q9U\"Y0LxV";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1).when(parameter0).allowReserved();
      doReturn(boolean2, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string2, (String) null).when(parameter0).in();
      doReturn(string2, (String) null).when(parameter0).name();
      doReturn(boolean3, false).when(parameter0).required();
      doReturn(string3, (String) null).when(parameter0).style();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.Q9U\"Y0LXV
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      LinkParameters linkParameters0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = null;
      Components components0 = new Components();
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components1 = components0.examples(map0);
      String string0 = "";
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string0, header0);
      Map<String, Link> map1 = null;
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components3 = components2.securitySchemes(hashMap0);
      Components components4 = components2.links(map1);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components5 = components4.responses(apiResponses0);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      OperationParser operationParser0 = new OperationParser();
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      io.swagger.oas.annotations.links.Link link0 = null;
      Optional<Link> optional0 = OperationParser.getLink(link0);
      Server[] serverArray0 = new Server[6];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[3];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[5];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      Components components0 = new Components();
      Components components1 = components0.links(map0);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components2 = components1.securitySchemes(hashMap0);
      Map<String, ApiResponse> map2 = components2.getResponses();
      Components components3 = components2.responses(map2);
      String string0 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components4 = components2.addSchemas(string0, arraySchema0);
      Map<String, Parameter> map3 = components4.getParameters();
      Components components5 = components3.parameters(map3);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Content[] contentArray0 = null;
      Components components0 = new Components();
      String string0 = "(:*&DnEalHs)s4x_H'";
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      io.swagger.oas.models.media.Schema<ApiResponses> schema0 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      Map<String, io.swagger.oas.models.media.Schema> map0 = schema0.getProperties();
      Components components2 = components1.schemas(map0);
      String string1 = "Y|o";
      Callback callback0 = new Callback();
      Components components3 = components2.addCallbacks(string1, callback0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components4 = components3.examples(hashMap0);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[1];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null).when(apiResponse0).content();
      doReturn((String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "p";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string0, example0);
      Map<String, Callback> map0 = components1.getCallbacks();
      Components components2 = components1.callbacks(map0);
      String string1 = "";
      RequestBody requestBody0 = new RequestBody();
      String string2 = "Can not narrow or widen array types";
      Boolean boolean0 = Boolean.valueOf(string2);
      RequestBody requestBody1 = requestBody0.required(boolean0);
      io.swagger.oas.models.media.Content content0 = null;
      RequestBody requestBody2 = requestBody1.content(content0);
      RequestBody requestBody3 = requestBody2.content(content0);
      Components components3 = components2.addRequestBodies(string1, requestBody2);
      io.swagger.oas.models.media.Schema<ApiResponses> schema0 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema0.getProperties();
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      components2.setExamples(hashMap0);
      Map<String, ApiResponse> map2 = components3.getResponses();
      Components components4 = components3.responses(map2);
      Map<String, RequestBody> map3 = null;
      components3.setRequestBodies(map3);
      Components components5 = components3.schemas(map1);
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components3);
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      ExternalDocumentation externalDocumentation1 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation1);
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content1).schema();
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces2 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OperationParser.getContent(content1, produces1, produces2, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      String string0 = "";
      Link link0 = new Link();
      Components components1 = components0.addLinks(string0, link0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components2 = components1.examples(map0);
      String string1 = "no description";
      Example example0 = new Example();
      String string2 = "no description";
      Example example1 = example0.summary(string2);
      Components components3 = components2.addExamples(string1, example1);
      Map<String, io.swagger.oas.models.media.Schema> map1 = components2.getSchemas();
      Components components4 = components3.schemas(map1);
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[9];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[0];
      Produces produces0 = null;
      Components components0 = new Components();
      Encoding encoding0 = new Encoding();
      String string0 = "*/*";
      Encoding encoding1 = encoding0.contentType(string0);
      Boolean boolean0 = Boolean.TRUE;
      Encoding encoding2 = encoding1.allowReserved(boolean0);
      Map<String, Object> map0 = encoding1.getExtensions();
      components0.setExtensions(map0);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Optional<Parameter> optional1 = OperationParser.getParameter(parameter0, components0);
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      Map<String, Example> map1 = null;
      MediaType mediaType2 = mediaType1.examples(map1);
      String string1 = "M[J>(Vt]_L9q],Bm";
      Example example0 = new Example();
      Example example1 = example0.value(encoding2);
      MediaType mediaType3 = mediaType2.addExamples(string1, example1);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType4 = mediaType3.encoding(hashMap0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Server[] serverArray0 = new Server[5];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      Map<String, Link> map0 = apiResponse0.getLinks();
      Components components1 = components0.links(map0);
      String string0 = ",";
      Example example0 = null;
      Components components2 = components1.addExamples(string0, example0);
      String string1 = ")";
      Header header0 = new Header();
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      Header header1 = header0.allowEmptyValue(boolean1);
      Components components3 = components2.addHeaders(string1, header1);
      Map<String, ApiResponse> map1 = components3.getResponses();
      Components components4 = components3.responses(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "io.swagger.jaxrs2.OperationParser";
      Example example0 = null;
      MediaType mediaType1 = mediaType0.addExamples(string0, example0);
      Map<String, Encoding> map0 = null;
      MediaType mediaType2 = mediaType1.encoding(map0);
      io.swagger.oas.models.media.Schema<ApiResponses> schema0 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      MediaType mediaType3 = mediaType2.schema(schema0);
      Encoding encoding0 = new Encoding();
      MediaType mediaType4 = mediaType3.addEncoding(string0, encoding0);
      Link link0 = new Link();
      String string1 = "x+TWA1*A";
      Link link1 = link0.description(string1);
      Link link2 = link0.description(string0);
      Map<String, Object> map1 = link2.getExtensions();
      mediaType3.setExtensions(map1);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[5];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      ArraySchema arraySchema1 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema1);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[2];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      String string0 = "fwE:jK";
      Link link1 = new Link();
      Components components1 = components0.addLinks(string0, link1);
      io.swagger.oas.models.media.ArraySchema arraySchema2 = new io.swagger.oas.models.media.ArraySchema();
      String string1 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema3 = arraySchema2.type(string1);
      Map<String, io.swagger.oas.models.media.Schema> map1 = arraySchema3.getProperties();
      arraySchema2.setProperties(map1);
      Components components2 = components1.schemas(map1);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components1 = components0.parameters(hashMap0);
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      Components components2 = components1.securitySchemes(hashMap1);
      HashMap<String, Callback> hashMap2 = new HashMap<String, Callback>();
      Components components3 = components2.callbacks(hashMap2);
      String string0 = "Can not refine serialization content type %s into %s; types not related";
      SecurityScheme securityScheme0 = null;
      SecurityScheme securityScheme1 = hashMap1.put(string0, securityScheme0);
      String string1 = "J92Yi=/";
      io.swagger.oas.models.media.Schema<Object> schema0 = new io.swagger.oas.models.media.Schema<Object>();
      Components components4 = components3.addSchemas(string1, schema0);
      Optional<List<Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "";
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      Map<String, SecurityScheme> map0 = components1.getSecuritySchemes();
      Components components2 = components1.securitySchemes(map0);
      Link link0 = new Link();
      Link link1 = link0.description(string0);
      Components components3 = components2.addLinks(string0, link1);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components4 = components3.parameters(hashMap0);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      String string0 = null;
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components1 = components0.addSchemas(string0, arraySchema0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string0, securityScheme0);
      Map<String, SecurityScheme> map0 = components1.getSecuritySchemes();
      Components components3 = components2.securitySchemes(map0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[1];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
      Map<String, Example> map2 = null;
      Components components4 = components3.examples(map2);
      Components components5 = components3.links(map1);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components5);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Optional<List<Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "+i'a=:Ck%";
      stringArray0[0] = string0;
      String string1 = "tqWwIS";
      stringArray0[1] = string1;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      String string0 = "!qrcV";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string0, example0);
      Map<String, Callback> map0 = components1.getCallbacks();
      Components components2 = components1.callbacks(map0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = null;
      String string1 = components2.toString();
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
      Components components3 = components2.links(map1);
      String string2 = "";
      SecurityScheme securityScheme0 = null;
      Components components4 = components0.addSecuritySchemes(string2, securityScheme0);
      Map<String, ApiResponse> map2 = components4.getResponses();
      components3.setResponses(map2);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components3);
      OperationParser operationParser0 = new OperationParser();
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[4];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      Components components0 = new Components();
      String string0 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<String> schema0 = new io.swagger.oas.models.media.Schema<String>();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      Components components1 = components0.addSchemas(string0, arraySchema1);
      Parameter parameter1 = new Parameter();
      String string1 = "#/components/schemas/";
      Parameter parameter2 = parameter1.example(string1);
      Boolean boolean0 = Boolean.TRUE;
      Parameter parameter3 = parameter2.allowReserved(boolean0);
      Components components2 = components1.addParameters(string0, parameter3);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      String string0 = null;
      Example example0 = new Example();
      Components components1 = components0.addExamples(string0, example0);
      Operation operation0 = new Operation();
      Map<String, Callback> map0 = operation0.getCallbacks();
      Components components2 = components1.callbacks(map0);
      String string1 = "";
      operation0.setDescription(string1);
      ApiResponse apiResponse0 = new ApiResponse();
      Map<String, Header> map1 = apiResponse0.getHeaders();
      Components components3 = components2.headers(map1);
      Components components4 = components3.addResponses(string0, apiResponse0);
      components4.addExtension(string0, components2);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      io.swagger.oas.annotations.parameters.RequestBody requestBody1 = null;
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody1, components4);
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      OperationParser operationParser0 = new OperationParser();
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components1 = components0.addSecuritySchemes(operationParser0.MEDIA_TYPE, securityScheme0);
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(operationParser0.DEFAULT_DESCRIPTION, parameter0);
      Map<String, Link> map0 = components0.getLinks();
      Components components3 = components2.links(map0);
      String string0 = "no description";
      Callback callback0 = new Callback();
      Components components4 = components3.addCallbacks(string0, callback0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[9];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license0);
      Optional<Link> optional3 = OperationParser.getLink(linkArray0[3]);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional4 = OperationParser.getLicense(license1);
      MediaType mediaType0 = new MediaType();
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType1 = mediaType0.encoding(hashMap0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional5 = OperationParser.getMediaType(mediaType1, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components1 = components0.securitySchemes(map0);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map1 = mediaType0.getExamples();
      Components components2 = components1.examples(map1);
      Map<String, Link> map2 = null;
      Components components3 = components2.links(map2);
      Map<String, Parameter> map3 = components0.getParameters();
      Components components4 = components3.parameters(map3);
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components4);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      Schema schema1 = null;
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema1);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[8];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, Link> map4 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "io.swagger.jaxrs2.OperationParser";
      Example example0 = null;
      MediaType mediaType1 = mediaType0.addExamples(string0, example0);
      Map<String, Encoding> map0 = null;
      MediaType mediaType2 = mediaType1.encoding(map0);
      io.swagger.oas.models.media.Schema<ApiResponses> schema0 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      MediaType mediaType3 = mediaType2.schema(schema0);
      Encoding encoding0 = new Encoding();
      MediaType mediaType4 = mediaType3.addEncoding(string0, encoding0);
      Link link0 = new Link();
      String string1 = "x+TWA1*A";
      Link link1 = link0.description(string1);
      Link link2 = link0.description(string0);
      Map<String, Object> map1 = link2.getExtensions();
      mediaType3.setExtensions(map1);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
      int int0 = 2134;
      int int1 = (-2559);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String string0 = "vr";
      String string1 = "hgj&Wuo(";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string1, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[5];
      String string2 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string3 = "false";
      String string4 = "";
      String string5 = "9NYW&hg?of";
      String string6 = "*/*";
      String string7 = ",/;2.+}Nyh:T";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string1, string0, string2, string3).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string3, string4, string3, string3, string5).when(link0).operationId();
      doReturn(string5, string4, string6, string2, string7).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(info0).description();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Schema<Object> schema0 = new io.swagger.oas.models.media.Schema<Object>();
      MediaType mediaType1 = mediaType0.schema(schema0);
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map0);
      String string2 = "z?4 !2|.i:p4@Lkm";
      Example example0 = new Example();
      MediaType mediaType3 = mediaType2.addExamples(string2, example0);
      String string3 = "w`1l.0Lu!CLwqweL";
      Encoding encoding0 = new Encoding();
      Encoding encoding1 = encoding0.contentType(string2);
      Encoding encoding2 = encoding1.style(string3);
      MediaType mediaType4 = mediaType3.addEncoding(string3, encoding2);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string0 = "";
      String string1 = "";
      String string2 = "), can not call with() on it";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, Parameter> map0 = components0.getParameters();
      Components components1 = components0.parameters(map0);
      String string3 = "Ax\"AGg@R$;%#n&";
      Link link0 = new Link();
      Components components2 = components1.addLinks(string3, link0);
      ApiResponse apiResponse1 = new ApiResponse();
      Map<String, Header> map1 = apiResponse1.getHeaders();
      Components components3 = components2.headers(map1);
      components3.setHeaders(map1);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components4 = components1.examples(hashMap0);
      Map<String, Link> map2 = apiResponse1.getLinks();
      Components components5 = components3.links(map2);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "!qrcV";
      Example example0 = new Example();
      Map<String, Callback> map0 = components0.getCallbacks();
      Components components1 = components0.callbacks(map0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = null;
      String string2 = components1.toString();
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.links(map1);
      String string3 = "";
      SecurityScheme securityScheme0 = null;
      Components components3 = components0.addSecuritySchemes(string3, securityScheme0);
      Map<String, ApiResponse> map2 = components3.getResponses();
      components2.setResponses(map2);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components2);
      OperationParser operationParser0 = new OperationParser();
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[6];
      String string0 = "";
      String string1 = "LABEL";
      String string2 = "";
      String string3 = "Can not pass null KeyDeserializers";
      String string4 = "";
      String string5 = "?I:cY#QFAn6l^";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string0, string0, string1).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string0, string2, string2, string3, string4).when(link0).operationId();
      doReturn(string2, string1, string3, string4, string5).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "04i2^(CT%";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string1 = "";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string2 = ";5>~P[nI_{|8;v";
      Parameter parameter0 = null;
      Components components1 = components0.addParameters(string2, parameter0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      boolean boolean2 = true;
      String string0 = "";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      Schema schema0 = null;
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean2, false).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(explode0, explode1).when(parameter0).explode();
      doReturn(string0).when(parameter0).in();
      doReturn(string0).when(parameter0).name();
      doReturn(boolean0).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string0).when(parameter0).style();
      Components components0 = new Components();
      Map<String, Link> map0 = null;
      Components components1 = components0.links(map0);
      Map<String, Callback> map1 = components1.getCallbacks();
      Components components2 = components0.callbacks(map1);
      String string1 = "";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components3 = components2.addSecuritySchemes(string1, securityScheme0);
      Map<String, SecurityScheme> map2 = components2.getSecuritySchemes();
      Components components4 = components3.securitySchemes(map2);
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string1);
      arraySchema2.setType(string1);
      Map<String, io.swagger.oas.models.media.Schema> map3 = arraySchema2.getProperties();
      Components components5 = components4.schemas(map3);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      io.swagger.oas.annotations.links.Link link0 = null;
      Optional<Link> optional0 = OperationParser.getLink(link0);
      Server[] serverArray0 = new Server[6];
      String string0 = "Oz~;Gy7 Y'@z";
      String string1 = "\"~Ra;A o1NJ";
      String string2 = null;
      String string3 = "#/components/schemas/";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server0).description();
      doReturn(string1, string2).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(license0).name();
      doReturn(string0).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string1 = "^Rn$t~FlXK['m-|0XS";
      String string2 = "Rw8SLb!\"s";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(server0).description();
      doReturn(string2, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "5OR89";
      String string1 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string2 = ".?-Q(>!OBBFLU]";
      boolean boolean0 = true;
      String string3 = "ibz";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      String string4 = "?K.BHCIv9JYqpdJ";
      int int0 = (-309);
      String string5 = "no description";
      String string6 = "no description";
      boolean boolean2 = false;
      String string7 = "";
      OperationParser operationParser0 = new OperationParser();
      String string8 = "Z\\o#W|2";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(contact0).email();
      doReturn(string8, (String) null).when(contact0).name();
      doReturn(string6, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      String string9 = "v7^OI,HG";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string6, (String) null).when(externalDocumentation1).description();
      doReturn(string9, (String) null).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation1);
      Server[] serverArray0 = new Server[8];
      String string10 = null;
      String string11 = "*lnOdGL;aOlY]IIaK:";
      String string12 = null;
      String string13 = "wzhL)-T}_pIkG";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMMA, operationParser0.MEDIA_TYPE).when(server0).description();
      doReturn(operationParser0.COMMA, string11).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.introspect.BasicBeanDescription";
      String string1 = "";
      String string2 = "[(xa0>R%N";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1).when(info0).termsOfService();
      doReturn(string2, (String) null).when(info0).title();
      doReturn(string0, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string3 = null;
      String string4 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(license0).name();
      doReturn(string4).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(license1).name();
      doReturn(string0, (String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license1);
      String string5 = "eYvg3-ym";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(server0).description();
      doReturn(string3).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "s%aP]lrQbp!R*U ";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      boolean boolean0 = true;
      String string1 = "";
      String string2 = "javax.validation.constraints.NotNull";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = (-1);
      String string3 = "";
      int int1 = (-485);
      String string4 = "T?{?k";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(stringArray0[2], string2, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[5], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string3).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(stringArray0[3], (String) null).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string1).when(schema0).ref();
      doReturn(stringArray0[1], (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      OperationParser operationParser0 = new OperationParser();
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      boolean boolean2 = false;
      boolean boolean3 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = null;
      boolean boolean4 = true;
      String string5 = "0^,V/^,KR";
      Explode explode0 = Explode.DEFAULT;
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = null;
      Content[] contentArray0 = new Content[0];
      boolean boolean1 = false;
      String string0 = "2'ZG\"I";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(boolean1).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string0, (String) null).when(parameter0).name();
      doReturn(boolean2, false).when(parameter0).required();
      doReturn(string0, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.2'ZG\"I
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = ".h*#s{<V*)&DCVAv\"E9";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string1 = "#/components/schemas/";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      String string2 = "=QIu Y,87";
      stringArray0[3] = string2;
      boolean boolean0 = true;
      String string3 = "com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator";
      String string4 = null;
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      String string5 = "#/components/schemas/";
      int int0 = 4;
      String string6 = null;
      int int1 = 2671;
      String string7 = "";
      String string8 = "eYJap";
      boolean boolean2 = true;
      String string9 = null;
      String string10 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string3, (String) null).when(schema0).description();
      doReturn(string2, string4, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema0).externalDocs();
      doReturn(string5, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string6).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string7).when(schema0).minimum();
      doReturn(string8, (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(string9).when(schema0).ref();
      doReturn(string10).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components1 = components0.securitySchemes(map0);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map1 = mediaType0.getExamples();
      Components components2 = components1.examples(map1);
      Map<String, Link> map2 = null;
      Components components3 = components2.links(map2);
      Map<String, Parameter> map3 = components0.getParameters();
      Components components4 = components3.parameters(map3);
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components4);
      int int2 = (-455);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean3 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int2).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean3, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      Schema schema2 = null;
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema2);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[8];
      String string11 = "EPC?eyc2sC4?z{";
      String string12 = "java.lang";
      String string13 = "iT";
      String string14 = "Ldh7o(o_&";
      String string15 = "";
      String string16 = "Dq-s{,q|UZj42";
      String string17 = "Invalid 'any-setter' annotation on field ";
      String string18 = null;
      String string19 = "";
      String string20 = "";
      String string21 = " NH#YR271 [/*";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string11, string12, string13, string14, string10).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string15, string16, string14, string17, string5).when(link0).operationId();
      doReturn(string18, string19, string20, string13, string21).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, Link> map4 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = ",";
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "3cI<";
      Parameter parameter0 = null;
      Components components1 = components0.addParameters(string1, parameter0);
      Example example0 = new Example();
      Components components2 = components1.addExamples(string1, example0);
      Map<String, RequestBody> map0 = components1.getRequestBodies();
      Components components3 = components2.requestBodies(map0);
      RequestBody requestBody1 = new RequestBody();
      Boolean boolean1 = new Boolean(string1);
      RequestBody requestBody2 = requestBody1.required(boolean1);
      String string2 = null;
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      MediaType mediaType0 = null;
      io.swagger.oas.models.media.Content content1 = content0.addMediaType(string2, mediaType0);
      io.swagger.oas.models.media.Content content2 = content1.addMediaType(string1, mediaType0);
      RequestBody requestBody3 = requestBody2.content(content2);
      RequestBody requestBody4 = requestBody2.$ref(string2);
      Components components4 = components3.addRequestBodies(string1, requestBody4);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "em9IHD^F\"{";
      String string1 = "=3QpVvCiQR1?";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string1, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Server[] serverArray0 = new Server[3];
      String string2 = "zYJUbEF%h;1q:DW/}v";
      String string3 = "";
      String string4 = "jah5Y4j^WU3";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3).when(server0).description();
      doReturn(string0, string4).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      Content[] contentArray0 = new Content[3];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[7];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components1 = components0.securitySchemes(hashMap0);
      HashMap<String, Parameter> hashMap1 = new HashMap<String, Parameter>();
      Components components2 = components1.parameters(hashMap1);
      String string0 = "";
      SecurityScheme securityScheme0 = null;
      Parameter parameter0 = new Parameter();
      String string1 = "javax.validation.constraints.Min";
      Parameter parameter1 = parameter0.description(string1);
      Example example0 = null;
      Parameter parameter2 = parameter1.addExamples(string1, example0);
      String string2 = "pHo2JX";
      Parameter parameter3 = parameter2.name(string2);
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components1);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(license0).name();
      doReturn(string0).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string1 = "";
      String string2 = "aKRIs@F=},";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(externalDocumentation0).description();
      doReturn(string2, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser operationParser0 = new OperationParser();
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string3 = "*/*";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string2, operationParser0.MEDIA_TYPE).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string4 = "j\\|  3?I>Itb{a";
      Example example0 = null;
      Components components1 = components0.addExamples(string4, example0);
      String string5 = "Can not find a (Map) Key deserializer for type %s";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(operationParser0.MEDIA_TYPE, pathItem0);
      Components components2 = components1.addCallbacks(string5, callback1);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[6];
      String string1 = "oj";
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      String string2 = "*/*";
      stringArray0[4] = string2;
      String string3 = "C$R.I6Pk94n\\/q/";
      stringArray0[5] = string3;
      boolean boolean0 = true;
      String string4 = "AUTO_CLOSE_JSON_CONTENT";
      String string5 = "*/*";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 1224;
      boolean boolean2 = true;
      String string6 = "UoB.gJtt=iN@]";
      String string7 = "E_02m0";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string4, (String) null).when(schema0).description();
      doReturn(stringArray0[5], string5, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[2]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string2).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(stringArray0[4], (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(string6, (String) null).when(schema0).ref();
      doReturn(string7, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      OperationParser operationParser0 = new OperationParser();
      String string8 = "";
      String string9 = "Tk_pXUzK,6";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string8).when(contact0).email();
      doReturn(stringArray0[4], (String) null).when(contact0).name();
      doReturn(string9, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "faEO[%5L21ods'#4tZ";
      String string1 = "no description";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string0, string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string2 = "U'wVq_7^i-o";
      String string3 = "";
      String string4 = "7_j)B]p-^ YBfjh&";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string4).when(contact0).email();
      doReturn(string2, string2).when(contact0).name();
      doReturn(string3).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      String string5 = "";
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Components components0 = null;
      Optional<List<Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components0);
      String string6 = "";
      ServerVariable[] serverVariableArray0 = new ServerVariable[8];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      serverVariableArray0[6] = serverVariableArray0[5];
      serverVariableArray0[7] = serverVariableArray0[6];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string6).when(server0).description();
      doReturn(string5).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(server0);
      int int0 = 7;
      int int1 = 33;
      int int2 = 2176;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema1).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components1 = new Components();
      String string7 = null;
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string7, header0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = ";HR:9MC*j";
      String string1 = "T";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string1, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[8];
      String string2 = null;
      String string3 = null;
      String string4 = "Can not locate class '";
      String string5 = null;
      String string6 = "no description";
      String string7 = "#/components/securitySchemes/";
      String string8 = "";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3, string4, string4, string5).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string6, string1, string3, string7, string2).when(link0).operationId();
      doReturn(string0, string8, string5, string0, string7).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      int int1 = Integer.MAX_VALUE;
      int int2 = 65;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "";
      String string1 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string1, (String) null).when(info0).title();
      doReturn(string1, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      ArraySchema arraySchema1 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema1);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(info0).description();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Schema<Object> schema0 = new io.swagger.oas.models.media.Schema<Object>();
      MediaType mediaType1 = mediaType0.example(string0);
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType2 = new MediaType();
      String string2 = "z?4 !2|.i:p4@Lkm";
      Example example0 = new Example();
      MediaType mediaType3 = mediaType2.addExamples(string2, example0);
      String string3 = "w`1l.0Lu!CLwqweL";
      Encoding encoding0 = new Encoding();
      encoding0.setContentType(string2);
      Encoding encoding1 = encoding0.contentType(string2);
      Encoding encoding2 = encoding1.style(string3);
      MediaType mediaType4 = mediaType3.addEncoding(string3, encoding2);
      String string4 = "'QeE.z8kw%";
      String string5 = "";
      String string6 = "DD^LNKCI@N%O(kf\"=R";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(exampleObject0).externalValue();
      doReturn(string2, string2, string4, string5).when(exampleObject0).name();
      doReturn(string5).when(exampleObject0).summary();
      doReturn(string6, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(info0).description();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Schema<Object> schema0 = new io.swagger.oas.models.media.Schema<Object>();
      MediaType mediaType1 = mediaType0.schema(schema0);
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType2 = mediaType1.encoding(map0);
      String string2 = "z?4 !2|.i:p4@Lkm";
      Example example0 = new Example();
      MediaType mediaType3 = mediaType2.addExamples(string0, example0);
      String string3 = "w`1l.0Lu!CLwqweL";
      Encoding encoding0 = new Encoding();
      Encoding encoding1 = encoding0.contentType(string2);
      MediaType mediaType4 = mediaType3.addEncoding(string3, encoding0);
      String string4 = "FAIL_ON_MISSING_CREATOR_PROPERTIES";
      String string5 = "vDI2|U}e:zMq";
      String string6 = " in a value";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(exampleObject0).externalValue();
      doReturn(string2, string4, string3, string2).when(exampleObject0).name();
      doReturn(string5, (String) null).when(exampleObject0).summary();
      doReturn(string6, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0, boolean0).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "!qrcV";
      Example example0 = new Example();
      Map<String, Callback> map0 = components0.getCallbacks();
      Components components1 = components0.callbacks(map0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = null;
      String string2 = components1.toString();
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
      Components components2 = components1.links(map1);
      String string3 = "";
      SecurityScheme securityScheme0 = null;
      Components components3 = components0.links(map1);
      Map<String, ApiResponse> map2 = components3.getResponses();
      components2.setResponses(map2);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      String string0 = "y:qD4";
      String string1 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, string1, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      Components components0 = new Components();
      String string2 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Header header0 = new Header();
      Header header1 = header0.example(string2);
      String string3 = "io.swagger.oas.models.media.XML";
      Header header2 = header0.example(string3);
      Components components1 = components0.addHeaders(string2, header2);
      String string4 = "-,1A8zLM1f";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      String string5 = "S&}A/0";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string5);
      arraySchema1.setAdditionalProperties(arraySchema0);
      Components components2 = components1.addSchemas(string4, arraySchema1);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components2);
      String string6 = null;
      String[] stringArray0 = new String[6];
      String string7 = "";
      stringArray0[0] = string7;
      stringArray0[1] = string2;
      stringArray0[2] = string6;
      stringArray0[3] = string3;
      stringArray0[4] = string6;
      stringArray0[5] = string1;
      boolean boolean0 = false;
      String string8 = ") ";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = Integer.MAX_VALUE;
      String string9 = " {nM/5nY-0";
      boolean boolean2 = true;
      String string10 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string6).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(stringArray0[4]).when(schema0).description();
      doReturn(string8, string8, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string9).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string0).when(schema0).minimum();
      doReturn(stringArray0[2]).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(string5, (String) null).when(schema0).ref();
      doReturn(string10).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      String string11 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string12 = "";
      String string13 = "$f)C:=q'^\\'K0=~_v";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string11, (String) null).when(link0).description();
      doReturn(string12).when(link0).operationId();
      doReturn(string13, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional2 = OperationParser.getLink(link0);
      String string14 = " I9qjQboDbP${";
      String string15 = "0U[sm2,@$RO<Mk";
      boolean boolean3 = true;
      boolean boolean4 = true;
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      String string16 = "";
      String string17 = "<X:gXfo@/|VI/kxdP";
      int int1 = (-197);
      String string18 = ":8@Q,7";
      boolean boolean5 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[2]).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean0).when(schema1).deprecated();
      doReturn(string14, (String) null).when(schema1).description();
      doReturn(string15, string5, (String) null, (String) null).when(schema1).example();
      doReturn(boolean3, false).when(schema1).exclusiveMaximum();
      doReturn(boolean4, false).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema1).externalDocs();
      doReturn(string16).when(schema1).format();
      doReturn(int0).when(schema1).maxLength();
      doReturn(0).when(schema1).maxProperties();
      doReturn(string17).when(schema1).maximum();
      doReturn(int1).when(schema1).minProperties();
      doReturn(string18).when(schema1).minimum();
      doReturn(string1).when(schema1).pattern();
      doReturn(boolean5, false).when(schema1).readOnly();
      doReturn(string17, (String) null).when(schema1).ref();
      doReturn(string4, (String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema1);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      boolean boolean0 = true;
      String string1 = "";
      boolean boolean1 = false;
      String string2 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[1]).when(externalDocumentation0).description();
      doReturn(string2).when(externalDocumentation0).url();
      int int0 = 23;
      int int1 = 1428;
      String string3 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string4 = "";
      boolean boolean2 = true;
      String string5 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean0).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string1, string1).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string1).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1, 0).when(schema0).maxProperties();
      doReturn(string1).when(schema0).maximum();
      doReturn(int1, int0).when(schema0).minProperties();
      doReturn(string3).when(schema0).minimum();
      doReturn(string4).when(schema0).pattern();
      doReturn(boolean2, boolean1).when(schema0).readOnly();
      doReturn(string1).when(schema0).ref();
      doReturn(string5).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string6 = "Ar(Fg?,oQAMTI)H";
      String string7 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string8 = null;
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(stringArray0[0]).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string6, string8).when(info0).termsOfService();
      doReturn(string3, string8).when(info0).title();
      doReturn(string7, string5).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      String[] stringArray0 = new String[5];
      stringArray0[0] = operationParser0.COMMA;
      stringArray0[1] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[2] = operationParser0.COMMA;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      boolean boolean0 = false;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = null;
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.DEFAULT;
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      String string0 = "";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(arraySchema0).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean0).when(parameter0).deprecated();
      doReturn(stringArray0[0], (String) null).when(parameter0).description();
      doReturn(explode0, explode1).when(parameter0).explode();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(parameter0).in();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(parameter0).name();
      doReturn(boolean2, false).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string0).when(parameter0).style();
      Components components0 = new Components();
      String string1 = ",";
      OperationParser.COMPONENTS_REF = string0;
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string1, callback0);
      ApiResponse apiResponse0 = null;
      Components components2 = components1.addResponses(stringArray0[2], apiResponse0);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components3 = components2.requestBodies(hashMap0);
      Header header0 = new Header();
      Example example0 = new Example();
      Header header1 = header0.addExamplesItem(example0);
      String string2 = "";
      Header header2 = header1.description(string2);
      Components components4 = components3.addHeaders(stringArray0[1], header2);
      Optional<Parameter> optional1 = OperationParser.getParameter(parameter0, components4);
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema1).maxItems();
      doReturn(0, 0).when(arraySchema1).minItems();
      doReturn((Schema) null).when(arraySchema1).schema();
      doReturn(false).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema1);
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      Class<io.swagger.oas.models.info.Contact> class0 = io.swagger.oas.models.info.Contact.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      String string0 = "";
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components2 = components1.addSchemas(string0, arraySchema0);
      Map<String, Link> map0 = components0.getLinks();
      Components components3 = components2.links(map0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponse apiResponse0 = null;
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(string0, apiResponse0);
      String string1 = "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer";
      ApiResponses apiResponses2 = apiResponses1.addApiResponse(string1, apiResponse0);
      ApiResponse apiResponse1 = apiResponses2.replace(apiResponses1.DEFAULT, apiResponse0);
      Components components4 = components3.responses(apiResponses2);
      boolean boolean0 = requestBody0.equals(components3);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      String string0 = "";
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components2 = components1.addSchemas(string0, arraySchema0);
      Map<String, Link> map0 = components0.getLinks();
      Components components3 = components2.links(map0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponse apiResponse0 = null;
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      ApiResponses apiResponses2 = apiResponses1.addApiResponse(string0, apiResponse0);
      String string1 = "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer";
      ApiResponses apiResponses3 = apiResponses2.addApiResponse(string1, apiResponse0);
      ApiResponse apiResponse1 = apiResponses3.replace(apiResponses2.DEFAULT, apiResponse0);
      Components components4 = components3.responses(apiResponses3);
      boolean boolean0 = requestBody0.equals(components3);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string0, string0).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[2];
      String string1 = "SKUek'PuwxZ";
      String string2 = "@RKC8gYt]hM9Lq";
      String string3 = "p*ScU<e8/a";
      String string4 = "iP";
      String string5 = "[zw=>kfx";
      String string6 = ">cu49b%aQ#D;Exh>";
      String string7 = "java.langio.swagger.oas.models.info.Contact";
      String string8 = "/\"3I<Adr0u\\";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameters0).expression();
      doReturn(string7, string8, (String) null, (String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string1, string0).when(link0).description();
      doReturn(string5, string3).when(link0).name();
      doReturn(string2, string3, string1, string6).when(link0).operationId();
      doReturn(string2, string4).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = ".h*#s{<V*)&DCVAv\"E9";
      String string1 = "Can not override null serializer";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(externalDocumentation0).description();
      doReturn(string0, string0).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string2 = "#/components/schemas/";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string2;
      stringArray0[2] = string0;
      String string3 = "=QIu Y,87";
      stringArray0[3] = string3;
      boolean boolean0 = true;
      String string4 = null;
      boolean boolean1 = false;
      String string5 = "java.langio.swagger.oas.models.links.Link";
      String string6 = "";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(externalDocumentation1).description();
      doReturn(string6).when(externalDocumentation1).url();
      String string7 = "#/components/schemas/";
      int int0 = 4;
      String string8 = null;
      int int1 = 2671;
      String string9 = "";
      String string10 = "eYJap";
      boolean boolean2 = true;
      String string11 = null;
      String string12 = null;
      String string13 = "java.lang";
      boolean boolean3 = false;
      String string14 = "}J";
      boolean boolean4 = false;
      int int2 = 0;
      String string15 = "java.lang";
      boolean boolean5 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string13).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean3).when(schema0).deprecated();
      doReturn(stringArray0[2], string14).when(schema0).description();
      doReturn(string3, string4, string7, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean4).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema0).externalDocs();
      doReturn(string7, stringArray0[0]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2).when(schema0).maxProperties();
      doReturn(string8).when(schema0).maximum();
      doReturn(int1, int1).when(schema0).minProperties();
      doReturn(string9).when(schema0).minimum();
      doReturn(string10, string15).when(schema0).pattern();
      doReturn(boolean2, boolean5).when(schema0).readOnly();
      doReturn(string11).when(schema0).ref();
      doReturn(string12).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components1 = components0.securitySchemes(map0);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map1 = mediaType0.getExamples();
      Components components2 = components1.examples(map1);
      Map<String, Link> map2 = null;
      Components components3 = components2.links(map2);
      Map<String, Parameter> map3 = components0.getParameters();
      Components components4 = components3.parameters(map3);
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components4);
      int int3 = (-455);
      Class<Integer> class0 = Integer.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean6 = true;
      Schema schema2 = null;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int3).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema1, schema2).when(arraySchema0).schema();
      doReturn(boolean6, boolean2).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(license0).name();
      doReturn(string0).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string1 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(externalDocumentation0).description();
      doReturn(string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser operationParser0 = new OperationParser();
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[5];
      Content content0 = null;
      String string2 = "o8eR,";
      String string3 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.annotations.links.Link[] linkArray0 = null;
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string2, string2, operationParser0.COMMA, operationParser0.MEDIA_TYPE, string3).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string3, string2, string2, string2, string1).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string4 = "j\\|  3?I>Itb{a";
      Example example0 = null;
      Components components1 = components0.addExamples(string4, example0);
      String string5 = "Can not find a (Map) Key deserializer for type %s";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(operationParser0.MEDIA_TYPE, pathItem0);
      Components components2 = components1.addCallbacks(string5, callback1);
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
      License license1 = null;
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license1);
      String string6 = "ACCEPT_CASE_INSENSITIVE_PROPERTIES";
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      String string0 = "]dFS";
      ServerVariable[] serverVariableArray0 = new ServerVariable[2];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, (String) null, (String) null).when(serverVariable0).description();
      doReturn(string0, string0).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string0, string0).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      String[] stringArray0 = new String[4];
      String string1 = "";
      stringArray0[0] = string1;
      String string2 = "#/components/schemas/";
      stringArray0[1] = string2;
      String string3 = "";
      stringArray0[2] = string3;
      String string4 = "";
      stringArray0[3] = string4;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string5 = "no description";
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string5, string3).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses(string2, apiResponse0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      boolean boolean1 = apiResponse0.equals(apiResponses1);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components2 = components1.schemas(map0);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "";
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components2 = components1.addSchemas(string0, arraySchema0);
      Map<String, Link> map0 = components0.getLinks();
      Components components3 = components2.links(map0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponse apiResponse0 = null;
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      ApiResponse apiResponse1 = apiResponses0.put(string0, apiResponse0);
      ApiResponses apiResponses2 = apiResponses1.addApiResponse(string0, apiResponse0);
      String string1 = "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer";
      ApiResponses apiResponses3 = apiResponses1._default(apiResponse0);
      ApiResponse apiResponse2 = apiResponses3.replace(apiResponses2.DEFAULT, apiResponse0);
      Components components4 = components3.responses(apiResponses3);
      boolean boolean0 = requestBody0.equals(components3);
      Class<Void> class0 = Void.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(class0).when(schema0).implementation();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0, (Schema) null).when(content0).schema();
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces2 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces1, produces2, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "";
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components2 = components1.addSchemas(string0, arraySchema0);
      Map<String, Link> map0 = components0.getLinks();
      Components components3 = components2.links(map0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponse apiResponse0 = null;
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      ApiResponse apiResponse1 = apiResponses0.put(string0, apiResponse0);
      ApiResponses apiResponses2 = apiResponses1.addApiResponse(string0, apiResponse0);
      String string1 = "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer";
      ApiResponses apiResponses3 = apiResponses1._default(apiResponse0);
      ApiResponse apiResponse2 = apiResponses3.replace(apiResponses2.DEFAULT, apiResponse0);
      Components components4 = components3.responses(apiResponses3);
      boolean boolean0 = requestBody0.equals(components3);
      Class<Void> class0 = Void.class;
      String[] stringArray0 = null;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = true;
      ExternalDocumentation externalDocumentation0 = null;
      int int0 = (-135);
      String string2 = null;
      String string3 = ",";
      String string4 = "N`;`7TJ#z-#aU7&g";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      ExampleObject[] exampleObjectArray0 = new ExampleObject[5];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      String string5 = "java.langio.swagger.oas.models.links.Link";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string5, (String) null).when(content0).mediaType();
      doReturn(schema0, schema1).when(content0).schema();
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces2 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces1, produces2, components3);
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation1);
      MediaType mediaType0 = new MediaType();
      Map<String, Encoding> map1 = null;
      MediaType mediaType1 = mediaType0.encoding(map1);
      Map<String, Example> map2 = mediaType0.getExamples();
      MediaType mediaType2 = mediaType1.examples(map2);
      MediaType mediaType3 = mediaType2.schema(arraySchema0);
      ExampleObject exampleObject1 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject1).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType3, exampleObject1);
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      String string0 = "eg.NVA{4Ob";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string0).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string1 = "e[{Yo\\aX[5D|YX";
      String string2 = null;
      String string3 = "GkST)]5+";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters1).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string3, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string1, string1, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn(string2, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      doReturn(linkParameters1, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[5];
      Content content0 = null;
      String string4 = "java.langio.swagger.oas.models.servers.Server";
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[3];
      linkArray0[0] = link0;
      linkArray0[1] = link0;
      linkArray0[2] = link0;
      String string5 = "/";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string4, string4, string2, string4).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string4, string0, string1, string5, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      Components components1 = components0.responses(hashMap0);
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      Tag tag0 = new Tag();
      io.swagger.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.oas.models.ExternalDocumentation();
      String string6 = "Z|Z]<i";
      io.swagger.oas.models.ExternalDocumentation externalDocumentation1 = externalDocumentation0.url(string6);
      Tag tag1 = tag0.externalDocs(externalDocumentation1);
      Map<String, Object> map1 = tag1.getExtensions();
      components1.setExtensions(map1);
      Components components2 = components1.securitySchemes(hashMap1);
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
      MediaType mediaType0 = new MediaType();
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string6, encoding0);
      String string7 = null;
      MediaType mediaType2 = mediaType1.example(string7);
      Map<String, Example> map2 = null;
      MediaType mediaType3 = mediaType2.examples(map2);
      String string8 = ",";
      String string9 = "CxKTstxRl=X^C[_x ";
      String string10 = "";
      String string11 = "java.langio.swagger.oas.models.servers.Server";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(exampleObject0).externalValue();
      doReturn(string8, string6, string9, string10).when(exampleObject0).name();
      doReturn(string11, (String) null).when(exampleObject0).summary();
      doReturn(string6, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType3, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      Server[] serverArray0 = new Server[1];
      String string0 = "com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer";
      String string1 = null;
      String string2 = "com.fasterxml.jackson.databind.ser.std.SerializableSerializer";
      ServerVariable[] serverVariableArray0 = new ServerVariable[2];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(server0).description();
      doReturn(string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Components components0 = new Components();
      String string3 = "G_AS=K7Ja'G;";
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string3, requestBody0);
      io.swagger.oas.models.media.Schema<ApiResponses> schema0 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      Components components2 = components1.addSchemas(string3, schema0);
      String string4 = "0r0";
      Header header0 = new Header();
      Header.StyleEnum header_StyleEnum0 = Header.StyleEnum.SIMPLE;
      Header header1 = header0.style(header_StyleEnum0);
      Components components3 = components2.addHeaders(string4, header1);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components4 = components3.parameters(hashMap0);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      String string0 = "[~im!f";
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      Map<String, RequestBody> map0 = components1.getRequestBodies();
      RequestBody requestBody1 = requestBody0.description(string0);
      Components components2 = components1.requestBodies(map0);
      Callback callback0 = new Callback();
      Components components3 = components2.addCallbacks(string0, callback0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = components2.getSchemas();
      Components components4 = components3.schemas(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }
}
