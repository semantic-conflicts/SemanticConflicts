/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 01:06:19 GMT 2020
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.ArraySchema;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.responses.ApiResponse;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.links.Link;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.parameters.Parameter;
import io.swagger.oas.models.parameters.RequestBody;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.OAuthFlows;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "KEHN@CF";
      String string1 = "java.langio.swagger.oas.models.parameters.RequestBody";
      String string2 = "<:#_)qjxWk3q3<";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(license0).name();
      doReturn(string1, string2).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      MediaType mediaType0 = new MediaType();
      String string3 = "j?aHoWT";
      MediaType mediaType1 = mediaType0.example(string3);
      String string4 = ",YbI}Tc";
      String string5 = "@JsonUnwrapped";
      String string6 = "[rM/Jw8xFS+IB/";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(exampleObject0).externalValue();
      doReturn(string4, string1, string5, string1).when(exampleObject0).name();
      doReturn(string5, (String) null).when(exampleObject0).summary();
      doReturn(string6, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType1, exampleObject0);
      OperationParser operationParser0 = new OperationParser();
      Class<Example> class0 = Example.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      Map<String, Link> map0 = components0.getLinks();
      Components components1 = components0.links(map0);
      Components components2 = components0.links(map0);
      Callback callback0 = new Callback();
      Components components3 = components1.addCallbacks(operationParser0.DEFAULT_DESCRIPTION, callback0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components4 = components3.examples(hashMap0);
      Example example0 = new Example();
      String string7 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string7).when(server0).description();
      doReturn(string7).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
      Example example1 = example0.$ref(string3);
      Example example2 = example1.value(produces0);
      Components components5 = components4.addExamples(string3, example2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      int int0 = (-2354);
      int int1 = 3;
      int int2 = 1891;
      Class<Parameter> class0 = Parameter.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = ":~.{56NbPks}@*ocr7.";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      String string1 = "(q58|QN>0";
      boolean boolean1 = true;
      String string2 = " starting at ";
      String string3 = "4+k<tCjgu\"y";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string2, stringArray0[0]).when(externalDocumentation0).description();
      doReturn(string0, string3).when(externalDocumentation0).url();
      String string4 = null;
      int int3 = (-2087);
      String string5 = "";
      String string6 = null;
      boolean boolean2 = false;
      String string7 = "JOb\"*f4l%YW!I,o";
      String string8 = "PhypN &yp";
      boolean boolean3 = true;
      boolean boolean4 = true;
      boolean boolean5 = true;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean0, boolean2).when(schema2).deprecated();
      doReturn(string1, string7).when(schema2).description();
      doReturn(string0, string1, string6).when(schema2).example();
      doReturn(boolean1, boolean3).when(schema2).exclusiveMaximum();
      doReturn(boolean1, boolean4).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema2).externalDocs();
      doReturn(string4).when(schema2).format();
      doReturn(int2).when(schema2).maxLength();
      doReturn(int3).when(schema2).maxProperties();
      doReturn(string4).when(schema2).maximum();
      doReturn(int3).when(schema2).minProperties();
      doReturn(string5).when(schema2).minimum();
      doReturn(string5).when(schema2).pattern();
      doReturn(boolean1, boolean5).when(schema2).readOnly();
      doReturn(string4).when(schema2).ref();
      doReturn(string6).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema2);
      String string9 = "io.swagger.jaxrs2.OperationParser";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string9, stringArray0[0]).when(contact0).email();
      doReturn(string1, string3).when(contact0).name();
      doReturn(string1, string7).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      Server[] serverArray0 = new Server[3];
      ApiResponse[] apiResponseArray0 = new ApiResponse[9];
      Content content0 = null;
      String string10 = "java.langjava.lang.Integer";
      String string11 = null;
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[6];
      String string12 = "TzJ7s";
      String string13 = "G0<";
      String string14 = "Strange Collection type ";
      String string15 = "java.langio.swagger.oas.models.media.Content";
      String string16 = "";
      String string17 = "no description";
      String string18 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string19 = "D;idAw|fS5Zggf";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string12, stringArray0[0], string13, string14, string15).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string4, string0, string16, string12, string17).when(link0).operationId();
      doReturn(string18, string19, string18, string8, string12).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      String string20 = "cjaq[36";
      String string21 = "vQ/9=m]n7V";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string4, string10, string11, string4, string8).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string3, string20, string21, string1, string21).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string22 = "Can not deserialize Class ";
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string22, requestBody0);
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map0 = arraySchema1.getProperties();
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components2 = components1.parameters(hashMap0);
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      String string23 = "`$WP}tn.67u?\"3wI@c\\";
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.$ref(string23);
      Map<String, Link> map1 = apiResponse2.getLinks();
      Components components3 = components2.links(map1);
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components3);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "@_5U)7)1>L_NH";
      String[] stringArray0 = new String[6];
      String string1 = "java.langio.swagger.oas.models.media.ArraySchema";
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      String string2 = "POST";
      stringArray0[2] = string2;
      stringArray0[3] = string0;
      String string3 = "g+m?,-~C";
      stringArray0[4] = string3;
      stringArray0[5] = string0;
      boolean boolean0 = true;
      String string4 = null;
      String string5 = "";
      String string6 = "io.swagge";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(externalDocumentation0).description();
      doReturn(stringArray0[1], (String) null).when(externalDocumentation0).url();
      int int0 = 0;
      String string7 = "Y 3=:R\" [E9$v9I[=";
      int int1 = (-1575);
      String string8 = "java.langio.swagger.oas.models.info.Info";
      String string9 = "4e k4;YHS$4\"";
      boolean boolean2 = true;
      boolean boolean3 = false;
      String string10 = "java.langjava.lang.Integer";
      String string11 = "^eyMPwQ!/v$/skxF";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string9).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean2).when(schema0).deprecated();
      doReturn(string4).when(schema0).description();
      doReturn(string5, string6, stringArray0[5]).when(schema0).example();
      doReturn(boolean1, boolean2).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string5).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string7).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string0).when(schema0).minimum();
      doReturn(string8, string9).when(schema0).pattern();
      doReturn(boolean1, boolean3).when(schema0).readOnly();
      doReturn(stringArray0[4], string10).when(schema0).ref();
      doReturn(string6, string11).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[6];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      String string12 = "!Y4IAd";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string10, (String) null).when(server0).description();
      doReturn(string12, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      int int0 = 1113;
      int int1 = 100;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      boolean boolean1 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean1, false).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string1, header0);
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>();
      Components components2 = components1.links(hashMap0);
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<Object> schema1 = new io.swagger.oas.models.media.Schema<Object>();
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.items(schema1);
      Components components3 = components2.addSchemas(string1, arraySchema2);
      Map<String, Header> map0 = components0.getHeaders();
      Components components4 = components3.headers(map0);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean2 = true;
      String string0 = "gI{m";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.DEFAULT;
      String string1 = ":";
      String string2 = "4AmT";
      boolean boolean3 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean4 = false;
      String string3 = " entries, hash area of ";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(boolean2, boolean4).when(parameter0).deprecated();
      doReturn(string0, string0).when(parameter0).description();
      doReturn(string1, string3).when(parameter0).in();
      doReturn(string2, string3).when(parameter0).name();
      doReturn(boolean3, boolean2).when(parameter0).required();
      doReturn(string2, string3).when(parameter0).style();
      Components components0 = new Components();
      String string4 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      String string5 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string5);
      Components components1 = components0.addSchemas(string4, arraySchema2);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = components1.getResponses();
      Components components2 = new Components();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components2);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum. ENTRIES, HASH AREA OF 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string0 = "java.lang";
      String string1 = "io.swagger.oas.models.media.ArraySchema";
      String string2 = "java.langio.swagger.oas.models.parameters.RequestBody";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string0, string2).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      String string3 = "[";
      String string4 = "FC";
      String string5 = "{;`)bS/y>d*Vt%}GWi";
      String string6 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string5).when(externalDocumentation0).description();
      doReturn(string4, string6).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components1 = components0.parameters(hashMap0);
      HashMap<String, Header> hashMap1 = new HashMap<String, Header>();
      Components components2 = components1.headers(hashMap1);
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap2 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      Components components3 = components2.responses(hashMap2);
      HashMap<String, SecurityScheme> hashMap3 = new HashMap<String, SecurityScheme>();
      Components components4 = components1.securitySchemes(hashMap3);
      io.swagger.oas.annotations.links.Link[] linkArray0 = null;
      Header header0 = new Header();
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      Header header1 = header0.explode(boolean1);
      Boolean boolean2 = null;
      Header header2 = header1.required(boolean2);
      Header header3 = header2.deprecated(boolean1);
      header3.setAllowEmptyValue(boolean2);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[5];
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      contentArray0[0] = content0;
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[9];
      String string0 = null;
      String string1 = "S7/F\"X|gZ[Q[#zZF";
      String string2 = "=:%PMIw\").3RU\"l?3d_";
      String string3 = ",";
      String string4 = null;
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string1, string0, string0).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string1, string0, string1, string1, string1).when(link0).operationId();
      doReturn(string2, string3, string4, string2, string2).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      String string5 = "P $`}jd\\2-4]oq?[u";
      String string6 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(license0).name();
      doReturn(string6).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string7 = "";
      boolean boolean0 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string7).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, SecurityScheme> map1 = null;
      Components components1 = components0.securitySchemes(map1);
      Components components2 = components0.links(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map2 = arraySchema0.getProperties();
      Components components3 = components2.schemas(map2);
      Map<String, Example> map3 = components3.getExamples();
      Components components4 = components1.examples(map3);
      String string8 = null;
      Example example0 = null;
      Components components5 = components4.addExamples(string8, example0);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components6 = components5.callbacks(hashMap0);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components6);
      Server[] serverArray0 = new Server[7];
      String string9 = "";
      String string10 = "jeARw";
      String string11 = null;
      String string12 = "A@^C0)XQS|";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string6).when(server0).description();
      doReturn(string2, string11).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.ser.std.MapSerializer";
      String string1 = "au";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      String string2 = "io.swagge";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string3 = "\\.zcT(m2<5#ia";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string2).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string3).when(info0).termsOfService();
      doReturn(string1, string3).when(info0).title();
      doReturn(string0, string0).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String string4 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      String string5 = "no description";
      stringArray0[1] = string5;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string1;
      stringArray0[7] = string1;
      boolean boolean0 = false;
      String string6 = "java.langio.swagger.oas.models.media.Content";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = null;
      int int0 = (-1);
      String string7 = "O";
      String string8 = "y+U";
      String string9 = "<C9";
      boolean boolean2 = false;
      String string10 = null;
      String string11 = "";
      String string12 = "io.swagge";
      String string13 = "com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string6, string12).when(schema0).description();
      doReturn(string0, stringArray0[7], string9, stringArray0[4]).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string4).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string7).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string8).when(schema0).minimum();
      doReturn(string9, string13).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string10).when(schema0).ref();
      doReturn(string11).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Components components0 = new Components();
      boolean boolean3 = components0.equals(optional1);
      Optional<Parameter> optional2 = OperationParser.getParameter(parameter0, components0);
      ArraySchema arraySchema0 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[6];
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      Optional<List<Parameter>> optional4 = OperationParser.getParametersList(parameterArray0, components0);
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional5 = OperationParser.getServer(server0);
      String string14 = "com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer";
      String string15 = "java.langio.swagger.oas.models.media.ArraySchema";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string15).when(linkParameters0).expression();
      doReturn(string14, stringArray0[5]).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      boolean boolean4 = true;
      boolean boolean5 = true;
      String string16 = "java.lang";
      int int1 = (-1367);
      String string17 = null;
      String string18 = ",";
      boolean boolean6 = false;
      String string19 = "%'N}2j%vbOFS!0[";
      String string20 = "Can not access ";
      String string21 = null;
      String string22 = "";
      boolean boolean7 = false;
      boolean boolean8 = true;
      String string23 = "java.langio.swagger.oas.models.parameters.RequestBody";
      String string24 = "tEI7Q(6Yb<<?db>nG'";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string10).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean2).when(schema1).deprecated();
      doReturn(string14, string20).when(schema1).description();
      doReturn(string5, stringArray0[5], string21).when(schema1).example();
      doReturn(boolean4, boolean7).when(schema1).exclusiveMaximum();
      doReturn(boolean5, boolean8).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema1).externalDocs();
      doReturn(string16, string23).when(schema1).format();
      doReturn(int1).when(schema1).maxLength();
      doReturn(string0).when(schema1).maximum();
      doReturn(int1).when(schema1).minProperties();
      doReturn(string17).when(schema1).minimum();
      doReturn(string18, string20).when(schema1).pattern();
      doReturn(boolean6).when(schema1).readOnly();
      doReturn(stringArray0[4], stringArray0[5]).when(schema1).ref();
      doReturn(string19, string24).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional6 = OperationParser.getSchemaFromAnnotation(schema1);
      String string25 = null;
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string17).when(externalDocumentation1).description();
      doReturn(string25).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional7 = OperationParser.getExternalDocumentation(externalDocumentation1);
      String[] stringArray1 = new String[7];
      String string26 = "~x07rtZbXP 4W";
      stringArray1[0] = string26;
      String string27 = "";
      stringArray1[1] = string27;
      String string28 = "2;s=gWSq<|r.)tSIU";
      stringArray1[2] = string28;
      String string29 = "";
      stringArray1[3] = string29;
      String string30 = "M4!5_Jfv[*4{zs0<+";
      stringArray1[4] = string30;
      String string31 = "";
      stringArray1[5] = string31;
      String string32 = "*/*";
      stringArray1[6] = string32;
      Optional<Set<Tag>> optional8 = OperationParser.getTags(stringArray1);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Components components0 = new Components();
      boolean boolean0 = components0.equals(optional1);
      Optional<Parameter> optional2 = OperationParser.getParameter(parameter0, components0);
      ArraySchema arraySchema0 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[6];
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      Optional<List<Parameter>> optional4 = OperationParser.getParametersList(parameterArray0, components0);
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional5 = OperationParser.getServer(server0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional6 = OperationParser.getSchemaFromAnnotation(schema1);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional7 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String[] stringArray0 = new String[7];
      String string0 = "~x07rtZbXP 4W";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "2;s=gWSq<|r.)tSIU";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "M4!5_Jfv[*4{zs0<+";
      stringArray0[4] = string4;
      String string5 = "";
      stringArray0[5] = string5;
      String string6 = "*/*";
      stringArray0[6] = string6;
      Optional<Set<Tag>> optional8 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[8];
      String string0 = null;
      String string1 = "4,";
      String string2 = "/[ %";
      String string3 = null;
      String string4 = null;
      String string5 = "*VnYb0-j64$?";
      String string6 = "java.lang";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string1, string1, string2).when(link0).description();
      doReturn(string1, string5, string0, string6, string6).when(link0).name();
      doReturn(string3, string4, string4, string0, string4).when(link0).operationId();
      doReturn(string4, string1, string1, string1, string0).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      boolean boolean0 = false;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      Server[] serverArray0 = new Server[8];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(contact0).email();
      doReturn(string0).when(contact0).name();
      doReturn(string1).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string2 = null;
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, Header> map0 = components0.getHeaders();
      Components components1 = components0.headers(map0);
      String string3 = "";
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string3, header0);
      Parameter parameter0 = new Parameter();
      Boolean boolean1 = new Boolean(string3);
      Parameter parameter1 = parameter0.allowReserved(boolean1);
      Components components3 = components2.addParameters(string3, parameter1);
      Operation operation0 = new Operation();
      boolean boolean2 = false;
      boolean boolean3 = false;
      boolean boolean4 = Boolean.logicalXor(boolean2, boolean3);
      Operation operation1 = operation0.addTagsItem(string3);
      Map<String, Callback> map1 = operation1.getCallbacks();
      Components components4 = components3.callbacks(map1);
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string3, pathItem0);
      String string4 = "";
      PathItem pathItem1 = pathItem0.description(string3);
      Callback callback2 = callback1.addPathItem(string4, pathItem1);
      String string5 = "LaIK:Vn}\\:)?m-2h";
      Callback callback3 = callback2.addPathItem(string5, pathItem1);
      Components components5 = components4.addCallbacks(string3, callback3);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      io.swagger.oas.annotations.parameters.RequestBody requestBody1 = null;
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody1, components0);
      String string6 = "!VZ52[4TB0MGi@^zV<";
      String string7 = ",";
      String string8 = "java.lang";
      String string9 = "<]^U&9Vmice|O";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string6, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string7, (String) null).when(info0).termsOfService();
      doReturn(string8, (String) null).when(info0).title();
      doReturn(string9, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[0];
      Map<String, Link> map2 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Server[] serverArray0 = new Server[2];
      String string0 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string0, string0).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      String string1 = "";
      stringArray0[4] = string1;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      boolean boolean0 = true;
      String string2 = ",pd/6(uy!a^%_";
      boolean boolean1 = true;
      String string3 = "HP\"e\\.[7r]A!N";
      String string4 = "e?WS>;B";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string4).when(externalDocumentation0).description();
      doReturn(string3, stringArray0[0]).when(externalDocumentation0).url();
      String string5 = "";
      int int0 = 22;
      String string6 = null;
      String string7 = "F.Ez m~Kw/j5+";
      boolean boolean2 = true;
      boolean boolean3 = false;
      boolean boolean4 = false;
      int int1 = (-1052);
      int int2 = 293;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean2).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string2, string2, string3, string5).when(schema0).example();
      doReturn(boolean0, boolean3).when(schema0).exclusiveMaximum();
      doReturn(boolean1, boolean4).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string5).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1).when(schema0).maxProperties();
      doReturn(stringArray0[1]).when(schema0).maximum();
      doReturn(int0, int2).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(string6).when(schema0).pattern();
      doReturn(boolean0, boolean1).when(schema0).readOnly();
      doReturn(stringArray0[3]).when(schema0).ref();
      doReturn(string7, string3).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[9];
      boolean boolean5 = false;
      boolean boolean6 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      String string8 = "`*";
      String string9 = "M!Aci7;6-&h+H~%";
      String string10 = "java.langio.swagger.oas.models.media.MediaType";
      boolean boolean7 = true;
      String string11 = "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(externalDocumentation1).description();
      doReturn(string11, (String) null).when(externalDocumentation1).url();
      int int3 = 3457;
      int int4 = (-2337);
      String string12 = "#\"F]Oot@`X3$^))#";
      String string13 = "    headers: ";
      String string14 = "_2v{af1_<R+KG7C'-+";
      String string15 = "com.fasterxml.jackson.databind.module.SimpleModule";
      String string16 = ";0qc";
      String string17 = "cF=7(b(";
      boolean boolean8 = false;
      int int5 = 20;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0]).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean4).when(schema1).deprecated();
      doReturn(string8, string15).when(schema1).description();
      doReturn(string9, string10, string16, string17).when(schema1).example();
      doReturn(boolean7, boolean8).when(schema1).exclusiveMaximum();
      doReturn(boolean6).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema1).externalDocs();
      doReturn(stringArray0[4]).when(schema1).format();
      doReturn(int3).when(schema1).maxLength();
      doReturn(int5, 0).when(schema1).maxProperties();
      doReturn(string2).when(schema1).maximum();
      doReturn(int4).when(schema1).minProperties();
      doReturn(string12).when(schema1).minimum();
      doReturn(string0).when(schema1).pattern();
      doReturn(boolean6).when(schema1).readOnly();
      doReturn(string13, string4).when(schema1).ref();
      doReturn(string14, string0).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema1);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Encoding encoding0 = new Encoding();
      Map<String, Header> map0 = encoding0.getHeaders();
      Components components1 = components0.headers(map0);
      Map<String, Example> map1 = components1.getExamples();
      Components components2 = components1.examples(map1);
      Map<String, Callback> map2 = components1.getCallbacks();
      Components components3 = components2.callbacks(map2);
      Example example0 = new Example();
      Components components4 = components3.addExamples(stringArray0[3], example0);
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContent(content0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      boolean boolean0 = false;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[3];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      String string0 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.TRUE;
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null, (Class) null, (Class) null, (Class) null).when(schema0).implementation();
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false, false, false, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false, false, false, false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null, (ArraySchema) null, (ArraySchema) null, (ArraySchema) null, (ArraySchema) null).when(parameter0).array();
      doReturn((Object) contentArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(parameter0).content();
      doReturn(boolean1, false, false, false, false).when(parameter0).deprecated();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).description();
      doReturn(explode0, explode1, explode2, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).in();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(boolean1, false, false, false, false).when(parameter0).required();
      doReturn(schema0, (Schema) null, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components0 = new Components();
      Map<String, RequestBody> map0 = null;
      Components components1 = components0.requestBodies(map0);
      String string1 = null;
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string1, header0);
      Encoding encoding0 = new Encoding();
      Map<String, Header> map1 = encoding0.getHeaders();
      Components components3 = components2.headers(map1);
      Map<String, Object> map2 = components3.getExtensions();
      encoding0.setExtensions(map2);
      Map<String, Parameter> map3 = components2.getParameters();
      Components components4 = components3.parameters(map3);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional3 = OperationParser.getLink(link0);
      Optional<io.swagger.oas.models.media.Schema> optional4 = OperationParser.getSchemaFromAnnotation(schema0);
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional5 = OperationParser.getTags(stringArray0);
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components1 = components0.securitySchemes(hashMap0);
      Link link1 = new Link();
      Map<String, Header> map0 = link1.getHeaders();
      Components components2 = components1.headers(map0);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components3 = components2.responses(apiResponses0);
      String string0 = "' has value that is not of type ObjectNode (but ";
      Header header0 = new Header();
      Header.StyleEnum header_StyleEnum0 = Header.StyleEnum.SIMPLE;
      Header header1 = header0.style(header_StyleEnum0);
      Header header2 = header1.example(string0);
      Components components4 = components3.addHeaders(string0, header2);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "&)WMWyL";
      stringArray0[2] = string2;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Server[] serverArray0 = new Server[1];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType0, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      MediaType mediaType0 = new MediaType();
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType0, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Components components0 = null;
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = null;
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[6];
      String string0 = "~kiCe?J51~G|-9bKr4";
      String string1 = null;
      String string2 = " S3.!";
      String string3 = ";0";
      String string4 = "io.swagger.jaxrs2.OperationParser";
      String string5 = null;
      String string6 = null;
      String string7 = "t#,#z[E=k!k/I:X\\2RP";
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Schema<String> schema0 = new io.swagger.oas.models.media.Schema<String>();
      MediaType mediaType1 = mediaType0.schema(schema0);
      String string0 = "";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType0.addEncoding(string0, encoding0);
      Map<String, Encoding> map0 = mediaType2.getEncoding();
      MediaType mediaType3 = mediaType1.encoding(map0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType3, exampleObject0);
      OperationParser.DEFAULT_DESCRIPTION = operationParser0.DEFAULT_DESCRIPTION;
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[9];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "4t|(k}x-~";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = "T?2";
      stringArray0[3] = string3;
      String string4 = "io.swagger.jaxrs2.OperationParser";
      stringArray0[4] = string4;
      String string5 = "J(}I";
      stringArray0[5] = string5;
      String string6 = "91p.P~8X:Ka";
      stringArray0[6] = string6;
      String string7 = "?lA";
      stringArray0[7] = string7;
      String string8 = "??{GKf";
      stringArray0[8] = string8;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      MediaType mediaType0 = new MediaType();
      String string9 = null;
      Encoding encoding0 = new Encoding();
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Encoding encoding1 = encoding0.headers(hashMap0);
      String string10 = "only \"true\" or \"false\" recognized";
      Encoding encoding2 = encoding1.style(string10);
      MediaType mediaType1 = mediaType0.addEncoding(string9, encoding2);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType1, exampleObject0);
      OperationParser operationParser0 = new OperationParser();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, Parameter> map1 = null;
      Components components1 = components0.parameters(map1);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(operationParser0.DEFAULT_DESCRIPTION, securityScheme0);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map2 = components2.getResponses();
      Components components3 = components2.responses(map2);
      Link link0 = new Link();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Header> map3 = apiResponse0.getHeaders();
      Link link1 = link0.headers(map3);
      Link link2 = link1.$ref(operationParser0.COMPONENTS_REF);
      Components components4 = components3.addLinks(string7, link2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces1, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String[] stringArray0 = new String[3];
      String string0 = "y|%\"iQt4$-r3q(?\\";
      stringArray0[0] = string0;
      String string1 = "ghO{F//[";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      Header header0 = new Header();
      Example example0 = new Example();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Object> map1 = apiResponse0.getExtensions();
      example0.setExtensions(map1);
      Header header1 = header0.addExamplesItem(example0);
      Components components1 = components0.addHeaders(stringArray0[2], header1);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components2 = components1.responses(apiResponses0);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "";
      Parameter parameter0 = null;
      Components components1 = components0.addParameters(string0, parameter0);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components1.getSchemas();
      Components components2 = components1.schemas(map0);
      Map<String, Link> map1 = components1.getLinks();
      Components components3 = components2.links(map1);
      String string1 = "Unexpected token '";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string1);
      Components components4 = components3.addSchemas(string1, arraySchema1);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components4);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components1 = components0.securitySchemes(hashMap0);
      String string0 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Header> map0 = apiResponse0.getHeaders();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.headers(map0);
      Components components2 = components1.addResponses(string0, apiResponse1);
      Example example0 = new Example();
      String string1 = "java.lang";
      String string2 = example0.toString();
      Example example1 = example0.summary(string1);
      Components components3 = components2.addExamples(string0, example1);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components3);
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      LinkParameters linkParameters0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[8];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      String string0 = " -- suspect a DoS attack based on hash collisions";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components2 = components1.responses(apiResponses0);
      Parameter parameter1 = null;
      Components components3 = components2.addParameters(string0, parameter1);
      Components components4 = components3.links(map0);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      Link link0 = new Link();
      Map<String, Header> map1 = link0.getHeaders();
      Components components1 = components0.headers(map1);
      Map<String, Parameter> map2 = components0.getParameters();
      Components components2 = components1.parameters(map2);
      String string0 = "Decimal point not followed by a digit";
      String string1 = " known properties: ";
      Header header0 = new Header();
      Link link1 = link0.addHeaderObject(string1, header0);
      Components components3 = components2.addLinks(string0, link1);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components4 = components3.callbacks(hashMap0);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional4 = OperationParser.getServer(server0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional5 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license1);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "TWNsJeMXq)?4zQkt<";
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      Map<String, Callback> map0 = null;
      Components components2 = components1.callbacks(map0);
      Link link0 = new Link();
      Link link1 = link0.description(string0);
      Components components3 = components2.addLinks(string0, link1);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components4 = components3.parameters(hashMap0);
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContent(content0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      Components components0 = new Components();
      String string0 = "";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components1 = components0.addSecuritySchemes(string0, securityScheme0);
      RequestBody requestBody0 = null;
      Components components2 = components1.addRequestBodies(string0, requestBody0);
      String string1 = "io.swagger.oas.models.responses.ApiResponse";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components3 = components2.addResponses(string1, apiResponse0);
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components4 = components3.headers(hashMap0);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[2];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      Map<String, RequestBody> map1 = null;
      Components components1 = components0.requestBodies(map1);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components2 = components1.parameters(hashMap0);
      String string0 = "";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string0, pathItem0);
      Components components3 = components2.addCallbacks(string0, callback1);
      Header header0 = new Header();
      LinkedList<Example> linkedList0 = new LinkedList<Example>();
      Header header1 = header0.examples(linkedList0);
      Boolean boolean0 = new Boolean(string0);
      Header header2 = header1.allowEmptyValue(boolean0);
      Components components4 = components3.addHeaders(string0, header2);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      String string0 = "rr+:";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string0, callback0);
      io.swagger.oas.models.media.Schema<Tag> schema1 = new io.swagger.oas.models.media.Schema<Tag>();
      Components components2 = components1.addSchemas(string0, schema1);
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme.In securityScheme_In0 = SecurityScheme.In.COOKIE;
      SecurityScheme securityScheme1 = securityScheme0.in(securityScheme_In0);
      Components components3 = components2.addSecuritySchemes(string0, securityScheme1);
      String string1 = "overflow, value can not be represented as 16-bit value";
      Example example0 = new Example();
      String string2 = "S[zXCqQ3vuE+97";
      Example example1 = example0.$ref(string2);
      String string3 = "QLq(\\";
      Example example2 = example1.externalValue(string3);
      Components components4 = components3.addExamples(string1, example2);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      String string0 = "TE,n";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Header header0 = new Header();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.addHeaderObject(string0, header0);
      Components components1 = components0.addResponses(string0, apiResponse1);
      int int0 = 25;
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>(int0, int0);
      Components components2 = components1.callbacks(hashMap0);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      Components components1 = components0.responses(apiResponses1);
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponses1.replace(operationParser0.COMMA, apiResponse0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components2 = components1.examples(hashMap0);
      String string0 = null;
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      String string1 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string1);
      Components components3 = components2.addSchemas(string0, arraySchema1);
      String string2 = "-st0`(";
      Components components4 = components3.addResponses(string2, apiResponse0);
      io.swagger.oas.models.media.Schema schema0 = arraySchema1.additionalProperties(arraySchema0);
      components4.setExamples(hashMap0);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional4 = OperationParser.getContact(contact0);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      MediaType mediaType0 = new MediaType();
      Map<String, Example> map0 = mediaType0.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      io.swagger.oas.models.media.Schema<Parameter> schema0 = new io.swagger.oas.models.media.Schema<Parameter>();
      MediaType mediaType2 = mediaType1.schema(schema0);
      String string0 = "LDTmJXm][>6";
      MediaType mediaType3 = mediaType2.example(string0);
      Encoding encoding0 = new Encoding();
      MediaType mediaType4 = mediaType0.addEncoding(string0, encoding0);
      Map<String, Encoding> map1 = mediaType4.getEncoding();
      MediaType mediaType5 = mediaType3.encoding(map1);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType5, exampleObject0);
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Link link0 = new Link();
      Components components1 = components0.addLinks(string0, link0);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components2 = components1.parameters(hashMap0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Link> map2 = apiResponse0.getLinks();
      Components components3 = components2.links(map2);
      String string1 = "`;K#qP w";
      Parameter parameter0 = new Parameter();
      Example example0 = new Example();
      Parameter parameter1 = parameter0.addExamples(string0, example0);
      String string2 = "";
      Parameter parameter2 = parameter1.name(string2);
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      Parameter parameter3 = parameter2.content(content0);
      io.swagger.oas.models.media.Schema<Tag> schema1 = new io.swagger.oas.models.media.Schema<Tag>();
      Boolean boolean0 = schema1.getReadOnly();
      Parameter parameter4 = parameter3.allowReserved(boolean0);
      Components components4 = components3.addParameters(string1, parameter4);
      Components components5 = components3.addResponses(string1, apiResponse0);
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "{@VR#}mKVa!%o|";
      String string1 = "";
      String string2 = ".'P;3/";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string2, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      boolean boolean1 = true;
      Explode explode0 = Explode.FALSE;
      String string3 = "c7}%W7C";
      String string4 = "Z NZ";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string5 = "<3";
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "Gqcuc,|]baG";
      String string1 = "";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      boolean boolean1 = true;
      String string2 = null;
      Explode explode0 = Explode.TRUE;
      String string3 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[6];
      String string0 = "io.swagger.oas.models.media.StringSchema";
      String string1 = "5Lj1+>73G";
      String string2 = "";
      String string3 = "I&>cYC?$.m2a";
      String string4 = null;
      String string5 = "";
      String string6 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string7 = "java.lang";
      String string8 = "";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string2, string3, string4).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string1, string3, string5, string6, string6).when(link0).operationId();
      doReturn(string4, string5, string7, string8, string4).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      int int1 = 2352;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map0 = arraySchema1.getProperties();
      Components components1 = components0.schemas(map0);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components2 = components1.requestBodies(hashMap0);
      int int2 = (-602);
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap1 = null;
      try {
        hashMap1 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>(int2);
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -602
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      int int0 = (-1730);
      int int1 = (-4499);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = null;
      Components components0 = new Components();
      Map<String, Parameter> map0 = components0.getParameters();
      Components components1 = components0.parameters(map0);
      String string0 = "p43ZSN>q&KiY8xh|AV";
      Link link0 = new Link();
      Components components2 = components1.addLinks(string0, link0);
      Map<String, Header> map1 = link0.getHeaders();
      Components components3 = components2.headers(map1);
      String string1 = "e;DN(Rjs_";
      String string2 = "start an object";
      Example example0 = new Example();
      Example example1 = example0.externalValue(string2);
      Example example2 = example1.summary(string2);
      Components components4 = components3.addExamples(string2, example2);
      link0.setDescription(string1);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "K -jN?I%&iF\"Ro*p+1";
      Example example0 = new Example();
      Example example1 = example0.$ref(string0);
      Example example2 = example1.summary(string0);
      Example example3 = example2.description(string0);
      Components components1 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      components0.setSecuritySchemes(map0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string0, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string1 = " M(*3w5Q b:>";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string1, callback0);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      String string2 = "8wfOGua![2r";
      Parameter parameter0 = new Parameter();
      Example example0 = new Example();
      Parameter parameter1 = parameter0.addExamples(string1, example0);
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      Parameter parameter2 = parameter1.content(content1);
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Info> schema1 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Info>();
      Boolean boolean0 = schema1.getExclusiveMaximum();
      String string3 = schema1.toString();
      Parameter parameter3 = parameter2.allowReserved(boolean0);
      Parameter parameter4 = parameter3.explode(boolean0);
      Components components2 = components1.addParameters(string2, parameter4);
      Components components3 = components1.parameters(hashMap0);
      String string4 = ") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with ";
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      io.swagger.oas.models.media.Schema<String> schema2 = new io.swagger.oas.models.media.Schema<String>();
      Components components4 = components3.addSchemas(string4, schema2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      int int0 = 1;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "kf1f[cN.I/t7uE:X@O0";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      String string1 = "Null SerializerProvider passed for ";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string1, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "X:c=t_jLUis";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string1 = "";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string0, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      String string2 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(contact0).email();
      doReturn(string2).when(contact0).name();
      doReturn(string2).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = string2;
      boolean boolean0 = false;
      String string3 = null;
      String string4 = "#/components/schemas/";
      boolean boolean1 = false;
      boolean boolean2 = true;
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      String string5 = "true";
      int int0 = (-956);
      String string6 = "\"\"4aiadl>uYQG\\^8\\{";
      String string7 = "";
      boolean boolean3 = true;
      String string8 = ",a{i:wIRj-mA=";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string0, (String) null).when(schema0).description();
      doReturn(string3, string4, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean2, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema0).externalDocs();
      doReturn(string5, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string1).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string6).when(schema0).minimum();
      doReturn(string7).when(schema0).pattern();
      doReturn(boolean3, false).when(schema0).readOnly();
      doReturn(string2).when(schema0).ref();
      doReturn(string8, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(contact1).email();
      doReturn(string1).when(contact1).name();
      doReturn(string8, (String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional4 = OperationParser.getContact(contact1);
      MediaType mediaType0 = new MediaType();
      String string9 = "";
      MediaType mediaType1 = mediaType0.example(string9);
      String string10 = null;
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      String string11 = "properties";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = ";UCP20adwrfJf=m";
      String string1 = "dz";
      String string2 = ")%/";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string1, (String) null).when(link0).operationId();
      doReturn(string2).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      String string3 = "KFb ";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(contact0).email();
      doReturn(string2, (String) null).when(contact0).name();
      doReturn(string3, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      String string4 = "    explode: ";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(externalDocumentation0).description();
      doReturn(string4, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string5 = "c";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string5, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "o79FClHz\\|$";
      String[] stringArray0 = new String[3];
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      boolean boolean0 = false;
      String string1 = "P: _&!D";
      boolean boolean1 = true;
      boolean boolean2 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = (-3790);
      int int1 = (-3131);
      String string2 = null;
      boolean boolean3 = false;
      String string3 = "6-T[i0&7#";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string0, (String) null).when(schema0).description();
      doReturn(string1, stringArray0[0], (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean2, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string0, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(stringArray0[1]).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(stringArray0[2], (String) null).when(schema0).pattern();
      doReturn(boolean3).when(schema0).readOnly();
      doReturn(stringArray0[2], (String) null).when(schema0).ref();
      doReturn(string3, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = ".3h";
      String[] stringArray0 = new String[8];
      String string1 = "";
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      String string2 = "";
      stringArray0[5] = string2;
      stringArray0[6] = string0;
      String string3 = "";
      stringArray0[7] = string3;
      boolean boolean0 = true;
      String string4 = "y6b1f$Rxw[urKeuo&";
      boolean boolean1 = true;
      boolean boolean2 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string5 = "";
      int int0 = 115;
      String string6 = "";
      int int1 = 294;
      String string7 = "";
      String string8 = "()?bV\\p7";
      String string9 = "#/components/schemas/";
      String string10 = "\\5jX0)|^Vf";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(stringArray0[6], (String) null).when(schema0).description();
      doReturn(string4, string3, (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean2, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string5).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string6).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string7).when(schema0).minimum();
      doReturn(string8, (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(string9, (String) null).when(schema0).ref();
      doReturn(string10, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "java.util.NavigableSet";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string1 = "";
      String string2 = "-f;z@Dw";
      String string3 = "_^KLm_2:R6y,NVfG";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(link0).description();
      doReturn(string2, (String) null).when(link0).operationId();
      doReturn(string3).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      String string4 = "0vnE8k6zXmc(jx7,VfA";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string3, (String) null).when(contact0).name();
      doReturn(string4, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      String string5 = "";
      String[] stringArray0 = null;
      boolean boolean0 = true;
      String string6 = "kSeS.g+O?aAY";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      String string7 = "qrqIiFn7`r b";
      int int0 = 2;
      String string8 = null;
      String string9 = "9z.2{60S^ZD!n?j .~";
      String string10 = "%";
      String string11 = "FX|]c/.Q47^g6";
      String string12 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string5).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string4, string6, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema0).externalDocs();
      doReturn(string7, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string8).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string9).when(schema0).minimum();
      doReturn(string10, (String) null).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(string11, (String) null).when(schema0).ref();
      doReturn(string12).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      String string13 = "u[/AkpoJauGSX$";
      String string14 = "";
      String string15 = "Can not pass null Serializers";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string13, (String) null).when(contact1).email();
      doReturn(string14).when(contact1).name();
      doReturn(string15, (String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional4 = OperationParser.getContact(contact1);
      MediaType mediaType0 = new MediaType();
      String string16 = "";
      MediaType mediaType1 = mediaType0.example(string16);
      String string17 = null;
      Example example0 = new Example();
      MediaType mediaType2 = mediaType1.addExamples(string17, example0);
      Map<String, Encoding> map0 = mediaType2.getEncoding();
      MediaType mediaType3 = mediaType2.encoding(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      MediaType mediaType4 = mediaType3.schema(arraySchema0);
      String string18 = "O]Mh";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string18, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional5 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      Server[] serverArray0 = new Server[2];
      String string0 = "%-4&";
      String string1 = "EZB";
      String string2 = "[>Z7R(HkK7";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server0).description();
      doReturn(string2, string1).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      int int0 = 22;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string0 = "NON_ABSENT";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string1 = ", isGetter: ";
      Parameter parameter0 = new Parameter();
      Components components1 = components0.addParameters(string1, parameter0);
      Map<String, Header> map0 = components0.getHeaders();
      Components components2 = components1.headers(map0);
      Map<String, Example> map1 = components2.getExamples();
      Components components3 = components2.examples(map1);
      String string2 = null;
      Callback callback0 = new Callback();
      String string3 = "com.fasterxml.jackson.databind.AnnotationIntrospector";
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string3, pathItem0);
      Components components4 = components3.addCallbacks(string2, callback1);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "java.lang";
      String string1 = "R[eC[Psts";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string1, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      String[] stringArray0 = new String[7];
      String string2 = "    termsOfService: ";
      stringArray0[0] = string2;
      String string3 = ";pybK$Ag9(I`";
      stringArray0[1] = string3;
      String string4 = "";
      stringArray0[2] = string4;
      String string5 = "*t";
      stringArray0[3] = string5;
      String string6 = "";
      stringArray0[4] = string6;
      String string7 = "io.swagger.oas.models.media.DateSchema";
      stringArray0[5] = string7;
      String string8 = "";
      stringArray0[6] = string8;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      String string9 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string9).when(externalDocumentation0).description();
      doReturn(stringArray0[6]).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string10 = "*";
      boolean boolean0 = true;
      String string11 = "io.swagger.jaxrs2.OperationParser";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      int int0 = 4;
      String string12 = "";
      String string13 = "KteL|!7(jI;*\"o{}}";
      String string14 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string10, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string11, (String) null).when(schema0).description();
      doReturn(stringArray0[2], string2, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema0).externalDocs();
      doReturn(stringArray0[4]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string12).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string13).when(schema0).minimum();
      doReturn(string14).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(string11, (String) null).when(schema0).ref();
      doReturn(string13, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      MediaType mediaType1 = mediaType0.schema(arraySchema0);
      MediaType mediaType2 = mediaType1.example(stringArray0[4]);
      Example example0 = new Example();
      Example example1 = example0.$ref(string5);
      MediaType mediaType3 = mediaType2.addExamples(string4, example1);
      Map<String, Encoding> map0 = null;
      MediaType mediaType4 = mediaType3.encoding(map0);
      String string15 = "x8|?]hJ)tDIpR/*c";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string15, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional4 = OperationParser.getMediaType(mediaType4, exampleObject0);
      Optional<Set<Tag>> optional5 = OperationParser.getTags(stringArray0);
      String string16 = null;
      ExternalDocumentation externalDocumentation2 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string9).when(externalDocumentation2).description();
      doReturn(string16).when(externalDocumentation2).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional6 = OperationParser.getExternalDocumentation(externalDocumentation2);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = null;
      String string1 = " L#,yYv^6L`J";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(link0).description();
      doReturn(string0).when(link0).operationId();
      doReturn(string1, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      String string2 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(contact0).email();
      doReturn(string0).when(contact0).name();
      doReturn(string2).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[4];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      String string3 = "";
      Explode explode0 = Explode.TRUE;
      String string4 = null;
      boolean boolean1 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string5 = "'Yi:7IY/p~OK!+=7>A/";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(boolean0, false).when(parameter0).deprecated();
      doReturn(string3).when(parameter0).description();
      doReturn(string1, (String) null).when(parameter0).in();
      doReturn(string4).when(parameter0).name();
      doReturn(boolean1, false).when(parameter0).required();
      doReturn(string5, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.'YI:7IY/P~OK!+=7>A/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      Content content0 = null;
      String string0 = "g9/<>Eb&a0$T";
      String string1 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string0, string0, string0, string1).when(apiResponse0).description();
      doReturn((Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string2 = "";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string2, pathItem0);
      String string3 = "";
      Callback callback2 = callback1.addPathItem(string3, pathItem0);
      Components components1 = components0.addCallbacks(string2, callback2);
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(string0, apiResponse1);
      ApiResponses apiResponses2 = apiResponses1._default(apiResponse1);
      ApiResponses apiResponses3 = apiResponses2._default(apiResponse1);
      Components components2 = components1.responses(apiResponses3);
      String string4 = "";
      Header header0 = new Header();
      Boolean boolean0 = Boolean.FALSE;
      Header header1 = header0.required(boolean0);
      Components components3 = components2.addHeaders(string4, header1);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      HashMap<String, Parameter> hashMap1 = new HashMap<String, Parameter>(hashMap0);
      Components components4 = components3.parameters(hashMap1);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "(U4W(H";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Info> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Info>();
      String string1 = "[TokenBuffer: ";
      long long0 = (-307L);
      BigDecimal bigDecimal0 = new BigDecimal(long0);
      io.swagger.oas.models.media.Schema schema1 = schema0.maximum(bigDecimal0);
      io.swagger.oas.models.media.Schema schema2 = schema0.type(string1);
      mediaType0.setSchema(schema0);
      String string2 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      String string3 = "#temporary-name";
      String[] stringArray0 = null;
      boolean boolean0 = false;
      String string4 = "Can not construct instance of %s: %s";
      boolean boolean1 = true;
      boolean boolean2 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 2;
      String string5 = "";
      int int1 = (-94);
      String string6 = "6r~7h@=[Px)";
      boolean boolean3 = true;
      String string7 = "dx/B@Qyh;L_:=";
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(schema3)._default();
      doReturn(stringArray0).when(schema3)._enum();
      doReturn(boolean0).when(schema3).deprecated();
      doReturn(string4, (String) null).when(schema3).description();
      doReturn(string2, string3, (String) null).when(schema3).example();
      doReturn(boolean1, false).when(schema3).exclusiveMaximum();
      doReturn(boolean2).when(schema3).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema3).externalDocs();
      doReturn(string1, (String) null).when(schema3).format();
      doReturn(int0).when(schema3).maxLength();
      doReturn(0).when(schema3).maxProperties();
      doReturn(string5).when(schema3).maximum();
      doReturn(int1).when(schema3).minProperties();
      doReturn(string6).when(schema3).minimum();
      doReturn(string4, (String) null).when(schema3).pattern();
      doReturn(boolean3, false).when(schema3).readOnly();
      doReturn(string2).when(schema3).ref();
      doReturn(string7, (String) null).when(schema3).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema3);
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string8 = "h";
      String string9 = "Cv$4?=i=$Shh";
      String string10 = "2{gR>uD";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string8, string9).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string11 = "+v";
      Header header0 = new Header();
      Components components1 = components0.addHeaders(string11, header0);
      io.swagger.oas.models.media.Schema<Parameter> schema4 = new io.swagger.oas.models.media.Schema<Parameter>();
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema4.getProperties();
      Components components2 = components1.schemas(map1);
      Link link0 = new Link();
      Map<String, Header> map2 = link0.getHeaders();
      Components components3 = components2.headers(map2);
      Map<String, Example> map3 = null;
      Components components4 = components3.examples(map3);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = null;
      Content[] contentArray0 = null;
      boolean boolean2 = true;
      String string0 = "iYO\\Gz4K V";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.TRUE;
      String string1 = "";
      String string2 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string3 = ";y#ETWN";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(boolean2, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string1).when(parameter0).in();
      doReturn(string2).when(parameter0).name();
      doReturn(boolean0, false).when(parameter0).required();
      doReturn(string3, (String) null).when(parameter0).style();
      Components components0 = new Components();
      Map<String, Link> map0 = components0.getLinks();
      Components components1 = components0.links(map0);
      String string4 = "n!7HPbO7ZrAgsf)`3";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      ApiResponse[] apiResponseArray0 = new ApiResponse[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Map<String, Callback> map1 = components1.getCallbacks();
      Components components2 = components1.callbacks(map1);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
      Components components3 = components1.addSchemas(string4, arraySchema1);
      String string5 = "*/*";
      Parameter parameter1 = new Parameter();
      boolean boolean3 = true;
      Boolean boolean4 = new Boolean(boolean3);
      Parameter parameter2 = parameter1.deprecated(boolean4);
      Components components4 = components3.addParameters(string5, parameter2);
      Link link0 = new Link();
      String string6 = "";
      Link link1 = link0.$ref(string6);
      Link link2 = link1.operationId(string6);
      Components components5 = components4.addLinks(string5, link2);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components5);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.;Y#ETWN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = "K+#:M[X>Bf._";
      String string1 = " jS\\'TT'c.:. j";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string1, (String) null).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      String string0 = "io.swagger.util.EncodingStyleEnumDeserializer";
      String string1 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(operationParser0.MEDIA_TYPE, (String) null).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(operationParser0.COMPONENTS_REF, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(operationParser0.COMPONENTS_REF, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      Components components1 = components0.responses(apiResponses1);
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponses1.replace(operationParser0.COMMA, apiResponse0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components2 = components1.examples(hashMap0);
      String string2 = null;
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      String string3 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string3);
      Components components3 = components2.addSchemas(string2, arraySchema1);
      String string4 = "-st0`(";
      Components components4 = components3.addResponses(string4, apiResponse0);
      io.swagger.oas.models.media.Schema schema0 = arraySchema1.additionalProperties(arraySchema0);
      components4.setExamples(hashMap0);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(license0).name();
      doReturn(string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional4 = OperationParser.getContact(contact0);
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      boolean boolean0 = false;
      String string1 = "/$A?0yO_>ZG`qX+5";
      String string2 = "";
      String string3 = "WRITE_NUMBERS_AS_STRINGS";
      ExternalDocumentation externalDocumentation0 = null;
      String string4 = "#/components/schemas/";
      int int0 = Integer.MAX_VALUE;
      String string5 = "#c5{{m?>+";
      String string6 = "f8G9bP";
      boolean boolean1 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(string2, string3, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string4, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string5).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(stringArray0[4]).when(schema0).minimum();
      doReturn(string6, (String) null).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string5, (String) null).when(schema0).ref();
      doReturn(stringArray0[4]).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components1 = components0.headers(hashMap0);
      String string7 = "Unexpected end-of-String when base64 content";
      Example example0 = new Example();
      Components components2 = components1.addExamples(string7, example0);
      Operation operation0 = new Operation();
      io.swagger.oas.models.ExternalDocumentation externalDocumentation1 = new io.swagger.oas.models.ExternalDocumentation();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.content(content0);
      String string8 = "";
      Link link0 = new Link();
      String string9 = null;
      Link link1 = link0.operationId(string9);
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.link(string8, link1);
      Map<String, Object> map0 = apiResponse2.getExtensions();
      operation0.setExtensions(map0);
      Operation operation1 = operation0.externalDocs(externalDocumentation1);
      Map<String, Callback> map1 = operation1.getCallbacks();
      Components components3 = components2.callbacks(map1);
      Optional<List<Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components3);
      int int1 = 1444;
      int int2 = 2352;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int1, 0).when(arraySchema0).maxItems();
      doReturn(int2, int0).when(arraySchema0).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      String string10 = "jX.";
      boolean boolean2 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string10, (String) null).when(requestBody0).description();
      doReturn(boolean2, false).when(requestBody0).required();
      String string11 = "";
      Components components4 = components2.addExamples(string11, example0);
      Optional<RequestBody> optional3 = OperationParser.getRequestBody(requestBody0, components4);
      int int3 = 294;
      int int4 = 9;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema2).implementation();
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int3, 0).when(arraySchema1).maxItems();
      doReturn(int0).when(arraySchema1).minItems();
      doReturn(schema2, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean2, false).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional4 = OperationParser.getArraySchema(arraySchema1);
      MediaType mediaType0 = new MediaType();
      String string12 = "Ns_G b!FO";
      Example example1 = example0.summary(string12);
      OperationParser operationParser0 = new OperationParser();
      Example example2 = example1.value(operationParser0);
      MediaType mediaType1 = mediaType0.addExamples(string7, example1);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[2]).when(exampleObject0).name();
      Optional<MediaType> optional5 = OperationParser.getMediaType(mediaType1, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      boolean boolean0 = false;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = null;
      boolean boolean2 = false;
      String string0 = "";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.TRUE;
      Explode explode2 = Explode.FALSE;
      String string1 = "d>3$C@EV";
      String string2 = ",xoGMqQF;nj";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(boolean2).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(string1, (String) null).when(parameter0).in();
      doReturn(string2, (String) null).when(parameter0).name();
      doReturn(boolean2).when(parameter0).required();
      doReturn(string1, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.D>3$C@EV
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      Server[] serverArray0 = new Server[2];
      String string0 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string0, string0).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      String string1 = "";
      stringArray0[4] = string1;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      boolean boolean0 = true;
      String string2 = ",pd/6(uy!a^%_";
      boolean boolean1 = true;
      String string3 = "`.khHQvow";
      String string4 = "j\\{$@!cMfea!tiM";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(externalDocumentation0).description();
      doReturn(string4, (String) null).when(externalDocumentation0).url();
      String string5 = "";
      int int0 = 22;
      String string6 = null;
      String string7 = "F.Ez m~Kw/j5+";
      String string8 = "<!6;,Ux*#HRSC2-";
      boolean boolean2 = true;
      int int1 = (-2408);
      boolean boolean3 = false;
      String string9 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean0).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string2, string2, stringArray0[6]).when(schema0).example();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1, boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string5).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, 0).when(schema0).maxProperties();
      doReturn(stringArray0[1]).when(schema0).maximum();
      doReturn(int0, int1).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(string6).when(schema0).pattern();
      doReturn(boolean0, boolean3).when(schema0).readOnly();
      doReturn(stringArray0[3]).when(schema0).ref();
      doReturn(string7, string9).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[9];
      boolean boolean4 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Components components1 = components0.links(map0);
      String string0 = "NdS(2;UmOM7S";
      Example example0 = null;
      Components components2 = components1.addExamples(string0, example0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = components1.getSchemas();
      Components components3 = components2.schemas(map1);
      String string1 = "*/*";
      Header header0 = new Header();
      String string2 = "    additionalProperties: ";
      Header header1 = header0.$ref(string2);
      String string3 = null;
      Boolean boolean0 = new Boolean(string3);
      Header header2 = header1.deprecated(boolean0);
      Header.StyleEnum header_StyleEnum0 = Header.StyleEnum.SIMPLE;
      header2.setStyle(header_StyleEnum0);
      Components components4 = components3.addHeaders(string1, header2);
      SecurityScheme securityScheme0 = new SecurityScheme();
      String string4 = "not a valid representation";
      SecurityScheme securityScheme1 = securityScheme0.bearerFormat(string4);
      SecurityScheme securityScheme2 = securityScheme1.openIdConnectUrl(string3);
      String string5 = "";
      SecurityScheme securityScheme3 = securityScheme2.description(string5);
      OAuthFlows oAuthFlows0 = new OAuthFlows();
      SecurityScheme securityScheme4 = securityScheme3.flows(oAuthFlows0);
      Components components5 = components4.addSecuritySchemes(string3, securityScheme4);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components4);
      String string6 = "weuj";
      boolean boolean1 = false;
      Content[] contentArray0 = new Content[1];
      contentArray0[0] = content0;
      String string7 = "uuid";
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string6, string7).when(requestBody0).description();
      doReturn(boolean1).when(requestBody0).required();
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      Class<io.swagger.oas.models.info.Info> class0 = io.swagger.oas.models.info.Info.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "java.util.NavigableSet";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string0, string0).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string1 = "";
      String string2 = "-f;z@Dw";
      String string3 = "_^KLm_2:R6y,NVfG";
      String string4 = "io.swagge";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(link0).description();
      doReturn(string2, string4).when(link0).operationId();
      doReturn(string3).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      String string5 = "0vnE8k6zXmc(jx7,VfA";
      String string6 = ", allowReserved=";
      String string7 = "AH";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string6).when(contact0).email();
      doReturn(string3, string7).when(contact0).name();
      doReturn(string5, string0).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      String string8 = "";
      String[] stringArray0 = null;
      boolean boolean0 = true;
      String string9 = "kSeS.g+O?aAY";
      String string10 = "_Y";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string10, (String) null).when(externalDocumentation1).description();
      doReturn(string7, (String) null).when(externalDocumentation1).url();
      String string11 = "qrqIiFn7`r b";
      int int0 = 2;
      String string12 = null;
      String string13 = "9z.2{60S^ZD!n?j .~";
      String string14 = "%";
      String string15 = "FX|]c/.Q47^g6";
      String string16 = "";
      boolean boolean1 = true;
      String string17 = "java.langio.swagger.oas.models.info.Info";
      boolean boolean2 = false;
      String string18 = "TYIUcu0SFvG)Gce7\\u";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string8).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string5, string9, string3, string17).when(schema0).example();
      doReturn(boolean0, boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema0).externalDocs();
      doReturn(string11, string14).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, 0).when(schema0).maxProperties();
      doReturn(string12).when(schema0).maximum();
      doReturn(int0, int0).when(schema0).minProperties();
      doReturn(string13).when(schema0).minimum();
      doReturn(string14, string18).when(schema0).pattern();
      doReturn(boolean0, boolean1).when(schema0).readOnly();
      doReturn(string15, string1).when(schema0).ref();
      doReturn(string16).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      String string19 = "u[/AkpoJauGSX$";
      String string20 = "";
      String string21 = "Can not pass null Serializers";
      String string22 = null;
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string19, string22).when(contact1).email();
      doReturn(string20).when(contact1).name();
      doReturn(string21, string8).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional4 = OperationParser.getContact(contact1);
      MediaType mediaType0 = new MediaType();
      String string23 = "";
      MediaType mediaType1 = mediaType0.example(string23);
      String string24 = null;
      Example example0 = new Example();
      MediaType mediaType2 = mediaType1.addExamples(string24, example0);
      Map<String, Encoding> map0 = mediaType2.getEncoding();
      MediaType mediaType3 = mediaType2.encoding(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      MediaType mediaType4 = mediaType3.schema(arraySchema0);
      String string25 = "O]Mh";
      String string26 = "1>1a<jywE/Nn69r";
      String string27 = "com.fasterxml.jackson.databind.MappingJsonFactory";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string8).when(exampleObject0).externalValue();
      doReturn(string25, string7, string26, string16).when(exampleObject0).name();
      doReturn(string27, (String) null).when(exampleObject0).summary();
      doReturn(string12).when(exampleObject0).value();
      Optional<MediaType> optional5 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Parameter parameter0 = new Parameter();
      Parameter.StyleEnum parameter_StyleEnum0 = Parameter.StyleEnum.SPACEDELIMITED;
      boolean boolean0 = mediaType0.equals(parameter_StyleEnum0);
      Parameter parameter1 = parameter0.style(parameter_StyleEnum0);
      boolean boolean1 = false;
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      parameter1.setContent(content0);
      Boolean boolean2 = Boolean.valueOf(boolean1);
      boolean boolean3 = true;
      boolean boolean4 = Boolean.logicalOr(boolean1, boolean3);
      Parameter parameter2 = parameter1.deprecated(boolean2);
      String string0 = "4*&#]VWND7o:.+)sY,:";
      Parameter parameter3 = parameter2.in(string0);
      Map<String, Example> map0 = parameter3.getExamples();
      MediaType mediaType1 = mediaType0.examples(map0);
      String string1 = "Uj%8T- K$aw&\"";
      String string2 = "";
      String string3 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string4 = "<+PT";
      String string5 = ",";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(exampleObject0).externalValue();
      doReturn(string1, string3, string1, string0).when(exampleObject0).name();
      doReturn(string4, (String) null).when(exampleObject0).summary();
      doReturn(string5, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      String string6 = "";
      String string7 = "fOH{Yn;^.~KtR>VV*65";
      String string8 = "%u8~|v%+rwex-";
      String string9 = null;
      String string10 = "#";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string6).when(contact0).email();
      doReturn(string7, string9).when(contact0).name();
      doReturn(string8, string10).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      String string11 = "";
      String string12 = "d0*@.RLlB}`\\";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      String string13 = "2J]p-dqt9w)h72+\\~'5";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string14 = "Must call method with a container or reference type (got ";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact1).when(info0).contact();
      doReturn(string7, string13).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string11).when(info0).termsOfService();
      doReturn(string0, string13).when(info0).title();
      doReturn(string12, string14).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      String string15 = "";
      String string16 = "`<OtW*UGme1]$";
      String string17 = "";
      String string18 = "Can not deserialize instance of %s out of %s";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string15).when(link0).description();
      doReturn(string16, string18).when(link0).operationId();
      doReturn(string17).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<Link> optional3 = OperationParser.getLink(link0);
      int int0 = 4707;
      int int1 = 181;
      Class<io.swagger.oas.models.media.ArraySchema> class0 = io.swagger.oas.models.media.ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean5 = false;
      int int2 = 1000;
      Schema schema1 = null;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int2).when(arraySchema0).maxItems();
      doReturn(int1, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean5).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      String string0 = "java.util.NavigableSet";
      String string1 = "no description";
      String string2 = "java.lang";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(externalDocumentation0).description();
      doReturn(string0, string2).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string3 = "";
      String string4 = "-f;z@Dw";
      String string5 = "_^KLm_2:R6y,NVfG";
      String string6 = "java.langio.swagger.oas.models.media.MediaType";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(link0).description();
      doReturn(string4, string6).when(link0).operationId();
      doReturn(string5).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      String string7 = "0vnE8k6zXmc(jx7,VfA";
      String string8 = ";Czo]*avd2 A2";
      String string9 = "~}{.9\"mi@4D;6,=\"";
      String string10 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string8).when(contact0).email();
      doReturn(string5, string9).when(contact0).name();
      doReturn(string7, string10).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      String string11 = "";
      String[] stringArray0 = null;
      boolean boolean0 = true;
      String string12 = "kSeS.g+O?aAY";
      String string13 = "io.swagger.jaxrs2.OperationParser";
      String string14 = "";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string13, (String) null).when(externalDocumentation1).description();
      doReturn(string14).when(externalDocumentation1).url();
      String string15 = "qrqIiFn7`r b";
      int int0 = 2;
      String string16 = null;
      String string17 = "9z.2{60S^ZD!n?j .~";
      String string18 = "%";
      String string19 = "FX|]c/.Q47^g6";
      String string20 = "";
      boolean boolean1 = true;
      String string21 = "dV0TBa(Kaft";
      boolean boolean2 = true;
      boolean boolean3 = true;
      String string22 = "Unable to load JDK7 types (annotations, java.nio.file.Path): no Java7 support added";
      boolean boolean4 = false;
      String string23 = "io.swagger.jaxrs2.OperationParser";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string11).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string3).when(schema0).description();
      doReturn(string7, string12, string21, string5).when(schema0).example();
      doReturn(boolean0, boolean2).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean3).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema0).externalDocs();
      doReturn(string15, string22).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, 0).when(schema0).maxProperties();
      doReturn(string16).when(schema0).maximum();
      doReturn(int0, int0).when(schema0).minProperties();
      doReturn(string17).when(schema0).minimum();
      doReturn(string18, string11).when(schema0).pattern();
      doReturn(boolean0, boolean4).when(schema0).readOnly();
      doReturn(string19, string23).when(schema0).ref();
      doReturn(string20).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
      String string24 = "u[/AkpoJauGSX$";
      String string25 = "";
      String string26 = "Can not pass null Serializers";
      String string27 = "niH&40!YM";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string24, string27).when(contact1).email();
      doReturn(string25).when(contact1).name();
      doReturn(string26, string26).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional4 = OperationParser.getContact(contact1);
      MediaType mediaType0 = new MediaType();
      String string28 = "";
      MediaType mediaType1 = mediaType0.example(string28);
      String string29 = null;
      Example example0 = new Example();
      MediaType mediaType2 = mediaType1.addExamples(string29, example0);
      Map<String, Encoding> map0 = mediaType2.getEncoding();
      MediaType mediaType3 = mediaType2.encoding(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      MediaType mediaType4 = mediaType3.schema(arraySchema0);
      String string30 = "O]Mh";
      String string31 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(exampleObject0).externalValue();
      doReturn(string30, string2, string31, string11).when(exampleObject0).name();
      doReturn(string23, (String) null).when(exampleObject0).summary();
      doReturn(string20).when(exampleObject0).value();
      Optional<MediaType> optional5 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(arraySchema0).maxItems();
      doReturn(0, 0, 0, 0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null, (Schema) null).when(arraySchema0).schema();
      doReturn(false, false, false, false, false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = null;
      String string0 = "5@*?";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.TRUE;
      String string1 = "UNWRAP_ROOT_VALUE";
      boolean boolean1 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null, (Class) null, (Class) null, (Class) null, (Class) null).when(schema0).implementation();
      String string2 = null;
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false, false, false, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false, false, false, false).when(parameter0).allowReserved();
      doReturn(arraySchema0, (ArraySchema) null, (ArraySchema) null, (ArraySchema) null, (ArraySchema) null).when(parameter0).array();
      doReturn((Object) contentArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(parameter0).content();
      doReturn(boolean0, false, false, false, false).when(parameter0).deprecated();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).description();
      doReturn(explode0, explode0, explode1, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(parameter0).in();
      doReturn(string1, (String) null, (String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(boolean1, false, false, false, false).when(parameter0).required();
      doReturn(schema0, schema0, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn(string2, (String) null, (String) null, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components0 = new Components();
      Map<String, RequestBody> map0 = null;
      Components components1 = components0.requestBodies(map0);
      String string3 = null;
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string3, header0);
      Encoding encoding0 = new Encoding();
      Map<String, Header> map1 = encoding0.getHeaders();
      Components components3 = components2.headers(map1);
      Map<String, Parameter> map2 = components2.getParameters();
      Components components4 = components3.parameters(map2);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = null;
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components0);
      Content[] contentArray0 = null;
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components0);
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      OperationParser operationParser0 = new OperationParser();
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      Content content0 = null;
      String string0 = " entries";
      String string1 = "java.langio.swagger.oas.models.info.Info";
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[3];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      String string2 = "java.lang";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0).when(apiResponse0).content();
      doReturn(operationParser0.COMPONENTS_REF, operationParser0.COMMA, operationParser0.MEDIA_TYPE, string0, string1).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string2, operationParser0.DEFAULT_DESCRIPTION, operationParser0.COMPONENTS_REF, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = operationParser0.COMPONENTS_REF;
      stringArray0[1] = operationParser0.COMMA;
      stringArray0[2] = operationParser0.COMMA;
      stringArray0[3] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[4] = operationParser0.COMMA;
      stringArray0[5] = operationParser0.COMPONENTS_REF;
      String string3 = "";
      OperationParser.COMMA = string3;
      stringArray0[6] = operationParser0.MEDIA_TYPE;
      stringArray0[7] = stringArray0[6];
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      Optional<Link> optional3 = OperationParser.getLink(linkArray0[1]);
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[9];
      String string0 = null;
      String string1 = "S7/F\"X|gZ[Q[#zZF";
      String string2 = "=:%PMIw\").3RU\"l?3d_";
      String string3 = ",";
      String string4 = null;
      String string5 = "$VALUES";
      String string6 = "M`-?R,Hqzzdv";
      String string7 = "; expected Class<JsonDeserializer>";
      String string8 = "#/components/schemas/";
      String string9 = "o;{^;";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters0).expression();
      doReturn(string3, string7, string8, string1, string9).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string1, string0, string0).when(link0).description();
      doReturn(string5, string0, string1, string6, string2).when(link0).name();
      doReturn(string1, string0, string1, string1, string1).when(link0).operationId();
      doReturn(string2, string3, string4, string2, string2).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      String string10 = "P $`}jd\\2-4]oq?[u";
      String string11 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string10, string5).when(license0).name();
      doReturn(string11).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string12 = "";
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[0];
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string12).when(requestBody0).description();
      doReturn(boolean0, boolean0).when(requestBody0).required();
      Components components0 = new Components();
      Map<String, SecurityScheme> map1 = null;
      Components components1 = components0.securitySchemes(map1);
      Components components2 = components0.links(map0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map2 = arraySchema0.getProperties();
      Components components3 = components2.schemas(map2);
      Map<String, Example> map3 = components3.getExamples();
      Components components4 = components1.examples(map3);
      String string13 = null;
      Example example0 = null;
      Components components5 = components4.addExamples(string13, example0);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components6 = components5.callbacks(hashMap0);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components6);
      Server[] serverArray0 = new Server[7];
      String string14 = "";
      String string15 = "jeARw";
      String string16 = null;
      String string17 = "A@^C0)XQS|";
      ServerVariable[] serverVariableArray0 = new ServerVariable[6];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      OperationParser operationParser0 = new OperationParser();
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      Content content0 = null;
      String string0 = " entries";
      String string1 = "java.langio.swagger.oas.models.info.Info";
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[3];
      String string2 = "Can not deserialize Map key of type %s from String %s: %s";
      String string3 = "java.langio.swagger.oas.models.info.Info";
      String string4 = null;
      String string5 = null;
      String string6 = "DW%tw(!'9v8";
      String string7 = "a(z>3i@kHPEv^VcOO??";
      String string8 = "s~P";
      String string9 = "wj,YeIF";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3, string4, string5, string6).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(operationParser0.COMMA, operationParser0.COMPONENTS_REF, string1, operationParser0.COMMA, string1).when(link0).operationId();
      doReturn(string7, string4, string8, string9, string7).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      String string10 = "java.lang";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0).when(apiResponse0).content();
      doReturn(operationParser0.COMPONENTS_REF, operationParser0.COMMA, operationParser0.MEDIA_TYPE, string0, string1).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string10, operationParser0.DEFAULT_DESCRIPTION, operationParser0.COMPONENTS_REF, string7, operationParser0.COMMA).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = operationParser0.COMPONENTS_REF;
      stringArray0[1] = operationParser0.COMMA;
      stringArray0[2] = operationParser0.COMMA;
      stringArray0[3] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[4] = operationParser0.COMMA;
      stringArray0[5] = string9;
      String string11 = "";
      OperationParser.COMMA = string11;
      stringArray0[6] = operationParser0.MEDIA_TYPE;
      stringArray0[7] = stringArray0[6];
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      Optional<Link> optional3 = OperationParser.getLink(linkArray0[1]);
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      boolean boolean0 = false;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[3];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      String string0 = "3YU\\)(9bUcJMy";
      String string1 = "FBN'&";
      String string2 = "Unexpected end-of-string";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string1, string1, string2, string2).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      String string3 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.TRUE;
      Class<Integer> class0 = Integer.class;
      Class<Parameter> class1 = Parameter.class;
      Class<io.swagger.oas.models.ExternalDocumentation> class2 = io.swagger.oas.models.ExternalDocumentation.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      boolean boolean2 = false;
      boolean boolean3 = false;
      boolean boolean4 = true;
      boolean boolean5 = true;
      String string4 = "io.swagger.oas.models.media.UUIDSchema";
      Explode explode3 = Explode.DEFAULT;
      Explode explode4 = Explode.TRUE;
      String string5 = "tLu|<gKj-23PQ";
      String string6 = "java.lang";
      String string7 = "<\\TlMkNAE~F7^|H";
      String string8 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string9 = "java.langio.swagger.oas.models.parameters.RequestBody";
      boolean boolean6 = false;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string10 = "r[@<:p, E@N7s";
      String string11 = "";
      String string12 = "b7";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean2).when(parameter0).allowEmptyValue();
      doReturn(boolean1, boolean2).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1, boolean2).when(parameter0).deprecated();
      doReturn(string3, string4, string0).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string3, string4, string5).when(parameter0).in();
      doReturn(string3, string8, string4).when(parameter0).name();
      doReturn(boolean1, boolean4, boolean6).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string3, string10, string11).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components0 = new Components();
      Map<String, RequestBody> map0 = null;
      Components components1 = components0.requestBodies(map0);
      String string13 = null;
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string13, header0);
      Encoding encoding0 = new Encoding();
      Map<String, Header> map1 = encoding0.getHeaders();
      Components components3 = components2.headers(map1);
      Map<String, Object> map2 = components3.getExtensions();
      encoding0.setExtensions(map2);
      Map<String, Parameter> map3 = components2.getParameters();
      Components components4 = components3.parameters(map3);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      String string0 = "KEHN@CF";
      String string1 = "java.langio.swagger.oas.models.parameters.RequestBody";
      String string2 = "<:#_)qjxWk3q3<";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(license0).name();
      doReturn(string1, string2).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      MediaType mediaType0 = new MediaType();
      String string3 = "j?aHoWT";
      MediaType mediaType1 = mediaType0.example(string3);
      String string4 = ",YbI}Tc";
      String string5 = "@JsonUnwrapped";
      String string6 = "[rM/Jw8xFS+IB/";
      String string7 = "Y0r>kwP%81TSQ";
      String string8 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string7).when(exampleObject0).externalValue();
      doReturn(string4, string1, string5, string1).when(exampleObject0).name();
      doReturn(string5, string4).when(exampleObject0).summary();
      doReturn(string6, string8, string0).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType1, exampleObject0);
      OperationParser operationParser0 = new OperationParser();
      Class<Example> class0 = Example.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(operationParser0.MEDIA_TYPE, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[2];
      stringArray0[0] = string5;
      stringArray0[1] = string8;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, Link> map0 = components0.getLinks();
      Components components1 = components0.links(map0);
      Components components2 = components0.links(map0);
      Callback callback0 = new Callback();
      Components components3 = components1.addCallbacks(operationParser0.DEFAULT_DESCRIPTION, callback0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components4 = components3.examples(hashMap0);
      Example example0 = new Example();
      String string9 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string9).when(server0).description();
      doReturn(string9).when(server0).url();
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(server0);
      Example example1 = example0.$ref(string3);
      Example example2 = example1.value(produces0);
      Components components5 = components4.addExamples(string3, example2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      boolean boolean0 = false;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[3];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      String string0 = "@H]4/";
      String string1 = "java.langio.swagger.oas.models.parameters.RequestBody";
      String string2 = "io.swagger.jaxrs2.OperationParser";
      String string3 = "2_fK8I`-<ncG<{T.";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string0, string1, string2, string3).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      String string4 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.DEFAULT;
      Class<Integer> class0 = Integer.class;
      Class<io.swagger.oas.models.media.ArraySchema> class1 = io.swagger.oas.models.media.ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      boolean boolean2 = false;
      boolean boolean3 = false;
      boolean boolean4 = false;
      boolean boolean5 = false;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      boolean boolean6 = true;
      String string5 = "no description";
      Explode explode3 = Explode.FALSE;
      String string6 = "value not 'true' or 'false'";
      String string7 = "^c|n0Hga@c";
      String string8 = "java.langio.swagger.oas.models.info.Contact";
      String string9 = "file";
      boolean boolean7 = false;
      boolean boolean8 = false;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string10 = "X[~,P@*g\\a*{AbKb";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean2).when(parameter0).allowEmptyValue();
      doReturn(boolean1, boolean4).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1, boolean2).when(parameter0).deprecated();
      doReturn(string4, string5, string5).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string4, string6, string5).when(parameter0).in();
      doReturn(string4, string0, string8).when(parameter0).name();
      doReturn(boolean1, boolean7).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string4, string6, string10).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components0 = new Components();
      Map<String, RequestBody> map0 = null;
      Components components1 = components0.requestBodies(map0);
      String string11 = null;
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string11, header0);
      Encoding encoding0 = new Encoding();
      Map<String, Header> map1 = encoding0.getHeaders();
      Components components3 = components2.headers(map1);
      Map<String, Object> map2 = components3.getExtensions();
      encoding0.setExtensions(map2);
      Map<String, Parameter> map3 = components2.getParameters();
      Components components4 = components3.parameters(map3);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.X[~,P@*G\\A*{ABKB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      String string0 = "KEHN@CF";
      String string1 = "java.langio.swagger.oas.models.parameters.RequestBody";
      String string2 = "<:#_)qjxWk3q3<";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(license0).name();
      doReturn(string1, string2).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      MediaType mediaType0 = new MediaType();
      String string3 = "j?aHoWT";
      MediaType mediaType1 = mediaType0.example(string3);
      String string4 = ",YbI}Tc";
      String string5 = "@JsonUnwrbpd";
      String string6 = "[rM/Jw8xFS+IB/";
      String string7 = "Y0r>kwP%81S";
      String string8 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string7, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string4, string1, string5, string1, (String) null).when(exampleObject0).name();
      doReturn(string5, string4, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn(string6, string8, string0, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType1, exampleObject0);
      OperationParser operationParser0 = new OperationParser();
      Class<Example> class0 = Example.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      ExampleObject[] exampleObjectArray0 = new ExampleObject[4];
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObject0;
      exampleObjectArray0[2] = exampleObject0;
      exampleObjectArray0[3] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(operationParser0.MEDIA_TYPE, string5, (String) null, (String) null, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[15];
      stringArray0[0] = string5;
      stringArray0[1] = string8;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, Link> map0 = components0.getLinks();
      Components components1 = components0.links(map0);
      Components components2 = components0.links(map0);
      Callback callback0 = new Callback();
      Components components3 = components1.addCallbacks(operationParser0.DEFAULT_DESCRIPTION, callback0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components4 = components3.examples(hashMap0);
      Example example0 = new Example();
      String string9 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string9).when(server0).description();
      doReturn(string9).when(server0).url();
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(server0);
      Example example1 = example0.$ref(string3);
      Example example2 = example1.value(produces0);
      Components components5 = components4.addExamples(string3, example2);
      Optional<io.swagger.oas.models.media.Content> optional4 = OperationParser.getContent(content0, produces0, produces0, components5);
  }
}
