/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 00:24:22 GMT 2020
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.Link;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.ArraySchema;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.responses.ApiResponse;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.parameters.Parameter;
import io.swagger.oas.models.parameters.RequestBody;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.SecurityRequirement;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.function.BiFunction;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Link[] linkArray0 = new Link[4];
      String string1 = "XRKvldR^D~D{)A]";
      String string2 = "w[2[";
      String string3 = ">tq%}KG9u";
      String string4 = "no description";
      String string5 = "localizedMessage";
      String string6 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      OperationParser operationParser0 = new OperationParser();
      ServerVariable[] serverVariableArray0 = new ServerVariable[4];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Operation operation0 = new Operation();
      Map<String, Callback> map2 = operation0.getCallbacks();
      Components components1 = components0.callbacks(map2);
      Header header0 = new Header();
      Components components2 = components1.addHeaders(string0, header0);
      Parameter parameter0 = null;
      Components components3 = components2.addParameters(operationParser0.COMMA, parameter0);
      Map<String, SecurityScheme> map3 = components1.getSecuritySchemes();
      Components components4 = components3.securitySchemes(map3);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      Content content0 = null;
      Link[] linkArray0 = new Link[8];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(operationParser0.COMMA, operationParser0.COMMA).when(apiResponse0).description();
      doReturn(linkArray0).when(apiResponse0).links();
      doReturn(operationParser0.COMPONENTS_REF, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components1 = components0.examples(map0);
      Map<String, RequestBody> map1 = components0.getRequestBodies();
      Components components2 = components1.requestBodies(map1);
      String string0 = "Q~oH2,";
      Components components3 = components2.addParameters(string0, parameter0);
      String string1 = "ky<*]xjQ~t;uUfk";
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      Header header0 = new Header();
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.addHeaderObject(operationParser0.COMPONENTS_REF, header0);
      String string2 = null;
      Components components4 = components3.addParameters(operationParser0.COMPONENTS_REF, parameter0);
      io.swagger.oas.models.responses.ApiResponse apiResponse3 = apiResponse2.description(string2);
      Components components5 = components3.addResponses(string1, apiResponse3);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      Link[] linkArray1 = new Link[9];
      String string3 = "xOJ%4|";
      String string4 = ";";
      String string5 = "unable to parse key as currency";
      String string6 = "";
      String string7 = "value not one of declared Enum instance names for %s";
      String string8 = "java.langjava.lang.Integer";
      String string9 = "H(T]8QM9) B";
      String string10 = "5d.hQ*Lq[!Z?&C0-=IX";
      String string11 = ",L<\"'EX]y@=/r";
      String string12 = "8Dy2;#)`pPVcdMeJ7f7";
      LinkParameters linkParameters0 = null;
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string1, string3, string2, string4).when(link1).description();
      doReturn(string10, string5, string11, string12, string12).when(link1).name();
      doReturn(string5, string6, string0, string7, string6).when(link1).operationId();
      doReturn(string5, operationParser0.DEFAULT_DESCRIPTION, string8, string1, string9).when(link1).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link1).parameters();
      linkArray1[0] = link1;
      linkArray1[1] = linkArray1[0];
      linkArray1[2] = linkArray1[1];
      linkArray1[3] = linkArray1[2];
      linkArray1[4] = linkArray1[3];
      linkArray1[5] = linkArray1[4];
      linkArray1[6] = linkArray1[5];
      linkArray1[7] = linkArray1[6];
      linkArray1[8] = linkArray1[7];
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = ") not suitable, must be java.lang.String";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[8];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      exampleObjectArray0[7] = exampleObjectArray0[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      contentArray0[0] = content0;
      Components components0 = new Components();
      String string1 = "*/*";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string1, callback0);
      String string2 = "V`fbSWdB&G*.{Knr[m+";
      Example example0 = new Example();
      Components components2 = components1.addExamples(string2, example0);
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components3 = components2.securitySchemes(map0);
      Map<String, Header> map1 = components1.getHeaders();
      Components components4 = components3.headers(map1);
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components4);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "v(o97^2rP%cvQ^9";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(contact0).email();
      doReturn(string0, string0).when(contact0).name();
      doReturn(string0, string0).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string1 = "java.langjava.lang.Integer";
      String string2 = "Can not deserialize instance of %s out of %s";
      String string3 = "j@va.langio.swgger.oas.models.info.Contact";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(linkParameters0).expression();
      doReturn(string1, string3).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string4 = "h}6\\0|q,oE";
      String[] stringArray0 = new String[3];
      stringArray0[1] = string1;
      stringArray0[2] = string4;
      boolean boolean0 = true;
      String string5 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string3).when(externalDocumentation0).description();
      doReturn(string4, string5).when(externalDocumentation0).url();
      int int0 = (-3851);
      String string6 = "";
      int int1 = (-1528);
      String string7 = "Y>Nme^/SDIs7hnA</{p";
      boolean boolean1 = true;
      String string8 = "";
      String string9 = "d";
      String string10 = "]v?s571|l->VlO1,^4h";
      String string11 = null;
      String string12 = "io.swagger.jaxrs2.OperationParser";
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string4, stringArray0[1]).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string4, string6).when(schema0).description();
      doReturn(string1, string0, string10, string11).when(schema0).example();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[0]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string6).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string6).when(schema0).minimum();
      doReturn(string7, string12).when(schema0).pattern();
      doReturn(boolean1, boolean2).when(schema0).readOnly();
      doReturn(string8).when(schema0).ref();
      doReturn(string9, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      String string13 = "java.langjava.lang.Integer";
      boolean boolean3 = true;
      boolean boolean4 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      String[] stringArray1 = new String[2];
      stringArray1[0] = string9;
      stringArray1[1] = string2;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray1);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Parameter parameter0 = new Parameter();
      Components components1 = components0.addParameters(string9, parameter0);
      HashMap<String, io.swagger.oas.models.links.Link> hashMap0 = new HashMap<String, io.swagger.oas.models.links.Link>();
      Components components2 = components1.links(hashMap0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = components0.getSchemas();
      Components components3 = components2.schemas(map1);
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(string8, apiResponse0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "v(o97^2rP%cvQ^9";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string0, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string1 = "java.langjava.lang.Integer";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string1, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string2 = "h}6\\0|q,oE";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string2;
      stringArray0[1] = string1;
      stringArray0[2] = string2;
      boolean boolean0 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = (-3851);
      String string3 = "";
      int int1 = (-1528);
      String string4 = "Y>Nme^/SDIs7hnA</{p";
      boolean boolean1 = true;
      String string5 = "";
      String string6 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string2, (String) null).when(schema0).description();
      doReturn(string1, string0, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[0], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string3).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string3).when(schema0).minimum();
      doReturn(string4, (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(string5).when(schema0).ref();
      doReturn(string6).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      String string7 = "java.langjava.lang.Integer";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      Parameter parameter1 = new Parameter();
      Map<String, Example> map1 = parameter1.getExamples();
      Components components1 = components0.examples(map1);
      String string8 = ",";
      Callback callback0 = new Callback();
      Components components2 = components1.addCallbacks(string8, callback0);
      String string9 = ",";
      Components components3 = components2.addParameters(string9, parameter1);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Server[] serverArray0 = new Server[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license1);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional4 = OperationParser.getInfo(info0);
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      Components components0 = new Components();
      Map<String, Example> map0 = components0.getExamples();
      Components components1 = components0.examples(map0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Header> map1 = apiResponse0.getHeaders();
      Components components2 = components1.headers(map1);
      String string0 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<PathItem> schema0 = new io.swagger.oas.models.media.Schema<PathItem>();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      Components components3 = components2.addSchemas(string0, arraySchema1);
      Components components4 = components3.addResponses(string0, apiResponse0);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "2;9oj]bg=xF'&gGi";
      String string1 = "java.langjava.lang.String";
      String string2 = null;
      String string3 = "#/components/schemas/";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(contact0).email();
      doReturn(string1, string2).when(contact0).name();
      doReturn(string0, string3).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Server[] serverArray0 = new Server[2];
      String string4 = "jaa.langjva.lang.String";
      String string5 = "java.langio.swagger.oas.models.info.Contact";
      ServerVariable[] serverVariableArray0 = new ServerVariable[5];
      String string6 = "java.langjava.lang.Integer";
      String string7 = "TK6^$nSZRT4LX\"x";
      String string8 = null;
      String string9 = "java.langio.swagger.oas.models.info.Contact";
      String string10 = ",U?iuo;p:1z^h";
      String string11 = "java.langio.swagger.oas.models.info.Contact";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string6, string6, string7, string5).when(serverVariable0).description();
      doReturn(string8, string9, string8, string10, string11).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      String string12 = null;
      String string13 = "upokqsYXPv$";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string4, string12).when(server0).description();
      doReturn(string1, string5, string7, string13).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      String string14 = "U\"AMrq[ewou$";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string13).when(license0).name();
      doReturn(string14, string12).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license0);
      String string15 = "java.langio.swagger.oas.models.info.Contact";
      String string16 = "java.lang";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string15, string10).when(license1).name();
      doReturn(string5, string16).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license1);
      String string17 = "invalid argument(s) (offset=%d, length=%d) for input array of %d element";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      License license2 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license2).name();
      doReturn((String) null).when(license2).url();
      String string18 = "java.langjava.lang.String";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact1).when(info0).contact();
      doReturn(string15, string14).when(info0).description();
      doReturn(license2).when(info0).license();
      doReturn(string17, string18).when(info0).termsOfService();
      doReturn(string15, string0).when(info0).title();
      doReturn(string17, string16).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional4 = OperationParser.getInfo(info0);
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[5];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[3] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      int int0 = 50;
      int int1 = 1;
      Class<io.swagger.oas.models.ExternalDocumentation> class0 = io.swagger.oas.models.ExternalDocumentation.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int2 = 0;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int2).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "T-E+)C7}u";
      String string1 = "E=Q";
      String string2 = "aiK )ZJ3u`b]0\\xC1 ";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(link0).description();
      doReturn(string0, string0).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      String string3 = "";
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string3).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      String string4 = "XF$9BHv/=T:'";
      Header header0 = new Header();
      LinkedList<Example> linkedList0 = new LinkedList<Example>();
      Header header1 = header0.examples(linkedList0);
      Header header2 = header1.description(string4);
      boolean boolean2 = false;
      Boolean boolean3 = new Boolean(boolean2);
      Header header3 = header2.explode(boolean3);
      Boolean boolean4 = null;
      Header header4 = header3.deprecated(boolean4);
      Components components1 = new Components();
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[9];
      boolean boolean5 = false;
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      int int0 = 50;
      int int1 = 1;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "T-E+)C7}u";
      String string1 = "E=Q";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      String string2 = "";
      boolean boolean1 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(requestBody0).description();
      doReturn(boolean1).when(requestBody0).required();
      Components components0 = new Components();
      String string3 = "XF$9BHv/=T:'";
      Header header0 = new Header();
      LinkedList<Example> linkedList0 = new LinkedList<Example>();
      Header header1 = header0.examples(linkedList0);
      Header header2 = header1.description(string3);
      boolean boolean2 = false;
      Boolean boolean3 = new Boolean(boolean2);
      Header header3 = header2.explode(boolean3);
      Boolean boolean4 = null;
      Header header4 = header3.deprecated(boolean4);
      Components components1 = new Components();
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[9];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      parameterArray0[8] = parameterArray0[7];
      Map<String, Parameter> map0 = components1.getParameters();
      Components components2 = components0.parameters(map0);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String[] stringArray0 = new String[6];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "io.swagger.jaxrs2.OperationParser";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      String string5 = "oT\\2?/ScSu:WRlEANaE";
      stringArray0[5] = string5;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      MediaType mediaType0 = new MediaType();
      String string6 = "$/";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string6, example0);
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.servers.Server> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.servers.Server>();
      MediaType mediaType2 = mediaType1.schema(schema0);
      Encoding encoding0 = new Encoding();
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      Encoding encoding1 = encoding0.explode(boolean1);
      MediaType mediaType3 = mediaType2.addEncoding(string3, encoding1);
      MediaType mediaType4 = mediaType3.example(stringArray0[4]);
      String string7 = ":F1eDpc`1C'#";
      String string8 = "c&yrh\\E=";
      String string9 = "j}gY";
      String string10 = "java.langjava.lang.Object";
      String string11 = "com.fasterxml.jackson.databind.node.ObjectNode";
      String string12 = "1S$uRCh!x";
      String string13 = "jl8*c yJ]k5G#?";
      String string14 = "ZIO";
      String string15 = "java.lang";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string13).when(exampleObject0).externalValue();
      doReturn(string7, string8, string9, string10).when(exampleObject0).name();
      doReturn(string11, string14).when(exampleObject0).summary();
      doReturn(string12, string15, string3).when(exampleObject0).value();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType4, exampleObject0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[7];
      boolean boolean2 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.TRUE;
      String string16 = "";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(license0).name();
      doReturn(string0).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      String string1 = "N_lI";
      Parameter parameter0 = new Parameter();
      Components components1 = components0.addParameters(string1, parameter0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components2 = components1.examples(hashMap0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.description(string1);
      Set<String> set0 = hashMap0.keySet();
      Components components3 = components2.addResponses(string1, apiResponse1);
      Header header0 = new Header();
      String string2 = null;
      Header header1 = header0.$ref(string2);
      Boolean boolean0 = Boolean.TRUE;
      Header header2 = header1.explode(boolean0);
      HashMap<String, io.swagger.oas.models.links.Link> hashMap1 = new HashMap<String, io.swagger.oas.models.links.Link>();
      Components components4 = components3.links(hashMap1);
      Components components5 = components3.addHeaders(string1, header2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      int int0 = (-1714);
      int int1 = 1863;
      int int2 = 58;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      boolean boolean1 = true;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      String string0 = "java.lang";
      Explode explode0 = Explode.DEFAULT;
      boolean boolean2 = false;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string1 = "No FormatFeatures defined for parser of type ";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string0, (String) null).when(parameter0).name();
      doReturn(boolean2).when(parameter0).required();
      doReturn(string1, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = null;
      Components components1 = components0.securitySchemes(map0);
      Map<String, Parameter> map1 = components1.getParameters();
      Components components2 = components1.parameters(map1);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components3 = components2.callbacks(hashMap0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      String string2 = "K5tJ#@d#riZ";
      Callback callback0 = new Callback();
      Callback callback1 = hashMap0.put(string2, callback0);
      String string3 = "a<85A@VF{-HNOudxE";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.link(string3, link0);
      Map<String, Header> map2 = apiResponse1.getHeaders();
      Components components4 = components3.headers(map2);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.NO FORMATFEATURES DEFINED FOR PARSER OF TYPE 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = null;
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components0);
      Content[] contentArray0 = new Content[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      contentArray0[8] = contentArray0[7];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      boolean boolean0 = false;
      String string1 = "";
      String string2 = "t[PX}/FbaGz>2-3!";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string3 = "FST`Ox:$J>";
      int int0 = 62;
      int int1 = 4;
      String string4 = null;
      String string5 = "`\\M8Y#G";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string2, stringArray0[4], (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string3, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(stringArray0[1]).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string5, (String) null).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(string3, (String) null).when(schema0).ref();
      doReturn(string4).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string6 = "";
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string7 = "";
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Link[] linkArray0 = new Link[2];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "ALLOW_NON_NUMERIC_NUMBERS";
      stringArray0[1] = string1;
      String string2 = "yN;KaPx*Kp?X,8uRbYJ";
      stringArray0[2] = string2;
      String string3 = "vJh;:1OfKr";
      stringArray0[3] = string3;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license1);
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(operationParser0.COMPONENTS_REF);
      MediaType mediaType1 = mediaType0.schema(arraySchema1);
      boolean boolean0 = mediaType1.equals(operationParser0);
      String string0 = "x";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(string0, encoding0);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType1, exampleObject0);
      Link[] linkArray0 = new Link[1];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Link[] linkArray0 = new Link[9];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components1 = components0.parameters(hashMap0);
      String string0 = "";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string0, securityScheme0);
      Encoding encoding0 = new Encoding();
      Map<String, Header> map0 = encoding0.getHeaders();
      Components components3 = components2.headers(map0);
      Link[] linkArray0 = new Link[4];
      ApiResponses apiResponses0 = new ApiResponses();
      Components components4 = components2.responses(apiResponses0);
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      Components components5 = components3.links(map1);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Link[] linkArray0 = new Link[1];
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link1).description();
      doReturn((String) null).when(link1).operationId();
      doReturn((String) null).when(link1).operationRef();
      linkArray0[0] = link1;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Components components0 = new Components();
      String string0 = "^6[Th[Tu|*S\"S";
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.in(string0);
      Boolean boolean0 = new Boolean(string0);
      Parameter parameter2 = parameter1.explode(boolean0);
      Components components1 = components0.addParameters(string0, parameter2);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      Server[] serverArray0 = new Server[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional4 = OperationParser.getServers(serverArray0);
      Optional<io.swagger.oas.models.servers.Server> optional5 = OperationParser.getServer(serverArray0[1]);
      Optional<io.swagger.oas.models.servers.Server> optional6 = OperationParser.getServer(serverArray0[1]);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      Components components1 = components0.responses(apiResponses1);
      String string0 = "z_RoGzP'";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components2 = components1.addLinks(string0, link0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components3 = components2.examples(map0);
      Header header0 = new Header();
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      Header header1 = header0.content(content1);
      Boolean boolean0 = null;
      Header header2 = header1.deprecated(boolean0);
      Components components4 = components3.addHeaders(apiResponses1.DEFAULT, header2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = null;
      Components components1 = components0.securitySchemes(map0);
      Map<String, Parameter> map1 = components1.getParameters();
      Components components2 = components1.parameters(map1);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components3 = components2.callbacks(hashMap0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      String string0 = "K5tJ#@d#riZ";
      Callback callback0 = new Callback();
      Callback callback1 = hashMap0.put(string0, callback0);
      String string1 = "a<85A@VF{-HNOudxE";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.link(string1, link0);
      Map<String, Header> map2 = apiResponse1.getHeaders();
      Components components4 = components3.headers(map2);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      boolean boolean0 = true;
      ArraySchema arraySchema0 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string0 = "|zG\\4^VAYgv";
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      OperationParser.MEDIA_TYPE = operationParser0.MEDIA_TYPE;
      String string0 = "'d<sE\"<Xj";
      OperationParser.COMPONENTS_REF = string0;
      OperationParser.LOGGER = operationParser0.LOGGER;
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContent(content0, produces0, produces0, components0);
      Content[] contentArray0 = null;
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components0);
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      OperationParser operationParser0 = new OperationParser();
      OperationParser.MEDIA_TYPE = operationParser0.COMMA;
      String string0 = "]m;kE^e";
      OperationParser.COMMA = string0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "4=dR}X:R9OsFAu|";
      stringArray0[0] = string0;
      String string1 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      stringArray0[1] = string1;
      String string2 = "java.lang";
      stringArray0[2] = string2;
      String string3 = "*Y%$";
      stringArray0[3] = string3;
      String string4 = "zM&g83Qk&&Md";
      stringArray0[4] = string4;
      String string5 = "W}2aCtzx:";
      stringArray0[5] = string5;
      String string6 = "`k|iaz,\"OX$48]b";
      stringArray0[6] = string6;
      String string7 = ")g ";
      stringArray0[7] = string7;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Components components0 = new Components();
      Header header0 = new Header();
      Components components1 = components0.addHeaders(stringArray0[5], header0);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = null;
      Components components2 = components1.responses(map0);
      String string8 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components3 = components2.addSchemas(string8, arraySchema0);
      Parameter parameter0 = new Parameter();
      Map<String, Example> map1 = null;
      Parameter parameter1 = parameter0.examples(map1);
      Boolean boolean0 = Boolean.FALSE;
      Parameter parameter2 = parameter1.deprecated(boolean0);
      Components components4 = components3.addParameters(string3, parameter2);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      Link[] linkArray0 = new Link[6];
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link1).description();
      doReturn((String) null).when(link1).operationId();
      doReturn((String) null).when(link1).operationRef();
      linkArray0[0] = link1;
      linkArray0[1] = link0;
      linkArray0[2] = link0;
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = link0;
      linkArray0[5] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      ArraySchema arraySchema0 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      String string0 = "ALLOW_NON_NUMERIC_NUMBERS";
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme.In securityScheme_In0 = SecurityScheme.In.HEADER;
      SecurityScheme securityScheme1 = securityScheme0.in(securityScheme_In0);
      String string1 = "$C;3]xL_";
      SecurityScheme securityScheme2 = securityScheme1.name(string1);
      Components components1 = components0.addSecuritySchemes(string0, securityScheme2);
      Optional<List<Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components1);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components1 = components0.parameters(hashMap0);
      String string0 = "0a";
      BiFunction<Object, Parameter, Parameter> biFunction0 = (BiFunction<Object, Parameter, Parameter>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      String string1 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.models.links.Link link2 = link1.$ref(string1);
      Components components2 = components1.addLinks(string0, link2);
      Callback callback0 = new Callback();
      Components components3 = components2.addCallbacks(string1, callback0);
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components3);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Components components0 = new Components();
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Map<String, Header> map0 = link0.getHeaders();
      Components components1 = components0.headers(map0);
      String string0 = "|;+IlZwoqPCfHHA8X;";
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Info> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Info>();
      Components components2 = components1.addSchemas(string0, schema0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, io.swagger.oas.models.media.Schema> map1 = arraySchema0.getProperties();
      Components components3 = components2.schemas(map1);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components4 = components3.callbacks(hashMap0);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      String string0 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses(string0, apiResponse0);
      io.swagger.oas.models.media.Schema<Parameter> schema0 = new io.swagger.oas.models.media.Schema<Parameter>();
      Map<String, io.swagger.oas.models.media.Schema> map0 = schema0.getProperties();
      Components components2 = components1.schemas(map0);
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string0, pathItem0);
      Callback callback2 = callback1.addPathItem(string0, pathItem0);
      Components components3 = components2.addCallbacks(string0, callback2);
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.description(string0);
      Map<String, Example> map1 = parameter1.getExamples();
      Components components4 = components3.examples(map1);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Components components0 = null;
      Optional<Parameter> optional1 = OperationParser.getParameter(parameter0, components0);
      Server[] serverArray0 = new Server[3];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      parameterArray0[0] = parameter0;
      Optional<List<Parameter>> optional4 = OperationParser.getParametersList(parameterArray0, components0);
      Optional<Parameter> optional5 = OperationParser.getParameter(parameterArray0[0], components0);
      Optional<List<io.swagger.oas.models.servers.Server>> optional6 = OperationParser.getServers(serverArray0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional7 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Optional<io.swagger.oas.models.ExternalDocumentation> optional4 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional5 = OperationParser.getContact(contact1);
      OperationParser operationParser0 = new OperationParser();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional6 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      contentArray0[0] = content0;
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components1 = components0.callbacks(hashMap0);
      HashMap<String, Header> hashMap1 = new HashMap<String, Header>();
      Components components2 = components1.headers(hashMap1);
      String string0 = "";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.summary(string0);
      Callback callback1 = callback0.addPathItem(string0, pathItem1);
      Callback callback2 = callback1.addPathItem(string0, pathItem0);
      Callback callback3 = hashMap0.put(string0, callback2);
      String string1 = "8#H6*H0i";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      String string2 = "NE";
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.$ref(string2);
      Components components3 = components2.addResponses(string1, apiResponse1);
      HashMap<String, SecurityScheme> hashMap2 = new HashMap<String, SecurityScheme>();
      HashMap<String, SecurityScheme> hashMap3 = new HashMap<String, SecurityScheme>(hashMap2);
      Components components4 = components3.securitySchemes(hashMap3);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "gnH5";
      String string1 = ") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string1, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "; expected Class<JsonDeserializer>";
      String string1 = "f^7$'rAo!,J";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string1, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean1 = true;
      String string0 = "j}uYvY8B$";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.DEFAULT;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string0, (String) null).when(parameter0).name();
      doReturn(boolean1, false).when(parameter0).required();
      doReturn(string0, (String) null).when(parameter0).style();
      Components components0 = new Components();
      Map<String, Parameter> map0 = components0.getParameters();
      Components components1 = components0.parameters(map0);
      Map<String, Header> map1 = components1.getHeaders();
      Components components2 = components1.headers(map1);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components3 = components2.securitySchemes(hashMap0);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components3);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.J}UYVY8B$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      boolean boolean0 = true;
      ArraySchema arraySchema0 = null;
      Content[] contentArray0 = null;
      boolean boolean1 = true;
      String string0 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      String string1 = "#/components/schemas/";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(arraySchema0).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string1, (String) null).when(parameter0).in();
      doReturn(string1, (String) null).when(parameter0).name();
      doReturn(boolean0, false).when(parameter0).required();
      doReturn(schema0, schema1).when(parameter0).schema();
      doReturn(string0).when(parameter0).style();
      Components components0 = new Components();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      Parameter parameter1 = new Parameter();
      Map<String, Example> map0 = parameter1.getExamples();
      Components components2 = components1.examples(map0);
      io.swagger.oas.models.media.Schema<Parameter> schema2 = new io.swagger.oas.models.media.Schema<Parameter>();
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema2.getProperties();
      Components components3 = components2.schemas(map1);
      String string2 = "java.lang";
      Example example0 = new Example();
      Components components4 = components3.addExamples(string2, example0);
      Optional<Parameter> optional0 = OperationParser.getParameter(parameter0, components4);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType1 = mediaType0.encoding(map0);
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      String string0 = "NSO&iP,?";
      Parameter parameter0 = new Parameter();
      Boolean boolean0 = Boolean.valueOf(string0);
      Parameter parameter1 = parameter0.required(boolean0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "#/components/schemas/";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string0, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components1 = components0.headers(hashMap0);
      String string0 = "";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components2 = components1.addLinks(string0, link0);
      Map<String, Example> map0 = components1.getExamples();
      Components components3 = components2.examples(map0);
      Operation operation0 = new Operation();
      String string1 = "e[b\\=)))\"{@";
      Operation operation1 = operation0.description(string1);
      Map<String, Callback> map1 = operation1.getCallbacks();
      Components components4 = components3.callbacks(map1);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      Content[] contentArray0 = new Content[7];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[9];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      exampleObjectArray0[7] = exampleObjectArray0[6];
      exampleObjectArray0[8] = exampleObjectArray0[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components2);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "any";
      Example example0 = new Example();
      Example example1 = example0.value(string0);
      String string1 = " (one known property: \"";
      Example example2 = example1.$ref(string1);
      Components components1 = components0.addExamples(string0, example2);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components1);
      ApiResponse[] apiResponseArray0 = new ApiResponse[4];
      String string2 = "#GkD^";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string1, string2, string1, string0, (String) null).when(apiResponse0).description();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components0);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "Z$*%d\"Z$}z$ZCGns";
      RequestBody requestBody1 = new RequestBody();
      Components components1 = components0.addRequestBodies(string1, requestBody1);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components2 = components1.examples(hashMap0);
      HashMap<String, RequestBody> hashMap1 = new HashMap<String, RequestBody>();
      Components components3 = components2.requestBodies(hashMap1);
      HashMap<String, SecurityScheme> hashMap2 = new HashMap<String, SecurityScheme>();
      Components components4 = components3.securitySchemes(hashMap2);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      int int0 = Integer.MAX_VALUE;
      int int1 = 1881;
      Schema schema0 = null;
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "com.fasterxml.jackson.databind.exc.PropertyBindingException";
      String string1 = "}>MRltCQP";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Optional<io.swagger.oas.models.ExternalDocumentation> optional4 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string2 = "c9}WkEe=#R90Wb'E";
      String string3 = "";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact1).email();
      doReturn(string2, (String) null).when(contact1).name();
      doReturn(string3).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional5 = OperationParser.getContact(contact1);
      OperationParser operationParser0 = new OperationParser();
      String string4 = "53!Z:|#";
      String string5 = null;
      String string6 = " must override 'withDelegate'";
      String string7 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string4, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string5).when(info0).termsOfService();
      doReturn(string6, (String) null).when(info0).title();
      doReturn(string7).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional6 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      License license0 = null;
      int int0 = 1;
      int int1 = 32768;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(contact0).email();
      doReturn(string0).when(contact0).name();
      doReturn(string0).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string1 = "<&o//n";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(contact1).email();
      doReturn(string0).when(contact1).name();
      doReturn(string1, (String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional3 = OperationParser.getContact(contact1);
      OperationParser operationParser0 = new OperationParser();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional4 = OperationParser.getLink(link0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(operationParser0.COMMA, (String) null).when(info0).termsOfService();
      doReturn(string1, (String) null).when(info0).title();
      doReturn(string1, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional5 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string0 = "4+ ";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0, operationParser0.COMPONENTS_REF).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      String string1 = null;
      Callback callback0 = new Callback();
      Components components2 = components1.addCallbacks(string1, callback0);
      RequestBody requestBody0 = new RequestBody();
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Content content2 = content1.addMediaType(string1, mediaType0);
      RequestBody requestBody1 = requestBody0.content(content2);
      RequestBody requestBody2 = requestBody1.description(operationParser0.MEDIA_TYPE);
      MediaType mediaType1 = content2.put(string1, mediaType0);
      Components components3 = components2.addRequestBodies(operationParser0.DEFAULT_DESCRIPTION, requestBody2);
      String string2 = "ME";
      MediaType mediaType2 = content2.put(string2, mediaType0);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "r!VH@";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components1 = components0.headers(hashMap0);
      String string1 = "JqSJDzeeTfJ$zW";
      RequestBody requestBody0 = new RequestBody();
      Components components2 = components1.addRequestBodies(string1, requestBody0);
      String string2 = null;
      HashMap<String, Parameter> hashMap1 = new HashMap<String, Parameter>();
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(server0).description();
      doReturn(string0).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      String string1 = "h+*qf]S?ND#6v;YWb";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Components components0 = new Components();
      Map<String, Example> map0 = components0.getExamples();
      Components components1 = components0.examples(map0);
      Map<String, Header> map1 = null;
      Components components2 = components1.headers(map1);
      String string2 = "PXv_5~:+2DZ;D>g";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      String string3 = null;
      io.swagger.oas.models.links.Link link1 = link0.$ref(string3);
      Components components3 = components2.addLinks(string2, link1);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components4 = components1.requestBodies(hashMap0);
      Operation operation0 = new Operation();
      SecurityRequirement securityRequirement0 = new SecurityRequirement();
      List<String> list0 = securityRequirement0.remove((Object) components2);
      Operation operation1 = operation0.addSecurityItem(securityRequirement0);
      Map<String, Callback> map2 = operation1.getCallbacks();
      Components components5 = components3.callbacks(map2);
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components5);
      OperationParser operationParser0 = new OperationParser();
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = ") out of range of Java short";
      boolean boolean0 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      String string1 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = null;
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(string1, apiResponse0);
      Components components1 = components0.responses(apiResponses1);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      components0.setCallbacks(hashMap0);
      Components components2 = components1.schemas(map0);
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      Components components3 = components2.addSchemas(apiResponses0.DEFAULT, schema0);
      SecurityScheme securityScheme0 = null;
      Components components4 = components3.addSecuritySchemes(string1, securityScheme0);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.schema(schema0);
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(apiResponses0.DEFAULT, encoding0);
      String string2 = "=H8u_&[/6Ag16";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType2, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "FLUSH_AFTER_WRITE_VALUE";
      String string1 = "hU";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string2 = "*/*";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(license1).name();
      doReturn(string2, (String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license1);
      Server[] serverArray0 = new Server[3];
      String string3 = "Failed to instantiate bean of type ";
      String string4 = "7%c<";
      String string5 = "class ArraySchema {\n";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string2).when(server0).description();
      doReturn(string3, string5).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      MediaType mediaType0 = null;
      String string0 = "\"t[v;";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "D`U ,,Sf\\@/+=Vg{";
      String string1 = "my(]]VnM55%5B$j'k+X";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string1, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(license0).name();
      doReturn(string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(license1).name();
      doReturn(string1).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license1);
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(operationParser0.COMPONENTS_REF);
      MediaType mediaType1 = mediaType0.schema(arraySchema1);
      boolean boolean0 = mediaType1.equals(operationParser0);
      String string2 = "x";
      Encoding encoding0 = new Encoding();
      MediaType mediaType2 = mediaType1.addEncoding(string2, encoding0);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType1, exampleObject0);
      Link[] linkArray0 = new Link[1];
      String string3 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMMA, (String) null).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string3).when(link0).operationId();
      doReturn(operationParser0.COMMA, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      String string4 = "fA-ra^h`";
      String string5 = "";
      String string6 = "java.lang";
      String string7 = "'pYk  /ok)>Y7Q";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string4, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string5).when(info0).termsOfService();
      doReturn(string6, (String) null).when(info0).title();
      doReturn(string7, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      boolean boolean0 = true;
      String string1 = null;
      String string2 = "tkm3_Vr)&8DAaB/}";
      boolean boolean1 = true;
      boolean boolean2 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 332;
      int int1 = 0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string0, string2, (String) null, (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[5], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(stringArray0[5]).when(schema0).maximum();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string1).when(schema0).minimum();
      doReturn(stringArray0[6], (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(stringArray0[2], (String) null).when(schema0).ref();
      doReturn(stringArray0[6], (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string3 = "java.lang";
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string4 = "";
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContent(content0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "J";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      boolean boolean0 = true;
      String string1 = "no double/Double-argument constructor/factory method to deserialize from Number value (%s)";
      String string2 = "BeanSerializer for ";
      boolean boolean1 = false;
      boolean boolean2 = true;
      ExternalDocumentation externalDocumentation0 = null;
      int int0 = 128;
      String string3 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(stringArray0[0], (String) null).when(schema0).description();
      doReturn(string1, string2, (String) null, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean2, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string1).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string3).when(schema0).minimum();
      doReturn(stringArray0[0], (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(string1, (String) null).when(schema0).ref();
      doReturn(string1, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      Link[] linkArray0 = new Link[5];
      String string4 = "";
      String string5 = "&#?heN}lkExE2=nR";
      String string6 = null;
      String string7 = "A(9oI4|d''@xwE^";
      String string8 = "";
      String string9 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "gnH5";
      String string1 = ") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'";
      String string2 = "#bEk#7";
      String string3 = "Should not be called on this type";
      ServerVariable[] serverVariableArray0 = new ServerVariable[4];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(server0).description();
      doReturn(string1, string3).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      String[] stringArray0 = new String[3];
      String string4 = "1I&>]C7AC&JQ/[";
      stringArray0[0] = string4;
      String string5 = "@k";
      stringArray0[1] = string5;
      String string6 = "";
      stringArray0[2] = string6;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      MediaType mediaType1 = mediaType0.encoding(map0);
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      String string0 = "NSO&iP,?";
      Parameter parameter0 = new Parameter();
      Boolean boolean0 = Boolean.valueOf(string0);
      Parameter parameter1 = parameter0.required(boolean0);
      String string1 = null;
      String string2 = "|A)2fp7X&";
      String string3 = "";
      String string4 = "!BU2{Eof";
      String string5 = "zljsU|}ND{";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(exampleObject0).externalValue();
      doReturn(string0, string2, string1, string3).when(exampleObject0).name();
      doReturn(string4, (String) null).when(exampleObject0).summary();
      doReturn(string5, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
      io.swagger.oas.annotations.Parameter parameter2 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter2).allowEmptyValue();
      doReturn(false).when(parameter2).allowReserved();
      doReturn((ArraySchema) null).when(parameter2).array();
      doReturn((Content[]) null).when(parameter2).content();
      doReturn(false).when(parameter2).deprecated();
      doReturn((String) null).when(parameter2).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter2).explode();
      doReturn((String) null).when(parameter2).in();
      doReturn((String) null).when(parameter2).name();
      doReturn(false).when(parameter2).required();
      doReturn((Schema) null, (Schema) null).when(parameter2).schema();
      doReturn((String) null).when(parameter2).style();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter2, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = "\"xF)";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      String string1 = "E32EP;/RDg";
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      boolean boolean0 = false;
      String string2 = "";
      String string3 = "^dI)I &K,l,*dZ_YG";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = (-4525);
      String string4 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string2).when(schema0).description();
      doReturn(stringArray0[0], string3, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string0, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string4).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string1, (String) null).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string2).when(schema0).ref();
      doReturn(string4).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      int int1 = 56;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      boolean boolean2 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1, int0).when(arraySchema0).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean2).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      String string5 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[1], (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string5).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional3 = OperationParser.getContact(contact0);
      String[] stringArray1 = new String[2];
      String string6 = "-Sj|9g<Dy;6pr";
      stringArray1[0] = string6;
      String string7 = "";
      stringArray1[1] = string7;
      Optional<Set<Tag>> optional4 = OperationParser.getTags(stringArray1);
      String string8 = "";
      String string9 = "d3=FT7";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(stringArray1[0], (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(stringArray0[2], (String) null).when(info0).termsOfService();
      doReturn(string8).when(info0).title();
      doReturn(string9, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional5 = OperationParser.getInfo(info0);
      boolean boolean3 = true;
      String string10 = "yR%vb";
      String string11 = null;
      boolean boolean4 = true;
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      String string12 = "";
      String string13 = "_:F'G";
      boolean boolean5 = false;
      String string14 = "uLojW\\>9#";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[1], (String) null).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean3, false).when(schema2).deprecated();
      doReturn(stringArray0[1], (String) null).when(schema2).description();
      doReturn(string10, string11, (String) null).when(schema2).example();
      doReturn(boolean2).when(schema2).exclusiveMaximum();
      doReturn(boolean4, false).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema2).externalDocs();
      doReturn(string2).when(schema2).format();
      doReturn(int0).when(schema2).maxLength();
      doReturn(string12).when(schema2).maximum();
      doReturn(int1, 0).when(schema2).minProperties();
      doReturn(string13).when(schema2).minimum();
      doReturn(string3, (String) null).when(schema2).pattern();
      doReturn(boolean5).when(schema2).readOnly();
      doReturn(stringArray0[2], (String) null).when(schema2).ref();
      doReturn(string14, (String) null).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional6 = OperationParser.getSchemaFromAnnotation(schema2);
      int int2 = (-2324);
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema3).implementation();
      boolean boolean6 = false;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema1).maxItems();
      doReturn(int1, int2).when(arraySchema1).minItems();
      doReturn(schema3, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean6).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional7 = OperationParser.getArraySchema(arraySchema1);
      String string15 = "U1";
      String string16 = null;
      ExternalDocumentation externalDocumentation2 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string15, (String) null).when(externalDocumentation2).description();
      doReturn(string16).when(externalDocumentation2).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional8 = OperationParser.getExternalDocumentation(externalDocumentation2);
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies(stringArray1[1], requestBody0);
      Map<String, Callback> map0 = components1.getCallbacks();
      Components components2 = components1.callbacks(map0);
      Map<String, Parameter> map1 = null;
      Components components3 = components2.parameters(map1);
      Map<String, io.swagger.oas.models.media.Schema> map2 = components3.getSchemas();
      Components components4 = components3.schemas(map2);
      Optional<io.swagger.oas.models.media.Content> optional9 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      int int0 = 50;
      int int1 = 1;
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Class<io.swagger.oas.models.responses.ApiResponse> class1 = io.swagger.oas.models.responses.ApiResponse.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "T-E+)C7}u";
      String string1 = "E=Q";
      String string2 = "J##?cz*(";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string2, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string0, string0).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      String string3 = "";
      boolean boolean2 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(requestBody0).description();
      doReturn(boolean2).when(requestBody0).required();
      Components components0 = new Components();
      String string4 = "XF$9BHv/=T:'";
      Header header0 = new Header();
      LinkedList<Example> linkedList0 = new LinkedList<Example>();
      Header header1 = header0.examples(linkedList0);
      Header header2 = header1.description(string4);
      boolean boolean3 = false;
      Boolean boolean4 = new Boolean(boolean3);
      Header header3 = header2.explode(boolean4);
      Boolean boolean5 = null;
      Header header4 = header3.deprecated(boolean5);
      Components components1 = new Components();
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[9];
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[0];
      String string5 = "";
      Explode explode0 = Explode.TRUE;
      String string6 = "";
      Schema schema2 = null;
      String string7 = "rgpPP`b{}:d/{y2";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter0;
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = "";
      String string1 = "-mp?CZ Efz$b)O^bm";
      String string2 = "fk=LsU`Z1*";
      String string3 = "";
      String string4 = "]@QJsJ`' 1";
      String string5 = "N0xG)p?ySbxyO{n";
      String string6 = "|nSS!&A'xr(";
      String string7 = "[map-like type; class %s, %s -> %s]";
      String string8 = "HlUI<b";
      String string9 = "Eb)>z0(w&Vp\"}4oP";
      String string10 = "oZ#Z4(6bI,k";
      String string11 = "iV3LG|b4{.Kc<|v:";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string2, string2, string3).when(link0).description();
      doReturn(string9, string10, string1, string11, string8).when(link0).name();
      doReturn(string4, string5, string5, string6, string0).when(link0).operationId();
      doReturn(string2, string7, string8, string9, string8).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      String string12 = "#/components/securitySchemes/";
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string1, string12).when(requestBody0).description();
      doReturn(boolean0, boolean0).when(requestBody0).required();
      Components components0 = new Components();
      Link[] linkArray0 = new Link[9];
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = link0;
      linkArray0[4] = link0;
      linkArray0[5] = link0;
      linkArray0[6] = link0;
      linkArray0[7] = link0;
      linkArray0[8] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      Components components1 = components0.links(map0);
      String string13 = "";
      Example example0 = new Example();
      Components components2 = components1.addExamples(string13, example0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components3 = components2.addResponses(string13, apiResponse0);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components4 = components3.requestBodies(hashMap0);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      boolean boolean0 = false;
      String string1 = "";
      String string2 = "t[PX}/FbaGz>2-3!";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(externalDocumentation0).description();
      doReturn(string2, (String) null).when(externalDocumentation0).url();
      String string3 = "FST`Ox:$J>";
      int int0 = 62;
      int int1 = 4;
      String string4 = null;
      String string5 = "`\\M8Y#G";
      String string6 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      int int2 = 1;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string2, stringArray0[4], string1).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string3, string6).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2, 0).when(schema0).maxProperties();
      doReturn(stringArray0[1]).when(schema0).maximum();
      doReturn(int1, int0).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string5, string6).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(string3, stringArray0[2]).when(schema0).ref();
      doReturn(string4).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string7 = "";
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string8 = "";
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String[] stringArray0 = new String[6];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "io.swagger.jaxrs2.OperationParser";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      String string5 = "oT\\2?/ScSu:WRlEANaE";
      stringArray0[5] = string5;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      MediaType mediaType0 = new MediaType();
      String string6 = "$/";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string6, example0);
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.servers.Server> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.servers.Server>();
      MediaType mediaType2 = mediaType1.schema(schema0);
      Encoding encoding0 = new Encoding();
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      Encoding encoding1 = encoding0.explode(boolean1);
      MediaType mediaType3 = mediaType2.addEncoding(string3, encoding1);
      MediaType mediaType4 = mediaType3.example(stringArray0[4]);
      String string7 = ", ";
      String string8 = "no description";
      String string9 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string8, (String) null).when(exampleObject0).externalValue();
      doReturn(string7, string0, string9).when(exampleObject0).name();
      doReturn(string8, (String) null).when(exampleObject0).summary();
      doReturn(stringArray0[0]).when(exampleObject0).value();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType4, exampleObject0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[7];
      boolean boolean2 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean3 = false;
      String string10 = "NON_ABSENT";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.TRUE;
      String string11 = "#;vqI?TTje";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string12 = "3Lj\\6 $!OvcPS^yoF";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = "D`U ,,Sf\\@/+=Vg{";
      String string1 = "my(]]VnM55%5B$j'k+X";
      String string2 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string1, string2).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Class<io.swagger.oas.models.info.Contact> class0 = io.swagger.oas.models.info.Contact.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      String string0 = "gnH5";
      String string1 = ") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'";
      String string2 = "java.langjava.lang.Integer";
      ServerVariable[] serverVariableArray0 = new ServerVariable[2];
      String string3 = "";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string3, (String) null).when(serverVariable0).description();
      doReturn(string2, string2).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server0).description();
      doReturn(string1, string2).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      String[] stringArray0 = new String[3];
      String string4 = "1I&>]C7AC&JQ/[";
      stringArray0[0] = string4;
      String string5 = "@k";
      String string6 = "";
      stringArray0[2] = string6;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      String string7 = "\\@qipnR|$d~%S";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.DEFAULT;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String string0 = "5Z}HW<SrZ$-LLB`$";
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      String string1 = "maz,";
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      String string2 = "java.langjava.lang.Integer";
      stringArray0[3] = string2;
      stringArray0[4] = string0;
      String string3 = "    head: ";
      stringArray0[5] = string3;
      stringArray0[6] = string0;
      stringArray0[7] = stringArray0[3];
      String string4 = "";
      stringArray0[8] = string4;
      boolean boolean0 = true;
      boolean boolean1 = true;
      String string5 = "#/components/examples/";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(externalDocumentation0).description();
      doReturn(stringArray0[5], (String) null).when(externalDocumentation0).url();
      String string6 = ":ISX";
      int int0 = 4209;
      String string7 = "aYMeGh";
      int int1 = 3;
      String string8 = null;
      boolean boolean2 = false;
      String string9 = "y{";
      boolean boolean3 = false;
      boolean boolean4 = true;
      String string10 = "^sa$/ q[^}dc";
      int int2 = 258;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string9).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean3).when(schema0).deprecated();
      doReturn(stringArray0[0], string8).when(schema0).description();
      doReturn(stringArray0[7], stringArray0[8], stringArray0[5], (String) null).when(schema0).example();
      doReturn(boolean0, boolean4).when(schema0).exclusiveMaximum();
      doReturn(boolean1, boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string6, string10).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2, 0).when(schema0).maxProperties();
      doReturn(string7).when(schema0).maximum();
      doReturn(int1, int2).when(schema0).minProperties();
      doReturn(string0).when(schema0).minimum();
      doReturn(string8).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string4).when(schema0).ref();
      doReturn(stringArray0[2], stringArray0[5]).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      int int3 = 1;
      int int4 = 2147483621;
      Class<String> class0 = String.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema2 = null;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int3, 0).when(arraySchema0).maxItems();
      doReturn(int1, int4).when(arraySchema0).minItems();
      doReturn(schema1, schema2).when(arraySchema0).schema();
      doReturn(boolean1, boolean2).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "FLUSH_AFTER_WRITE_VALUE";
      String string1 = "hU";
      String string2 = "java.langjava.lang.Object";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(license0).name();
      doReturn(string1, string0).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string3 = "*/*";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string2).when(license1).name();
      doReturn(string3, string1).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license1);
      Server[] serverArray0 = new Server[3];
      String string4 = "Failed o instantiate bean of type ";
      String string5 = "7%c";
      String string6 = "class ArraySchema {\n";
      ServerVariable[] serverVariableArray0 = new ServerVariable[1];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string3, (String) null, (String) null, (String) null).when(server0).description();
      doReturn(string4, string6, (String) null, (String) null, (String) null).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) null, (Object) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      String string7 = "";
      String string8 = "Z:8 `";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string7).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1, (String) null).when(info0).termsOfService();
      doReturn(string8, (String) null).when(info0).title();
      doReturn(string8, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      String string9 = "$qmm# H/td}s9w?Zn";
      String string10 = "";
      License license2 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string9, (String) null).when(license2).name();
      doReturn(string10).when(license2).url();
      Optional<io.swagger.oas.models.info.License> optional4 = OperationParser.getLicense(license2);
      MediaType mediaType0 = new MediaType();
      int int0 = 686;
      float float0 = 0.0F;
      HashMap<String, Example> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, Example>(int0, float0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      int int0 = 50;
      int int1 = 1;
      Class<Parameter> class0 = Parameter.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Class<Void> class1 = Void.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(class1).when(schema1).implementation();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String string0 = "T-E+)C7}u";
      String string1 = "E=Q";
      String string2 = "}y$$h8[G^*gXJM";
      String string3 = "java.langjava.lang.Object";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string3, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(link0).description();
      doReturn(string0, string2).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      String string4 = "";
      boolean boolean2 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(requestBody0).description();
      doReturn(boolean2).when(requestBody0).required();
      Components components0 = new Components();
      String string5 = "XF$9BHv/=T:'";
      Header header0 = new Header();
      LinkedList<Example> linkedList0 = new LinkedList<Example>();
      Header header1 = header0.examples(linkedList0);
      Header header2 = header1.description(string5);
      boolean boolean3 = false;
      Boolean boolean4 = new Boolean(boolean3);
      Header header3 = header2.explode(boolean4);
      Boolean boolean5 = null;
      Header header4 = header3.deprecated(boolean5);
      Components components1 = new Components();
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[9];
      boolean boolean6 = false;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "D`U ,,Sf\\@/+=Vg{";
      String string1 = "my(]]VnM55%5B$j'k+X";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string1, string0).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string2 = "<B[w";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string2, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = "D`U ,,Sf\\@/+=Vg{";
      String string1 = "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string1, string0).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string2 = "";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string2).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[3];
      stringArray0[0] = string2;
      stringArray0[1] = string2;
      stringArray0[2] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components1 = components0.headers(hashMap0);
      String string0 = "";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      Components components2 = components1.addLinks(string0, link0);
      Map<String, Example> map0 = components1.getExamples();
      Components components3 = components2.examples(map0);
      Operation operation0 = new Operation();
      String string1 = "e[b\\=)))\"{@";
      Operation operation1 = operation0.description(string1);
      Map<String, Callback> map1 = operation1.getCallbacks();
      Components components4 = components3.callbacks(map1);
      Components components5 = components4.headers(hashMap0);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      Content[] contentArray0 = new Content[7];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[9];
      String string2 = "java.lang";
      String string3 = "java.langjava.lang.Object";
      String string4 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, string2, string3, string2, string4).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      exampleObjectArray0[7] = exampleObjectArray0[6];
      exampleObjectArray0[8] = exampleObjectArray0[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components2);
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      Content content0 = null;
      String string0 = "com.fasterxml.jackson.databind.node.TreeTraversingParser";
      Link[] linkArray0 = new Link[0];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(operationParser0.COMMA, string0).when(apiResponse0).description();
      doReturn(linkArray0).when(apiResponse0).links();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Parameter parameter0 = new Parameter();
      Map<String, Example> map0 = parameter0.getExamples();
      Components components1 = components0.examples(map0);
      Map<String, RequestBody> map1 = components0.getRequestBodies();
      Components components2 = components1.requestBodies(map1);
      String string1 = "Q~oH2,";
      Components components3 = components2.addParameters(string1, parameter0);
      String string2 = "ky<*]xjQ~t;uUfk";
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      Header header0 = new Header();
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.addHeaderObject(operationParser0.COMPONENTS_REF, header0);
      String string3 = null;
      Components components4 = components3.addParameters(operationParser0.COMPONENTS_REF, parameter0);
      io.swagger.oas.models.responses.ApiResponse apiResponse3 = apiResponse2.description(string3);
      Components components5 = components3.addResponses(string2, apiResponse3);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      Link[] linkArray1 = new Link[9];
      String string4 = "xOJ%4|";
      String string5 = ";";
      String string6 = "unable to parse key as currency";
      String string7 = "";
      String string8 = "value not one of declared Enum instance names for %s";
      String string9 = "java.langjava.lang.Integer";
      String string10 = "H(T]8QM9) B";
      String string11 = null;
      String string12 = "java.langjava.lang.Object";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string2, string4, string3, string5).when(link0).description();
      doReturn(string11, string12, string6, string7, operationParser0.DEFAULT_DESCRIPTION).when(link0).name();
      doReturn(string6, string7, string1, string8, string7).when(link0).operationId();
      doReturn(string6, operationParser0.DEFAULT_DESCRIPTION, string9, string2, string10).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray1[0] = link0;
      linkArray1[1] = linkArray1[0];
      linkArray1[2] = linkArray1[1];
      linkArray1[3] = linkArray1[2];
      linkArray1[4] = linkArray1[3];
      linkArray1[5] = linkArray1[4];
      linkArray1[6] = linkArray1[5];
      linkArray1[7] = linkArray1[6];
      linkArray1[8] = linkArray1[7];
      Map<String, io.swagger.oas.models.links.Link> map2 = OperationParser.getLinks(linkArray1);
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "any";
      Example example0 = new Example();
      Example example1 = example0.value(string0);
      String string1 = " (one known property: \"";
      Example example2 = example1.externalValue(string1);
      Example example3 = example1.$ref(string1);
      Components components1 = components0.addExamples(string0, example3);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components1);
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      String string2 = "java.lang";
      String string3 = "F59^j\\]/%,!YVi";
      String string4 = "c]EL";
      Link[] linkArray0 = new Link[3];
      String string5 = "XlqhjFV";
      String string6 = "q!Kq";
      String string7 = null;
      String string8 = "java.lang";
      String string9 = "X";
      String string10 = "java.langjava.lang.String";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string2, string6, string7, string2).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string6, string0, string5, string8, string5).when(link0).operationId();
      doReturn(string9, string10, string7, string5, string7).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      String string11 = null;
      String string12 = "z5b8";
      String string13 = "";
      String string14 = "#/components/schemas/";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string2, string0, string3, string4, string4).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string11, string12, string13, string2, string14).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }
}
