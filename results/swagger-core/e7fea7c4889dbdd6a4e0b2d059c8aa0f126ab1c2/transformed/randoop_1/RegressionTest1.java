import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        java.lang.Class<?> wildcardClass5 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass10 = tagSetOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass29 = strMap28.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        java.lang.Class<?> wildcardClass41 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        java.lang.Class<?> wildcardClass59 = parameterListOptional58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass19 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass13 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass5 = tagSetOptional4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass17 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass28 = serverListOptional27.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass32 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        java.lang.Class<?> wildcardClass58 = parameterListOptional57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass14 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        java.lang.Class<?> wildcardClass42 = parameterListOptional41.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass9 = tagSetOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass8 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass12 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass17 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass25 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        java.lang.Class<?> wildcardClass79 = contentOptional78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass4 = strArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass9 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        java.lang.Class<?> wildcardClass33 = parameterListOptional32.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        java.lang.Class<?> wildcardClass43 = contentOptional42.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass23 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        javax.ws.rs.Produces produces41 = null;
        javax.ws.rs.Produces produces42 = null;
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional44 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces41, produces42, components43);
        javax.ws.rs.Produces produces45 = null;
        javax.ws.rs.Produces produces46 = null;
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional48 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces45, produces46, components47);
        javax.ws.rs.Produces produces49 = null;
        javax.ws.rs.Produces produces50 = null;
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional52 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces49, produces50, components51);
        javax.ws.rs.Produces produces53 = null;
        javax.ws.rs.Produces produces54 = null;
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional56 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces53, produces54, components55);
        javax.ws.rs.Produces produces57 = null;
        javax.ws.rs.Produces produces58 = null;
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional60 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces57, produces58, components59);
        java.lang.Class<?> wildcardClass61 = apiResponsesOptional60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass31 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass20 = strMap19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass30 = serverListOptional29.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass19 = serverListOptional18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        java.lang.Class<?> wildcardClass57 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        java.lang.Class<?> wildcardClass81 = contentOptional80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass5 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass25 = strMap24.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass5 = tagSetOptional4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass15 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass33 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        java.lang.Class<?> wildcardClass26 = parameterListOptional25.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass33 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass11 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass10 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        javax.ws.rs.Produces produces41 = null;
        javax.ws.rs.Produces produces42 = null;
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional44 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces41, produces42, components43);
        javax.ws.rs.Produces produces45 = null;
        javax.ws.rs.Produces produces46 = null;
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional48 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces45, produces46, components47);
        javax.ws.rs.Produces produces49 = null;
        javax.ws.rs.Produces produces50 = null;
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional52 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces49, produces50, components51);
        javax.ws.rs.Produces produces53 = null;
        javax.ws.rs.Produces produces54 = null;
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional56 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces53, produces54, components55);
        javax.ws.rs.Produces produces57 = null;
        javax.ws.rs.Produces produces58 = null;
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional60 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces57, produces58, components59);
        javax.ws.rs.Produces produces61 = null;
        javax.ws.rs.Produces produces62 = null;
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional64 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces61, produces62, components63);
        javax.ws.rs.Produces produces65 = null;
        javax.ws.rs.Produces produces66 = null;
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional68 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces65, produces66, components67);
        javax.ws.rs.Produces produces69 = null;
        javax.ws.rs.Produces produces70 = null;
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional72 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces69, produces70, components71);
        java.lang.Class<?> wildcardClass73 = apiResponsesOptional72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        java.lang.Class<?> wildcardClass15 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass8 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass26 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        java.lang.Class<?> wildcardClass21 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass10 = tagSetOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        java.lang.Class<?> wildcardClass39 = parameterListOptional38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass26 = strMap25.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass17 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        java.lang.Class<?> wildcardClass30 = parameterListOptional29.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass10 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass20 = serverListOptional19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "#/components/schemas/", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass14 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass8 = tagSetOptional7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass23 = serverListOptional22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        java.lang.Class<?> wildcardClass23 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        java.lang.Class<?> wildcardClass61 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass8 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass10 = tagSetOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        java.lang.Class<?> wildcardClass49 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "#/components/schemas/", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass15 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        java.lang.Class<?> wildcardClass54 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass10 = serverListOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass29 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "#/components/schemas/", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass13 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        java.lang.Class<?> wildcardClass46 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        java.lang.Class<?> wildcardClass65 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass12 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass12 = serverListOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass24 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass37 = strMap36.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        java.lang.Class<?> wildcardClass59 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass9 = strMap8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        java.lang.Class<?> wildcardClass57 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        java.lang.Class<?> wildcardClass64 = parameterListOptional63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        java.lang.Class<?> wildcardClass31 = parameterListOptional30.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass19 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass7 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass4 = tagSetOptional3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass26 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass25 = serverListOptional24.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass39 = strMap38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass6 = tagSetOptional5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        java.lang.Class<?> wildcardClass70 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass37 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass32 = serverListOptional31.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        java.lang.Class<?> wildcardClass83 = contentOptional82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass5 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass18 = serverListOptional17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass29 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass22 = serverListOptional21.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass10 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass36 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass17 = strMap16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        java.lang.Class<?> wildcardClass71 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass31 = serverListOptional30.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass12 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        java.lang.Class<?> wildcardClass14 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass12 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        java.lang.Class<?> wildcardClass27 = parameterListOptional26.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        java.lang.Class<?> wildcardClass60 = parameterListOptional59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass14 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass10 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass3 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        java.lang.Class<?> wildcardClass39 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass15 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        java.lang.Class<?> wildcardClass68 = parameterListOptional67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass31 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass27 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass35 = strMap34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass18 = tagSetOptional17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional32 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional33 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional34 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass35 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass35 = serverListOptional34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass14 = serverListOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass9 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        io.swagger.oas.annotations.media.Content[] contentArray0 = null;
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        java.lang.Class<?> wildcardClass3 = contentOptional2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        java.lang.Class<?> wildcardClass73 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass14 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass8 = tagSetOptional7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass10 = tagSetOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass10 = tagSetOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass34 = serverListOptional33.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        java.lang.Class<?> wildcardClass61 = parameterListOptional60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional32 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass33 = tagSetOptional32.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "#/components/schemas/", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass7 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass22 = serverListOptional21.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass27 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass14 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass17 = serverListOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass15 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        java.lang.Class<?> wildcardClass47 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass16 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass27 = serverListOptional26.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass24 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass8 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass11 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass21 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        java.lang.Class<?> wildcardClass27 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        javax.ws.rs.Produces produces41 = null;
        javax.ws.rs.Produces produces42 = null;
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional44 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces41, produces42, components43);
        javax.ws.rs.Produces produces45 = null;
        javax.ws.rs.Produces produces46 = null;
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional48 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces45, produces46, components47);
        javax.ws.rs.Produces produces49 = null;
        javax.ws.rs.Produces produces50 = null;
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional52 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces49, produces50, components51);
        javax.ws.rs.Produces produces53 = null;
        javax.ws.rs.Produces produces54 = null;
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional56 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces53, produces54, components55);
        javax.ws.rs.Produces produces57 = null;
        javax.ws.rs.Produces produces58 = null;
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional60 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces57, produces58, components59);
        javax.ws.rs.Produces produces61 = null;
        javax.ws.rs.Produces produces62 = null;
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional64 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces61, produces62, components63);
        javax.ws.rs.Produces produces65 = null;
        javax.ws.rs.Produces produces66 = null;
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional68 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces65, produces66, components67);
        javax.ws.rs.Produces produces69 = null;
        javax.ws.rs.Produces produces70 = null;
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional72 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces69, produces70, components71);
        javax.ws.rs.Produces produces73 = null;
        javax.ws.rs.Produces produces74 = null;
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional76 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces73, produces74, components75);
        javax.ws.rs.Produces produces77 = null;
        javax.ws.rs.Produces produces78 = null;
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional80 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces77, produces78, components79);
        java.lang.Class<?> wildcardClass81 = apiResponseArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional88 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components87);
        io.swagger.oas.models.Components components89 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional90 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components89);
        io.swagger.oas.models.Components components91 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional92 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components91);
        java.lang.Class<?> wildcardClass93 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass37 = serverListOptional36.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass5 = strArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass24 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass19 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass12 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        io.swagger.oas.annotations.links.LinkParameters linkParameters0 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap1 = io.swagger.jaxrs2.OperationParser.getLinkParameters(linkParameters0);
        java.lang.Class<?> wildcardClass2 = strMap1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass18 = strMap17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass9 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "#/components/schemas/", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        javax.ws.rs.Produces produces41 = null;
        javax.ws.rs.Produces produces42 = null;
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional44 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces41, produces42, components43);
        javax.ws.rs.Produces produces45 = null;
        javax.ws.rs.Produces produces46 = null;
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional48 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces45, produces46, components47);
        javax.ws.rs.Produces produces49 = null;
        javax.ws.rs.Produces produces50 = null;
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional52 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces49, produces50, components51);
        javax.ws.rs.Produces produces53 = null;
        javax.ws.rs.Produces produces54 = null;
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional56 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces53, produces54, components55);
        javax.ws.rs.Produces produces57 = null;
        javax.ws.rs.Produces produces58 = null;
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional60 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces57, produces58, components59);
        javax.ws.rs.Produces produces61 = null;
        javax.ws.rs.Produces produces62 = null;
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional64 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces61, produces62, components63);
        javax.ws.rs.Produces produces65 = null;
        javax.ws.rs.Produces produces66 = null;
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional68 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces65, produces66, components67);
        javax.ws.rs.Produces produces69 = null;
        javax.ws.rs.Produces produces70 = null;
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional72 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces69, produces70, components71);
        javax.ws.rs.Produces produces73 = null;
        javax.ws.rs.Produces produces74 = null;
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional76 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces73, produces74, components75);
        javax.ws.rs.Produces produces77 = null;
        javax.ws.rs.Produces produces78 = null;
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional80 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces77, produces78, components79);
        javax.ws.rs.Produces produces81 = null;
        javax.ws.rs.Produces produces82 = null;
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional84 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces81, produces82, components83);
        java.lang.Class<?> wildcardClass85 = apiResponsesOptional84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        javax.ws.rs.Produces produces41 = null;
        javax.ws.rs.Produces produces42 = null;
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional44 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces41, produces42, components43);
        java.lang.Class<?> wildcardClass45 = apiResponsesOptional44.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass37 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass15 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        java.lang.Class<?> wildcardClass19 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass15 = strMap14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass15 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass16 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        java.lang.Class<?> wildcardClass72 = parameterListOptional71.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass13 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass16 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass10 = tagSetOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass9 = tagSetOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass7 = strMap6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        java.lang.Class<?> wildcardClass10 = parameterListOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        java.lang.Class<?> wildcardClass85 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass37 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        java.lang.Class<?> wildcardClass60 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass15 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass30 = strMap29.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass39 = serverListOptional38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        java.lang.Class<?> wildcardClass65 = parameterListOptional64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional88 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components87);
        io.swagger.oas.models.Components components89 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional90 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components89);
        io.swagger.oas.models.Components components91 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional92 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components91);
        io.swagger.oas.models.Components components93 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional94 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components93);
        java.lang.Class<?> wildcardClass95 = contentOptional94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass28 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass10 = tagSetOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass10 = tagSetOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass14 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass33 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass12 = strArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass34 = serverListOptional33.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        java.lang.Class<?> wildcardClass74 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional32 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional33 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional34 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional35 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional36 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass37 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        java.lang.Class<?> wildcardClass36 = parameterListOptional35.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass30 = serverListOptional29.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        javax.ws.rs.Produces produces41 = null;
        javax.ws.rs.Produces produces42 = null;
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional44 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces41, produces42, components43);
        javax.ws.rs.Produces produces45 = null;
        javax.ws.rs.Produces produces46 = null;
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional48 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces45, produces46, components47);
        javax.ws.rs.Produces produces49 = null;
        javax.ws.rs.Produces produces50 = null;
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional52 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces49, produces50, components51);
        javax.ws.rs.Produces produces53 = null;
        javax.ws.rs.Produces produces54 = null;
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional56 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces53, produces54, components55);
        java.lang.Class<?> wildcardClass57 = apiResponsesOptional56.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass10 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass32 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "#/components/schemas/", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass12 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass28 = strMap27.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass31 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        java.lang.Class<?> wildcardClass68 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass11 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass13 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass24 = strMap23.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass33 = serverListOptional32.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "#/components/schemas/", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass16 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        javax.ws.rs.Produces produces41 = null;
        javax.ws.rs.Produces produces42 = null;
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional44 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces41, produces42, components43);
        javax.ws.rs.Produces produces45 = null;
        javax.ws.rs.Produces produces46 = null;
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional48 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces45, produces46, components47);
        javax.ws.rs.Produces produces49 = null;
        javax.ws.rs.Produces produces50 = null;
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional52 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces49, produces50, components51);
        javax.ws.rs.Produces produces53 = null;
        javax.ws.rs.Produces produces54 = null;
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional56 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces53, produces54, components55);
        javax.ws.rs.Produces produces57 = null;
        javax.ws.rs.Produces produces58 = null;
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional60 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces57, produces58, components59);
        javax.ws.rs.Produces produces61 = null;
        javax.ws.rs.Produces produces62 = null;
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional64 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces61, produces62, components63);
        javax.ws.rs.Produces produces65 = null;
        javax.ws.rs.Produces produces66 = null;
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional68 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces65, produces66, components67);
        javax.ws.rs.Produces produces69 = null;
        javax.ws.rs.Produces produces70 = null;
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional72 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces69, produces70, components71);
        java.lang.Class<?> wildcardClass73 = apiResponseArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass15 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass30 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass15 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass24 = serverListOptional23.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass6 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        javax.ws.rs.Produces produces5 = null;
        javax.ws.rs.Produces produces6 = null;
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional8 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces5, produces6, components7);
        javax.ws.rs.Produces produces9 = null;
        javax.ws.rs.Produces produces10 = null;
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional12 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces9, produces10, components11);
        javax.ws.rs.Produces produces13 = null;
        javax.ws.rs.Produces produces14 = null;
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional16 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces13, produces14, components15);
        javax.ws.rs.Produces produces17 = null;
        javax.ws.rs.Produces produces18 = null;
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional20 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces17, produces18, components19);
        javax.ws.rs.Produces produces21 = null;
        javax.ws.rs.Produces produces22 = null;
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional24 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces21, produces22, components23);
        javax.ws.rs.Produces produces25 = null;
        javax.ws.rs.Produces produces26 = null;
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional28 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces25, produces26, components27);
        javax.ws.rs.Produces produces29 = null;
        javax.ws.rs.Produces produces30 = null;
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional32 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces29, produces30, components31);
        javax.ws.rs.Produces produces33 = null;
        javax.ws.rs.Produces produces34 = null;
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional36 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces33, produces34, components35);
        javax.ws.rs.Produces produces37 = null;
        javax.ws.rs.Produces produces38 = null;
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional40 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces37, produces38, components39);
        java.lang.Class<?> wildcardClass41 = apiResponseArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        java.lang.Class<?> wildcardClass69 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass20 = tagSetOptional19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass7 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        java.lang.Class<?> wildcardClass43 = parameterListOptional42.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass16 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        java.lang.Class<?> wildcardClass70 = parameterListOptional69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass43 = strMap42.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass10 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        java.lang.Class<?> wildcardClass35 = parameterListOptional34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        java.lang.Class<?> wildcardClass81 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass8 = strArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass18 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass19 = tagSetOptional18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass19 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "#/components/schemas/", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass14 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass10 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass12 = strMap11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass32 = strMap31.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional32 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional33 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional34 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional35 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass36 = tagSetOptional35.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        java.lang.Class<?> wildcardClass87 = contentOptional86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass18 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass18 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional88 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components87);
        io.swagger.oas.models.Components components89 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional90 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components89);
        io.swagger.oas.models.Components components91 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional92 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components91);
        io.swagger.oas.models.Components components93 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional94 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components93);
        io.swagger.oas.models.Components components95 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional96 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components95);
        io.swagger.oas.models.Components components97 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional98 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components97);
        java.lang.Class<?> wildcardClass99 = contentOptional98.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass35 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass33 = strMap32.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass40 = serverListOptional39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass41 = strMap40.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass22 = tagSetOptional21.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass10 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        java.lang.Class<?> wildcardClass69 = parameterListOptional68.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        java.lang.Class<?> wildcardClass56 = parameterListOptional55.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass40 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional32 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional33 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional34 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional35 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional36 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional37 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional38 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass39 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass25 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        java.lang.Class<?> wildcardClass71 = contentOptional70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional88 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components87);
        io.swagger.oas.models.Components components89 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional90 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components89);
        java.lang.Class<?> wildcardClass91 = contentOptional90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass10 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional88 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components87);
        java.lang.Class<?> wildcardClass89 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass41 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass14 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass42 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass15 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass35 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass40 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass41 = serverListOptional40.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        java.lang.Class<?> wildcardClass76 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass4 = tagSetOptional3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "#/components/schemas/", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass17 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass18 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass8 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass21 = tagSetOptional20.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass15 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass17 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional70 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components69);
        java.lang.Class<?> wildcardClass71 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass12 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass28 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass13 = strArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass32 = strMap31.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        java.lang.Class<?> wildcardClass63 = parameterListOptional62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass23 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass2 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass38 = strMap37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass15 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass36 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass22 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        java.lang.Class<?> wildcardClass85 = contentOptional84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional32 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional33 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional34 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional35 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional36 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional37 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional38 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass39 = tagSetOptional38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap44 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap45 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass46 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass38 = strMap37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass23 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass28 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        io.swagger.oas.models.Components components83 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional84 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components83);
        io.swagger.oas.models.Components components85 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional86 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components85);
        io.swagger.oas.models.Components components87 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional88 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components87);
        io.swagger.oas.models.Components components89 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional90 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components89);
        io.swagger.oas.models.Components components91 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional92 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components91);
        io.swagger.oas.models.Components components93 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional94 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components93);
        java.lang.Class<?> wildcardClass95 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass44 = strMap43.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        java.lang.Class<?> wildcardClass66 = parameterListOptional65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        java.lang.Class<?> wildcardClass49 = contentOptional48.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass11 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        java.lang.Class<?> wildcardClass64 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass41 = strMap40.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        java.lang.Class<?> wildcardClass56 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass19 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional32 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass33 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass42 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass8 = tagSetOptional7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass9 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass42 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass18 = tagSetOptional17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass19 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass10 = tagSetOptional9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional78 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components77);
        io.swagger.oas.models.Components components79 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional80 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components79);
        io.swagger.oas.models.Components components81 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional82 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components81);
        java.lang.Class<?> wildcardClass83 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional32 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional33 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass34 = tagSetOptional33.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass34 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass11 = tagSetOptional10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "#/components/schemas/", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass8 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass24 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        java.lang.Class<?> wildcardClass67 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass40 = strMap39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass37 = serverListOptional36.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass13 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass18 = tagSetOptional17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass18 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass24 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass21 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass17 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass6 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass17 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "#/components/schemas/", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass20 = strMap19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "#/components/schemas/", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass9 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass32 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        java.lang.Class<?> wildcardClass59 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass15 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap44 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass45 = strMap44.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass44 = strMap43.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[] {};
        javax.ws.rs.Produces produces1 = null;
        javax.ws.rs.Produces produces2 = null;
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.responses.ApiResponses> apiResponsesOptional4 = io.swagger.jaxrs2.OperationParser.getApiResponses(apiResponseArray0, produces1, produces2, components3);
        java.lang.Class<?> wildcardClass5 = apiResponsesOptional4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponseArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(apiResponsesOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass18 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass19 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass9 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass13 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass22 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass10 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass9 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass38 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        io.swagger.oas.models.Components components76 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional77 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components76);
        io.swagger.oas.models.Components components78 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional79 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components78);
        io.swagger.oas.models.Components components80 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional81 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components80);
        java.lang.Class<?> wildcardClass82 = parameterListOptional81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass30 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass28 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass8 = tagSetOptional7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass16 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass43 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass35 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass41 = serverListOptional40.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass18 = tagSetOptional17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass40 = strMap39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        java.lang.Class<?> wildcardClass69 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass16 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass9 = tagSetOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass33 = serverListOptional32.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass20 = tagSetOptional19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass44 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass7 = tagSetOptional6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass44 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass20 = tagSetOptional19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass33 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        java.lang.Class<?> wildcardClass50 = parameterListOptional49.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional70 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional72 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components71);
        java.lang.Class<?> wildcardClass73 = parameterListOptional72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        java.lang.Class<?> wildcardClass62 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass16 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional76 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components75);
        java.lang.Class<?> wildcardClass77 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass35 = strMap34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass20 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass7 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional32 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional33 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional34 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional35 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional36 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional37 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass38 = tagSetOptional37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        java.lang.Class<?> wildcardClass72 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass18 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass19 = serverListOptional18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass19 = tagSetOptional18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass18 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap44 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap45 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap46 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass47 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        java.lang.Class<?> wildcardClass66 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass6 = tagSetOptional5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        io.swagger.oas.models.Components components76 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional77 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components76);
        io.swagger.oas.models.Components components78 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional79 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components78);
        io.swagger.oas.models.Components components80 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional81 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components80);
        io.swagger.oas.models.Components components82 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional83 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components82);
        io.swagger.oas.models.Components components84 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional85 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components84);
        io.swagger.oas.models.Components components86 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional87 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components86);
        io.swagger.oas.models.Components components88 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional89 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components88);
        java.lang.Class<?> wildcardClass90 = parameterListOptional89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass41 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass18 = tagSetOptional17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass17 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass21 = tagSetOptional20.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass18 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass19 = tagSetOptional18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass39 = serverListOptional38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass17 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional70 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional72 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional74 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components73);
        io.swagger.oas.models.Components components75 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional76 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components75);
        io.swagger.oas.models.Components components77 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional78 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components77);
        java.lang.Class<?> wildcardClass79 = parameterArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass18 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass43 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        io.swagger.oas.models.Components components76 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional77 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components76);
        io.swagger.oas.models.Components components78 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional79 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components78);
        java.lang.Class<?> wildcardClass80 = parameterListOptional79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass17 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap44 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap45 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap46 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap47 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap48 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap49 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass50 = strMap49.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass20 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional31 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional32 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional33 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional34 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional35 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional36 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional37 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional38 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional39 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass40 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.lang.String[] strArray1 = new java.lang.String[] { "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass7 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass19 = tagSetOptional18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        java.lang.Class<?> wildcardClass14 = parameterListOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass36 = serverListOptional35.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        io.swagger.oas.models.Components components76 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional77 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components76);
        io.swagger.oas.models.Components components78 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional79 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components78);
        io.swagger.oas.models.Components components80 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional81 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components80);
        io.swagger.oas.models.Components components82 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional83 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components82);
        io.swagger.oas.models.Components components84 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional85 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components84);
        io.swagger.oas.models.Components components86 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional87 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components86);
        io.swagger.oas.models.Components components88 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional89 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components88);
        io.swagger.oas.models.Components components90 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional91 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components90);
        java.lang.Class<?> wildcardClass92 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass39 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass5 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass21 = tagSetOptional20.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[] {};
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap1 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray0);
        java.lang.Class<?> wildcardClass41 = linkArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        java.lang.Class<?> wildcardClass67 = parameterListOptional66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass14 = tagSetOptional13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass24 = strArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        java.lang.Class<?> wildcardClass9 = contentOptional8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "#/components/schemas/", "", "hi!", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional22 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional23 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional24 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional25 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional26 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional27 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional28 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional29 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional30 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass31 = tagSetOptional30.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap39 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap40 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap41 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap42 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap43 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap44 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap45 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap46 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap47 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap48 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass49 = strMap48.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional44 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass45 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass10 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        io.swagger.oas.models.Components components76 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional77 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components76);
        io.swagger.oas.models.Components components78 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional79 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components78);
        io.swagger.oas.models.Components components80 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional81 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components80);
        io.swagger.oas.models.Components components82 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional83 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components82);
        io.swagger.oas.models.Components components84 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional85 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components84);
        io.swagger.oas.models.Components components86 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional87 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components86);
        io.swagger.oas.models.Components components88 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional89 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components88);
        java.lang.Class<?> wildcardClass90 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        io.swagger.oas.models.Components components76 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional77 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components76);
        io.swagger.oas.models.Components components78 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional79 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components78);
        io.swagger.oas.models.Components components80 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional81 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components80);
        io.swagger.oas.models.Components components82 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional83 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components82);
        io.swagger.oas.models.Components components84 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional85 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components84);
        io.swagger.oas.models.Components components86 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional87 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components86);
        java.lang.Class<?> wildcardClass88 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass19 = tagSetOptional18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass13 = tagSetOptional12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass42 = serverListOptional41.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "#/components/schemas/", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass22 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass40 = serverArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass23 = strMap22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass43 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional42 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional43 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass44 = serverListOptional43.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass21 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass12 = tagSetOptional11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        io.swagger.oas.models.Components components76 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional77 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components76);
        io.swagger.oas.models.Components components78 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional79 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components78);
        io.swagger.oas.models.Components components80 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional81 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components80);
        io.swagger.oas.models.Components components82 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional83 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components82);
        io.swagger.oas.models.Components components84 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional85 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components84);
        io.swagger.oas.models.Components components86 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional87 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components86);
        io.swagger.oas.models.Components components88 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional89 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components88);
        io.swagger.oas.models.Components components90 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional91 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components90);
        io.swagger.oas.models.Components components92 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional93 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components92);
        java.lang.Class<?> wildcardClass94 = parameterArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass22 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "hi!", "#/components/schemas/", "hi!", "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass8 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap37 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap38 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass39 = linkArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass18 = tagSetOptional17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "hi!", "#/components/schemas/", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        io.swagger.oas.annotations.media.Content[] contentArray0 = new io.swagger.oas.annotations.media.Content[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional2 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional4 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional6 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional8 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional10 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional12 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional14 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional16 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional18 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional20 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional22 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional24 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional26 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional28 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional30 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional32 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional34 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional36 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional38 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional40 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional42 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional44 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional46 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional48 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional50 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional52 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional54 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional56 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional58 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional60 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional62 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional64 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional66 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional68 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional70 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional72 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<io.swagger.oas.models.media.Content> contentOptional74 = io.swagger.jaxrs2.OperationParser.getContents(contentArray0, components73);
        java.lang.Class<?> wildcardClass75 = contentArray0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(contentOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        java.lang.String[] strArray6 = new java.lang.String[] { "#/components/schemas/", "", "", "hi!", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray6);
        java.lang.Class<?> wildcardClass19 = strArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass21 = tagSetOptional20.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass32 = serverListOptional31.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass22 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional1 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray0);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.lang.String[] strArray4 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray4);
        java.lang.Class<?> wildcardClass22 = strArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.lang.String[] strArray5 = new java.lang.String[] { "#/components/schemas/", "", "#/components/schemas/", "hi!", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass16 = tagSetOptional15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        io.swagger.oas.annotations.Parameter parameter0 = null;
        io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[] { parameter0 };
        io.swagger.oas.models.Components components2 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional3 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components2);
        io.swagger.oas.models.Components components4 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional5 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components4);
        io.swagger.oas.models.Components components6 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional7 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components6);
        io.swagger.oas.models.Components components8 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional9 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components8);
        io.swagger.oas.models.Components components10 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional11 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components10);
        io.swagger.oas.models.Components components12 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional13 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components12);
        io.swagger.oas.models.Components components14 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional15 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components14);
        io.swagger.oas.models.Components components16 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional17 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components16);
        io.swagger.oas.models.Components components18 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional19 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components18);
        io.swagger.oas.models.Components components20 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional21 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components20);
        io.swagger.oas.models.Components components22 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional23 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components22);
        io.swagger.oas.models.Components components24 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional25 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components24);
        io.swagger.oas.models.Components components26 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional27 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components26);
        io.swagger.oas.models.Components components28 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional29 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components28);
        io.swagger.oas.models.Components components30 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional31 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components30);
        io.swagger.oas.models.Components components32 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional33 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components32);
        io.swagger.oas.models.Components components34 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional35 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components34);
        io.swagger.oas.models.Components components36 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional37 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components36);
        io.swagger.oas.models.Components components38 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional39 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components38);
        io.swagger.oas.models.Components components40 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional41 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components40);
        io.swagger.oas.models.Components components42 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional43 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components42);
        io.swagger.oas.models.Components components44 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional45 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components44);
        io.swagger.oas.models.Components components46 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional47 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components46);
        io.swagger.oas.models.Components components48 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional49 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components48);
        io.swagger.oas.models.Components components50 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional51 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components50);
        io.swagger.oas.models.Components components52 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional53 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components52);
        io.swagger.oas.models.Components components54 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional55 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components54);
        io.swagger.oas.models.Components components56 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional57 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components56);
        io.swagger.oas.models.Components components58 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional59 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components58);
        io.swagger.oas.models.Components components60 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional61 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components60);
        io.swagger.oas.models.Components components62 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional63 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components62);
        io.swagger.oas.models.Components components64 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional65 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components64);
        io.swagger.oas.models.Components components66 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional67 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components66);
        io.swagger.oas.models.Components components68 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional69 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components68);
        io.swagger.oas.models.Components components70 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional71 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components70);
        io.swagger.oas.models.Components components72 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional73 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components72);
        io.swagger.oas.models.Components components74 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional75 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components74);
        io.swagger.oas.models.Components components76 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional77 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components76);
        io.swagger.oas.models.Components components78 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional79 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components78);
        io.swagger.oas.models.Components components80 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional81 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components80);
        io.swagger.oas.models.Components components82 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional83 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray1, components82);
        java.lang.Class<?> wildcardClass84 = parameterListOptional83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "#/components/schemas/", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional21 = io.swagger.jaxrs2.OperationParser.getTags(strArray3);
        java.lang.Class<?> wildcardClass22 = tagSetOptional21.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional2 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray1);
        java.lang.Class<?> wildcardClass20 = strArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[] {};
        io.swagger.oas.models.Components components1 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional2 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components1);
        io.swagger.oas.models.Components components3 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional4 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components3);
        io.swagger.oas.models.Components components5 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional6 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components5);
        io.swagger.oas.models.Components components7 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional8 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components7);
        io.swagger.oas.models.Components components9 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional10 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components9);
        io.swagger.oas.models.Components components11 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional12 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components11);
        io.swagger.oas.models.Components components13 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional14 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components13);
        io.swagger.oas.models.Components components15 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional16 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components15);
        io.swagger.oas.models.Components components17 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional18 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components17);
        io.swagger.oas.models.Components components19 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional20 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components19);
        io.swagger.oas.models.Components components21 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional22 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components21);
        io.swagger.oas.models.Components components23 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional24 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components23);
        io.swagger.oas.models.Components components25 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional26 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components25);
        io.swagger.oas.models.Components components27 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional28 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components27);
        io.swagger.oas.models.Components components29 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional30 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components29);
        io.swagger.oas.models.Components components31 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional32 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components31);
        io.swagger.oas.models.Components components33 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional34 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components33);
        io.swagger.oas.models.Components components35 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional36 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components35);
        io.swagger.oas.models.Components components37 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional38 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components37);
        io.swagger.oas.models.Components components39 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional40 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components39);
        io.swagger.oas.models.Components components41 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional42 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components41);
        io.swagger.oas.models.Components components43 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional44 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components43);
        io.swagger.oas.models.Components components45 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional46 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components45);
        io.swagger.oas.models.Components components47 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional48 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components47);
        io.swagger.oas.models.Components components49 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional50 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components49);
        io.swagger.oas.models.Components components51 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional52 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components51);
        io.swagger.oas.models.Components components53 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional54 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components53);
        io.swagger.oas.models.Components components55 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional56 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components55);
        io.swagger.oas.models.Components components57 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional58 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components57);
        io.swagger.oas.models.Components components59 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional60 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components59);
        io.swagger.oas.models.Components components61 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional62 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components61);
        io.swagger.oas.models.Components components63 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional64 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components63);
        io.swagger.oas.models.Components components65 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional66 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components65);
        io.swagger.oas.models.Components components67 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional68 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components67);
        io.swagger.oas.models.Components components69 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional70 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components69);
        io.swagger.oas.models.Components components71 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional72 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components71);
        io.swagger.oas.models.Components components73 = null;
        java.util.Optional<java.util.List<io.swagger.oas.models.parameters.Parameter>> parameterListOptional74 = io.swagger.jaxrs2.OperationParser.getParametersList(parameterArray0, components73);
        java.lang.Class<?> wildcardClass75 = parameterListOptional74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(parameterListOptional74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass17 = tagSetOptional16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap27 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap28 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap29 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap30 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap31 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap32 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap33 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap34 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap35 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap36 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass37 = strMap36.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional18 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional19 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional20 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass21 = strArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "#/components/schemas/" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray5);
        java.lang.Class<?> wildcardClass15 = tagSetOptional14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        io.swagger.oas.annotations.links.Link link0 = null;
        io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[] { link0 };
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap2 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap3 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap4 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap5 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap6 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap7 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap8 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap9 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap10 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap11 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap12 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap13 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap14 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap15 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap16 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap17 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap18 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap19 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap20 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap21 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap22 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap23 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap24 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap25 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.util.Map<java.lang.String, io.swagger.oas.models.links.Link> strMap26 = io.swagger.jaxrs2.OperationParser.getLinks(linkArray1);
        java.lang.Class<?> wildcardClass27 = strMap26.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(linkArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        io.swagger.oas.annotations.servers.Server server0 = null;
        io.swagger.oas.annotations.servers.Server[] serverArray1 = new io.swagger.oas.annotations.servers.Server[] { server0 };
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray1);
        java.lang.Class<?> wildcardClass34 = serverArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        io.swagger.oas.annotations.servers.Server[] serverArray0 = new io.swagger.oas.annotations.servers.Server[] {};
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional1 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional2 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional3 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional4 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional5 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional6 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional7 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional8 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional9 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional10 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional11 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional12 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional13 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional14 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional15 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional16 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional17 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional18 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional19 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional20 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional21 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional22 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional23 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional24 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional25 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional26 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional27 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional28 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional29 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional30 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional31 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional32 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional33 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional34 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional35 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional36 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional37 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional38 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional39 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional40 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.util.Optional<java.util.List<io.swagger.oas.models.servers.Server>> serverListOptional41 = io.swagger.jaxrs2.OperationParser.getServers(serverArray0);
        java.lang.Class<?> wildcardClass42 = serverListOptional41.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverArray0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serverListOptional41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional3 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional4 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional5 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional6 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional7 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional8 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional9 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional10 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional11 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional12 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional13 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional14 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional15 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional16 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.util.Optional<java.util.Set<io.swagger.oas.models.tags.Tag>> tagSetOptional17 = io.swagger.jaxrs2.OperationParser.getTags(strArray2);
        java.lang.Class<?> wildcardClass18 = strArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(tagSetOptional17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }
}

