/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 00:21:33 GMT 2020
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.ArraySchema;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.responses.ApiResponse;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.links.Link;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.parameters.Parameter;
import io.swagger.oas.models.parameters.RequestBody;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      int int0 = 91;
      int int1 = (-1);
      int int2 = 1;
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int3 = 16;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema1).implementation();
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int3).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      MediaType mediaType0 = new MediaType();
      String string2 = ".";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string2, example0);
      Map<String, Example> map0 = null;
      MediaType mediaType2 = mediaType1.examples(map0);
      io.swagger.oas.models.media.Schema<Object> schema2 = new io.swagger.oas.models.media.Schema<Object>();
      MediaType mediaType3 = mediaType2.schema(schema2);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType4 = mediaType3.encoding(hashMap0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0]).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType4, exampleObject0);
      int int4 = (-296);
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema3).implementation();
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int4).when(arraySchema1).maxItems();
      doReturn(int1, int2).when(arraySchema1).minItems();
      doReturn(schema3, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean1).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema1);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String string0 = "java.langjava.lang.Object";
      String string1 = "0";
      ServerVariable[] serverVariableArray0 = new ServerVariable[22];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string0, string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[4];
      Content content0 = null;
      String string0 = null;
      String string1 = "m2U3#KN.G9wfuUnX6i5";
      String string2 = "2*.F%J=OA)";
      String string3 = null;
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[6];
      String string4 = "java.lang";
      String string5 = "io.swagge";
      String string6 = "Subtype of BeanDeserializerFactory (";
      String string7 = "Failed to instantiate class ";
      String string8 = "E$)H0:P)}-cx\"n9b";
      String string9 = "java.lfang";
      String string10 = "bB0aiYy8gs]=PcCgP4M";
      String string11 = "[0R(";
      String string12 = "";
      String string13 = "java.lang";
      String string14 = null;
      String string15 = "l(";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string15).when(linkParameters0).expression();
      doReturn(string8, string12, string7, string13).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string0, string0).when(link0).description();
      doReturn(string8, string9).when(link0).name();
      doReturn(string3, string3).when(link0).operationId();
      doReturn(string8, string6, string5, string9).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      String string16 = "    explode: ";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string1, string2, string3).when(apiResponse0).description();
      doReturn(linkArray0).when(apiResponse0).links();
      doReturn(string3).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[0];
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components0);
      Content content1 = null;
      Produces produces2 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContent(content1, produces2, produces2, components0);
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContents(contentArray0, components0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "*/*";
      String string1 = "java.langio.swagger.oas.models.info.Contact";
      String string2 = "Vu&h";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(license0).name();
      doReturn(string1, string0).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string3 = "java.langjava.lang.Object";
      String string4 = "";
      String string5 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string4).when(link0).description();
      doReturn(string0, string5).when(link0).operationId();
      doReturn(string3).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      Server[] serverArray0 = new Server[5];
      String string6 = "io.swagge";
      String string7 = "=gn6] gs";
      String string8 = "io.swagge";
      String string9 = "6sns_4 h'";
      String string10 = "";
      String string11 = "}";
      String string12 = null;
      String string13 = "java.langio.swagger.oas.models.media.Content";
      ServerVariable[] serverVariableArray0 = new ServerVariable[8];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      serverVariableArray0[0] = serverVariable0;
      io.swagger.oas.annotations.links.Link link1 = null;
      Optional<Link> optional2 = OperationParser.getLink(link1);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      Server[] serverArray0 = new Server[5];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      String string0 = "overriding datatype from {} to {}";
      RequestBody requestBody1 = new RequestBody();
      Components components1 = components0.addRequestBodies(string0, requestBody1);
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(string0, parameter0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Map<String, Link> map0 = components2.getLinks();
      components0.setLinks(map0);
      Map<String, io.swagger.oas.models.media.Schema> map1 = arraySchema0.getProperties();
      MediaType mediaType0 = new MediaType();
      String string1 = "";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string1, example0);
      Map<String, Example> map2 = mediaType1.getExamples();
      MediaType mediaType2 = mediaType1.examples(map2);
      String string2 = "";
      Encoding encoding0 = new Encoding();
      Encoding encoding1 = encoding0.contentType(string0);
      MediaType mediaType3 = mediaType2.addEncoding(string2, encoding1);
      Map<String, Example> map3 = mediaType3.getExamples();
      components0.setExamples(map3);
      Components components3 = components2.schemas(map1);
      Map<String, Parameter> map4 = components2.getParameters();
      Components components4 = components3.parameters(map4);
      Optional<RequestBody> optional3 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "X4s|";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string0, (String) null).when(contact0).name();
      doReturn(string0, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string1 = "\"Ov)D~r38A";
      String string2 = "#/components/schemas/";
      String string3 = "D5^{`^Dr2>gH0K/";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1, (String) null).when(info0).termsOfService();
      doReturn(string2, (String) null).when(info0).title();
      doReturn(string3, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      String string4 = "2:3";
      String[] stringArray0 = new String[9];
      stringArray0[0] = string3;
      stringArray0[1] = string4;
      stringArray0[2] = string4;
      stringArray0[3] = string2;
      stringArray0[4] = string2;
      stringArray0[5] = string1;
      stringArray0[6] = string2;
      stringArray0[7] = string3;
      stringArray0[8] = string0;
      boolean boolean0 = true;
      String string5 = "IGNORE_UNKNOWN";
      boolean boolean1 = true;
      boolean boolean2 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 0;
      String string6 = "Can not construct AnnotatedMethod with null Method";
      String string7 = "io.swagger.jaxrs2.OperationParser";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(stringArray0[6], (String) null).when(schema0).description();
      doReturn(string5, stringArray0[6], (String) null, (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string1, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string6).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string7).when(schema0).minimum();
      doReturn(string2, (String) null).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(stringArray0[2], (String) null).when(schema0).ref();
      doReturn(stringArray0[3], (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[4];
      String string8 = "('true', 'false' or 'null')";
      String string9 = "SimpleModule-";
      String string10 = null;
      String string11 = "#N|{ZOH{dW2IzM]Q";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string8, string7, string3, stringArray0[6], (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(stringArray0[6], string8, string9, string3, (String) null).when(link0).operationId();
      doReturn(stringArray0[4], stringArray0[6], string10, string11).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      io.swagger.oas.models.media.Schema<String> schema0 = new io.swagger.oas.models.media.Schema<String>();
      Map<String, io.swagger.oas.models.media.Schema> map0 = schema0.getProperties();
      Components components1 = components0.schemas(map0);
      String string0 = "";
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(string0, parameter0);
      Components components3 = new Components();
      Example example0 = new Example();
      String string1 = null;
      Example example1 = example0.$ref(string1);
      Example example2 = example1.value(components2);
      Components components4 = components3.addExamples(string0, example2);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      MediaType mediaType0 = new MediaType();
      Encoding encoding0 = new Encoding();
      Map<String, Header> map1 = encoding0.getHeaders();
      Encoding encoding1 = encoding0.headers(map1);
      MediaType mediaType1 = mediaType0.addEncoding(string1, encoding1);
      String string2 = ",";
      encoding1.setStyle(string1);
      String string3 = "io.swagger.oas.models.examples.Example";
      String string4 = "`h^&#abp`$b<L";
      Map<String, Example> map2 = mediaType0.getExamples();
      mediaType0.setExamples(map2);
      String string5 = "";
      String string6 = "5DSj?\\+VWL]WN";
      String string7 = "LEO]kMEu#m$C";
      Server[] serverArray0 = new Server[1];
      String string8 = null;
      String string9 = "?J+G&9}F;icJ";
      String string10 = "@<Bx/sbB)~nLP*N";
      ServerVariable[] serverVariableArray0 = new ServerVariable[5];
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      String string0 = "C'JWs'G;B<e";
      String string1 = "java.langio.swagger.jaxrs2.OperationParser";
      String string2 = "";
      String string3 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string4 = "class ApiResponses {\n";
      String string5 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string6 = "io.swagger.converter.ModelConverterContextImpl";
      String string7 = "java.langio.swagger.oas.models.media.Content";
      String string8 = null;
      String string9 = "f$CI+c^<bLnBi8Ms";
      String string10 = "P";
      String string11 = "io.swagge";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string0, string2, operationParser0.COMMA, string1).when(exampleObject0).externalValue();
      doReturn(string0, operationParser0.COMPONENTS_REF, string3, string4, string5).when(exampleObject0).name();
      doReturn(string6, operationParser0.MEDIA_TYPE, string7, string8, string9).when(exampleObject0).summary();
      doReturn(string10, string0, string5, operationParser0.COMPONENTS_REF, string11).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      ExampleObject[] exampleObjectArray1 = new ExampleObject[5];
      exampleObjectArray1[0] = exampleObjectArray0[0];
      exampleObjectArray1[1] = exampleObject0;
      exampleObjectArray1[2] = exampleObject0;
      exampleObjectArray1[3] = exampleObject0;
      exampleObjectArray1[4] = exampleObject0;
      String string12 = null;
      String string13 = null;
      String string14 = "g;,.G }dA8<H})gu";
      String string15 = "java.langio.swagger.oas.models.media.ArraySchema";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray1).when(content0).examples();
      doReturn(string12, string13, string14, operationParser0.MEDIA_TYPE, string15).when(content0).mediaType();
      contentArray0[0] = content0;
      String string16 = "java.langjava.lang.Object";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      String string17 = "";
      String string18 = "";
      Class<io.swagger.oas.models.media.Content> class0 = io.swagger.oas.models.media.Content.class;
      Class<ApiResponses> class1 = ApiResponses.class;
      Class<io.swagger.oas.models.media.ArraySchema> class2 = io.swagger.oas.models.media.ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string19 = "";
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = false;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      boolean boolean4 = true;
      Explode explode2 = Explode.DEFAULT;
      String string20 = "Q c";
      boolean boolean5 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema1).implementation();
      String string21 = "";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean1, boolean2).when(parameter0).allowEmptyValue();
      doReturn(boolean0, boolean0, boolean3).when(parameter0).allowReserved();
      doReturn((Object) contentArray0, (Object) contentArray0).when(parameter0).content();
      doReturn(boolean0, boolean2, boolean4, boolean5).when(parameter0).deprecated();
      doReturn(string16, string18, operationParser0.COMPONENTS_REF, string17).when(parameter0).description();
      doReturn(explode0, explode1, explode1, explode0, explode2).when(parameter0).explode();
      doReturn(string17, string20, string21).when(parameter0).in();
      doReturn(string18, operationParser0.MEDIA_TYPE, string13).when(parameter0).name();
      doReturn(boolean0, boolean0, boolean4, boolean5).when(parameter0).required();
      doReturn(schema0, schema1).when(parameter0).schema();
      doReturn(string19, string17).when(parameter0).style();
      Components components0 = new Components();
      Map<String, Link> map0 = components0.getLinks();
      Components components1 = components0.links(map0);
      Map<String, Example> map1 = null;
      Components components2 = components1.examples(map1);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.headers(hashMap0);
      Components components3 = components2.addResponses(operationParser0.MEDIA_TYPE, apiResponse1);
      String string22 = "' already had index (";
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      parameterArray0[0] = parameter0;
      String string23 = "java.langjava.lang.Object";
      Example example0 = new Example();
      OperationParser operationParser1 = new OperationParser();
      Example example1 = example0.value(operationParser1);
      String string24 = "]c";
      Example example2 = example1.description(string24);
      Components components4 = components1.addExamples(string23, example2);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      Example example3 = new Example();
      String string25 = "";
      Example example4 = example3.externalValue(string25);
      Example example5 = example4.$ref(operationParser0.MEDIA_TYPE);
      Components components5 = components3.addExamples(string22, example5);
      Optional<Parameter> optional1 = OperationParser.getParameter(parameter0, components5);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[9];
      Class<OperationParser> class0 = OperationParser.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string0 = "#/components/schemas/";
      String string1 = "s=>aL nyG";
      String string2 = "";
      String string3 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = null;
      Components components1 = components0.schemas(map0);
      String string4 = "";
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(string4, parameter0);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components3 = components2.securitySchemes(hashMap0);
      Link link0 = new Link();
      String string5 = "";
      Link link1 = link0.operationRef(string5);
      String string6 = "";
      Link link2 = link1.description(string6);
      Components components4 = components3.addLinks(string4, link2);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = null;
      Optional<List<Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional3 = OperationParser.getContact(contact0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional4 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      String[] stringArray0 = new String[9];
      String string0 = "qfJ/2>0@`Tr>'=";
      stringArray0[0] = string0;
      String string1 = "[ Q\\z SD|6e";
      stringArray0[1] = string1;
      String string2 = "zunv_6?_3EB";
      stringArray0[2] = string2;
      String string3 = "p2";
      stringArray0[3] = string3;
      String string4 = "+bEcx_b/O] U;N-9tT";
      stringArray0[4] = string4;
      String string5 = "";
      stringArray0[5] = string5;
      String string6 = "";
      stringArray0[6] = string6;
      String string7 = " You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`";
      stringArray0[7] = string7;
      String string8 = "";
      stringArray0[8] = string8;
      Optional<Set<Tag>> optional5 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String string0 = "f\"SmN,M*4b7eQe}<gDp";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      boolean boolean0 = true;
      String string1 = "";
      String string2 = "W*(WyFF=/}9z[x";
      boolean boolean1 = false;
      boolean boolean2 = true;
      String string3 = "7Xhl";
      String string4 = "d}(&@8X";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string0).when(externalDocumentation0).description();
      doReturn(string2, string4).when(externalDocumentation0).url();
      String string5 = "Can not deserialize Map key of type %s from String %s: %s";
      int int0 = 231;
      String string6 = null;
      int int1 = 2;
      String string7 = "";
      String string8 = "OBJECT";
      boolean boolean3 = true;
      String string9 = "[reference type, class ";
      String string10 = null;
      boolean boolean4 = false;
      boolean boolean5 = false;
      String string11 = "O'IhHo=L<;%QEO";
      String string12 = "RqPa4a>PS#UxNu^,";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean3).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string2, stringArray0[0], string9, string10).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean2, boolean4).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string5, string3).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, int0).when(schema0).maxProperties();
      doReturn(string6).when(schema0).maximum();
      doReturn(int1, int1).when(schema0).minProperties();
      doReturn(string7).when(schema0).minimum();
      doReturn(string6).when(schema0).pattern();
      doReturn(boolean0, boolean5).when(schema0).readOnly();
      doReturn(string8, string11).when(schema0).ref();
      doReturn(string5, string12).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      boolean boolean6 = true;
      int int2 = (-636);
      int int3 = (-3573);
      Class<MediaType> class0 = MediaType.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      int int4 = 3353;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema2).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int1, int4).when(arraySchema0).maxItems();
      doReturn(int2, int3).when(arraySchema0).minItems();
      doReturn(schema1, schema2).when(arraySchema0).schema();
      doReturn(boolean5).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = new Content[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "I";
      String string1 = "java.langjava.lang.Object";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string0, string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[7];
      String string2 = "header";
      String string3 = "JSgd";
      String string4 = "no description";
      String string5 = "bq'S:p#q";
      String string6 = null;
      String string7 = "!0q";
      String string8 = "FDoPC-M=&";
      String string9 = "java.lang";
      String string10 = "    servers: ";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameters0).name();
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters1).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string0, string2, string2, string0).when(link0).description();
      doReturn(string4, string8, string3, string9, string10).when(link0).name();
      doReturn(string2, string3, string4, string5, string2).when(link0).operationId();
      doReturn(string6, string6, string7, string2, string7).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters1, linkParameters1, linkParameters1).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[0] = contentArray0[5];
      String string11 = "";
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string7, string11).when(requestBody0).description();
      doReturn(boolean0, boolean0).when(requestBody0).required();
      Components components0 = new Components();
      String string12 = "";
      SecurityScheme securityScheme0 = null;
      Components components1 = components0.addSecuritySchemes(string12, securityScheme0);
      String string13 = "b:AMjyLI&(,O";
      Parameter parameter0 = new Parameter();
      Example example0 = new Example();
      Parameter parameter1 = parameter0.addExamples(string12, example0);
      Components components2 = components1.addParameters(string13, parameter1);
      Components components3 = components2.links(map0);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      String string0 = "}";
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = null;
      Components components1 = components0.addSchemas(string0, schema0);
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components2 = components1.securitySchemes(map0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap0 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      Components components3 = components1.responses(hashMap0);
      Components components4 = components2.addResponses(string0, apiResponse0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      String string1 = "java.langio.swagger.jaxrs2.OperationParser";
      String string2 = apiResponse0.toString();
      SecurityScheme securityScheme1 = securityScheme0.scheme(string1);
      Map<String, Parameter> map1 = components4.getParameters();
      Components components5 = components4.parameters(map1);
      SecurityScheme securityScheme2 = securityScheme1.description(string0);
      Components components6 = components4.addSecuritySchemes(string0, securityScheme2);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components6);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[9];
      Class<OperationParser> class0 = OperationParser.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null, (Class) null, (Class) null).when(schema0).implementation();
      String string0 = null;
      ExampleObject[] exampleObjectArray0 = new ExampleObject[8];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[3];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      exampleObjectArray0[4] = exampleObjectArray0[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null, (Object) null).when(content0).examples();
      doReturn(string0, (String) null, (String) null, (String) null).when(content0).mediaType();
      doReturn(schema0, (Schema) null, (Schema) null, (Schema) null).when(content0).schema();
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string1 = "#/components/schemas/";
      String string2 = "s=>aL nyG";
      String string3 = "";
      String string4 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn(string1, string2, (String) null, (String) null, (String) null).when(apiResponse0).description();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[4] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      String[] stringArray0 = new String[1];
      stringArray0[0] = string1;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) stringArray0, (Object) null, (Object) null, (Object) null).when(produces0).value();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = null;
      Components components1 = components0.schemas(map0);
      String string5 = "";
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(string5, parameter0);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Link link0 = new Link();
      String string6 = "";
      Link link1 = link0.operationRef(string6);
      String string7 = "";
      Link link2 = link1.description(string7);
      Components components3 = components1.addLinks(string5, link2);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      Schema schema1 = null;
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema1);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, RequestBody> map0 = components0.getRequestBodies();
      Components components1 = components0.requestBodies(map0);
      Map<String, Parameter> map1 = components1.getParameters();
      Components components2 = components1.parameters(map1);
      String string0 = "b#;p7\"A!{";
      Parameter parameter0 = null;
      Components components3 = components2.addParameters(string0, parameter0);
      Header header0 = new Header();
      Boolean boolean0 = Boolean.FALSE;
      Header header1 = header0.required(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Header header2 = header1.deprecated(boolean1);
      Components components4 = components3.addHeaders(string0, header2);
      Map<String, Example> map2 = components3.getExamples();
      components4.setExamples(map2);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      OperationParser operationParser0 = new OperationParser();
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      Components components0 = new Components();
      Header header0 = new Header();
      Components components1 = components0.addHeaders(operationParser0.COMMA, header0);
      String string0 = "N";
      Link link0 = new Link();
      Components components2 = components1.addLinks(string0, link0);
      String string1 = "E7r";
      Callback callback0 = null;
      Components components3 = components2.addCallbacks(string1, callback0);
      Map<String, SecurityScheme> map0 = components3.getSecuritySchemes();
      Components components4 = components3.securitySchemes(map0);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType0, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      String string0 = "p' ?4";
      Link link0 = new Link();
      Components components1 = components0.addLinks(string0, link0);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components2 = components1.responses(apiResponses0);
      String string1 = "no array delegate creator specified";
      RequestBody requestBody0 = new RequestBody();
      String string2 = "(Jz8";
      RequestBody requestBody1 = requestBody0.$ref(string2);
      Components components3 = components2.addRequestBodies(string1, requestBody1);
      SecurityScheme securityScheme0 = new SecurityScheme();
      String string3 = "3#\"p7 9";
      SecurityScheme securityScheme1 = securityScheme0.bearerFormat(string3);
      String string4 = "";
      SecurityScheme securityScheme2 = securityScheme1.description(string4);
      Components components4 = components3.addSecuritySchemes(string2, securityScheme2);
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      Components components0 = new Components();
      String string0 = "com.fasterxml.jackson.databind.DatabindContext";
      Example example0 = null;
      Components components1 = components0.addExamples(string0, example0);
      String string1 = "q<%1fQ/";
      RequestBody requestBody0 = new RequestBody();
      Components components2 = components1.addRequestBodies(string1, requestBody0);
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = null;
      String string1 = "I9;W";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(externalDocumentation0).description();
      doReturn(string1, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string2 = "Cannot cal setValue() on constuctor paraeter of ";
      String string3 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string1, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string2, (String) null).when(info0).title();
      doReturn(string3).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[4];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      String string0 = "";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string0, callback0);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[5];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      Components components0 = new Components();
      io.swagger.oas.models.media.Schema<String> schema0 = new io.swagger.oas.models.media.Schema<String>();
      Map<String, io.swagger.oas.models.media.Schema> map0 = schema0.getProperties();
      Components components1 = components0.schemas(map0);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "0=G/Z6Um]V\\9T0_D";
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.License> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.License>();
      Components components1 = components0.addSchemas(string0, schema0);
      Map<String, Header> map0 = components0.getHeaders();
      Components components2 = components1.headers(map0);
      Parameter parameter0 = new Parameter();
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      Parameter parameter1 = parameter0.explode(boolean1);
      Components components3 = components2.addParameters(string0, parameter1);
      String string1 = "";
      Parameter parameter2 = parameter0.example(string1);
      Map<String, Example> map1 = parameter1.getExamples();
      Components components4 = components3.examples(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[4];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      String string0 = "#25C/2^Bsr`OUaQ\".";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components1 = components0.addSecuritySchemes(string0, securityScheme0);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components2 = components1.requestBodies(hashMap0);
      Example example0 = new Example();
      Components components3 = components1.addExamples(string0, example0);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components1 = components0.schemas(map0);
      Map<String, Callback> map1 = components1.getCallbacks();
      Components components2 = components1.callbacks(map1);
      String string0 = "eSo";
      Parameter parameter0 = new Parameter();
      Boolean boolean0 = Boolean.FALSE;
      Parameter parameter1 = parameter0.required(boolean0);
      Components components3 = components2.addParameters(string0, parameter1);
      SecurityScheme securityScheme0 = new SecurityScheme();
      String string1 = "L\"6qyfbQv`vk1pr67S";
      SecurityScheme securityScheme1 = securityScheme0.bearerFormat(string1);
      String string2 = null;
      Header header0 = new Header();
      LinkedList<Example> linkedList0 = new LinkedList<Example>();
      Header header1 = header0.examples(linkedList0);
      Example example0 = new Example();
      Header header2 = header1.addExamplesItem(example0);
      Header header3 = header2.explode(boolean0);
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Content content1 = content0.addMediaType(string2, mediaType0);
      Header header4 = header3.content(content1);
      Components components4 = components3.addHeaders(string2, header4);
      SecurityScheme securityScheme2 = securityScheme1.name(string0);
      securityScheme2.setScheme(string1);
      Components components5 = components3.addSecuritySchemes(string0, securityScheme2);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional3 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[9];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components1 = components0.securitySchemes(hashMap0);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components0.getSchemas();
      Components components2 = components1.schemas(map0);
      String string0 = "";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components3 = components2.addSecuritySchemes(string0, securityScheme0);
      Map<String, RequestBody> map1 = components3.getRequestBodies();
      Components components4 = components2.requestBodies(map1);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      Components components5 = components4.addSchemas(string0, arraySchema0);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components5);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Components components0 = new Components();
      Operation operation0 = new Operation();
      Map<String, Callback> map1 = operation0.getCallbacks();
      Components components1 = components0.callbacks(map1);
      String string0 = "no default no-arguments constructor found";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes(string0, securityScheme0);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components3 = components2.parameters(hashMap0);
      String string1 = "__-@3M{]UE80+";
      Parameter parameter0 = null;
      Components components4 = components3.addParameters(string1, parameter0);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Components components0 = null;
      Optional<List<Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components0);
      MediaType mediaType0 = new MediaType();
      io.swagger.oas.models.media.Schema<Tag> schema0 = new io.swagger.oas.models.media.Schema<Tag>();
      mediaType0.setExample(operationParser0.COMPONENTS_REF);
      MediaType mediaType1 = mediaType0.schema(schema0);
      Encoding encoding0 = new Encoding();
      String string0 = "    trace: ";
      Encoding encoding1 = encoding0.style(string0);
      MediaType mediaType2 = mediaType1.addEncoding(operationParser0.MEDIA_TYPE, encoding1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      schema0.setMinimum(bigDecimal0);
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      String string1 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string1);
      io.swagger.oas.models.media.ArraySchema arraySchema3 = arraySchema2.items(schema0);
      mediaType2.addExtension(operationParser0.DEFAULT_DESCRIPTION, arraySchema3);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType2, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components1 = components0.securitySchemes(map0);
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Map<String, Link> map1 = apiResponse0.getLinks();
      Components components2 = components1.links(map1);
      String string0 = "";
      Example example0 = null;
      Parameter parameter1 = new Parameter();
      Parameter parameter2 = parameter1.description(string0);
      Boolean boolean0 = Boolean.TRUE;
      Parameter parameter3 = parameter2.allowEmptyValue(boolean0);
      Parameter parameter4 = parameter3.addExamples(string0, example0);
      Map<String, Example> map2 = parameter4.getExamples();
      Components components3 = components2.examples(map2);
      Components components4 = components2.addExamples(string0, example0);
      io.swagger.oas.models.info.License license0 = new io.swagger.oas.models.info.License();
      io.swagger.oas.models.info.License license1 = license0.name(string0);
      io.swagger.oas.models.info.License license2 = license1.url(string0);
      boolean boolean1 = components4.equals(license2);
      String string1 = "a_s";
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components5 = components4.addSecuritySchemes(string1, securityScheme0);
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "";
      Encoding encoding0 = null;
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      String string1 = mediaType1.toString();
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>();
      Components components1 = components0.links(hashMap0);
      String string2 = "";
      Link link0 = new Link();
      Components components2 = components1.addLinks(string2, link0);
      Map<String, Example> map0 = mediaType0.getExamples();
      Components components3 = components2.examples(map0);
      String string3 = "com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer";
      Example example0 = new Example();
      Example example1 = example0.$ref(string0);
      Components components4 = components3.addExamples(string3, example1);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContent(content0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, RequestBody> map0 = components0.getRequestBodies();
      Components components1 = components0.requestBodies(map0);
      String string0 = "com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer";
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(string0, pathItem0);
      Components components2 = components1.addCallbacks(string0, callback1);
      String string1 = "java.lang";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      Components components3 = components2.addResponses(string1, apiResponse0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = null;
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
      Components components4 = components3.links(map1);
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[9];
      String string0 = "a-u\\gt]To;JpV!t";
      String string1 = "_KKZJOuSE'UHI'";
      String string2 = null;
      String string3 = "";
      String string4 = "";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[4];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      String string5 = "C[I}&Qa1";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string1, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string5, (String) null).when(info0).termsOfService();
      doReturn(string1, (String) null).when(info0).title();
      doReturn(string3).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      OperationParser operationParser0 = new OperationParser();
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      Server[] serverArray0 = new Server[4];
      String string0 = "o1=1XSS)u";
      String string1 = null;
      String string2 = null;
      String string3 = "";
      String string4 = "^";
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      components0.setRequestBodies(hashMap0);
      boolean boolean1 = components0.equals(serverArray0[1]);
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components0);
      int int0 = 573;
      int int1 = (-1);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      Server[] serverArray0 = new Server[4];
      String string0 = "dMz0v}IC@{3w";
      String string1 = "m?=xM|T7+Piy";
      String string2 = ",";
      String string3 = "no description";
      String string4 = "";
      String string5 = "Gh\"\\<K@8~3Wx";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string1, string0).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      Server[] serverArray0 = new Server[7];
      String string0 = "";
      String string1 = "Fit*D3(v~-Mx=t";
      String string2 = "N/A";
      String string3 = "\"RSDe>RuNP,S";
      String string4 = "io.swagger.jaxrs2.OperationParser";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(server0).description();
      doReturn(string3, string2).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "Simple types have no content types; can not call withContenValueHandler()";
      Encoding encoding0 = new Encoding();
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      Components components0 = new Components();
      Map<String, Example> map0 = components0.getExamples();
      MediaType mediaType2 = mediaType1.examples(map0);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType3 = mediaType2.encoding(hashMap0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string0);
      MediaType mediaType4 = mediaType3.schema(arraySchema1);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      boolean boolean2 = true;
      String string0 = "u]Ndx;1rpS{vfB";
      Explode explode0 = Explode.DEFAULT;
      boolean boolean3 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      String string1 = "";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean2, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(explode0, explode0, explode0).when(parameter0).explode();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string0, (String) null).when(parameter0).name();
      doReturn(boolean3, false).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string1).when(parameter0).style();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = null;
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      boolean boolean1 = true;
      String string0 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.FALSE;
      String string1 = "";
      String string2 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string3 = "";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string1).when(parameter0).in();
      doReturn(string2).when(parameter0).name();
      doReturn(boolean0, false).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string3).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      String string4 = "";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string4, callback0);
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "matrix";
      String string1 = "US-ASCII";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string2 = "";
      String string3 = "no description";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string2).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string2).when(info0).termsOfService();
      doReturn(string1, (String) null).when(info0).title();
      doReturn(string3, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      String[] stringArray0 = new String[2];
      String string4 = "not a valid float value";
      stringArray0[0] = string4;
      String string5 = "";
      stringArray0[1] = string5;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      String string6 = "h94wz";
      String string7 = "#/components/schemas/";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string6, (String) null).when(link0).description();
      doReturn(string7, (String) null).when(link0).operationId();
      doReturn(stringArray0[0]).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional3 = OperationParser.getLink(link0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Optional<io.swagger.oas.models.media.Content> optional4 = OperationParser.getContent(content0, produces0, produces0, components0);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      boolean boolean0 = false;
      String string1 = "no description";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = (-465);
      String string2 = "";
      String string3 = "OXT9w`h^";
      String string4 = "Failed to parse @JsonSerializableSchema.schemaItemDefinition value";
      String string5 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(string1, stringArray0[1], (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[0]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string2).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string3).when(schema0).minimum();
      doReturn(string3, (String) null).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(string4, (String) null).when(schema0).ref();
      doReturn(string5).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      OperationParser operationParser0 = new OperationParser();
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string1 = "";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(link0).description();
      doReturn(string0).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      String string2 = ", although was supposed to have one";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      String string3 = "<9DXrN-bXX;K";
      stringArray0[2] = string3;
      stringArray0[3] = string2;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string1;
      boolean boolean0 = false;
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 9;
      String string4 = "javax.validation.constraints.DecimalMax";
      int int1 = 6;
      String string5 = null;
      String string6 = "";
      boolean boolean2 = true;
      String string7 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string1, stringArray0[6]).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[4]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string4).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string5).when(schema0).minimum();
      doReturn(string6).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(string3, (String) null).when(schema0).ref();
      doReturn(string7, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String string0 = "f\"SmN,M*4b7eQe}<gDp";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      boolean boolean0 = true;
      String string1 = "";
      String string2 = "W*(WyFF=/}9z[x";
      boolean boolean1 = false;
      boolean boolean2 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string3 = "Can not deserialize Map key of type %s from String %s: %s";
      int int0 = 231;
      String string4 = null;
      int int1 = 2;
      String string5 = "";
      String string6 = "OBJECT";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string2, stringArray0[0], (String) null, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean2, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string3, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string4).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string5).when(schema0).minimum();
      doReturn(string4).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(string6, (String) null).when(schema0).ref();
      doReturn(string3, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[0];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      boolean boolean3 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "Non-standard token '";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      boolean boolean0 = true;
      String string1 = "Tjh2)u";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string2 = "";
      int int0 = (-1762);
      int int1 = 563;
      String string3 = "Attempted to unwrap single value array for single '%s' value but there was more than a single value in the array";
      String string4 = "com.fasterxml.jackson.databind.DeserializationFeature";
      String string5 = "unq?Xgd";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string0, (String) null).when(schema0).description();
      doReturn(string0, string1, (String) null, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string1).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string3).when(schema0).minimum();
      doReturn(string4, (String) null).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(stringArray0[0], (String) null).when(schema0).ref();
      doReturn(string5, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = OperationParser.getSchemaFromAnnotation(schema0);
      String string6 = null;
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(link0).description();
      doReturn(stringArray0[0], (String) null).when(link0).operationId();
      doReturn(string6).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      Server[] serverArray0 = new Server[6];
      String string7 = "{kzQz)1b^rCNPEPT{h";
      String string8 = "o2fgKIe(8Cq!K[Pf";
      String string9 = ";[c8nuvqyA<qQ1,";
      String string10 = "";
      String string11 = "*/*";
      String string12 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string7).when(server0).description();
      doReturn(string4, string10).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string0 = "";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string0, example0);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = null;
      Components components2 = components1.responses(map0);
      Operation operation0 = new Operation();
      PathItem pathItem0 = new PathItem();
      List<Parameter> list0 = pathItem0.getParameters();
      Operation operation1 = operation0.parameters(list0);
      Map<String, Callback> map1 = operation1.getCallbacks();
      Components components3 = components2.callbacks(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "#a71sV\"nH=^t~V";
      String string1 = "java.lang";
      String string2 = "[no message for ";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string2, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string2, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = new MediaType();
      String string0 = null;
      Example example0 = new Example();
      String string1 = "java.lang";
      Example example1 = example0.$ref(string1);
      MediaType mediaType1 = mediaType0.addExamples(string0, example1);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      String string2 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string2);
      MediaType mediaType2 = mediaType1.schema(arraySchema1);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      int int0 = Integer.MAX_VALUE;
      int int1 = 63;
      int int2 = 1526;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema2 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema2).maxItems();
      doReturn(int1, int2).when(arraySchema2).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema2).schema();
      doReturn(boolean0, false).when(arraySchema2).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema2);
      String string3 = "";
      String string4 = "Can not override null serializer";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string3).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string4, (String) null).when(info0).termsOfService();
      doReturn(string0).when(info0).title();
      doReturn(operationParser0.COMMA, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      Server[] serverArray0 = new Server[4];
      String string5 = "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig";
      String string6 = "BeanSerializer for ";
      String string7 = null;
      String string8 = "com.fasterxml.jackson.databind.node.TreeTraversingParser";
      String string9 = "java.lang";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string4, string5).when(server0).description();
      doReturn(string7, string8, operationParser0.COMPONENTS_REF).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      String string0 = "'d94Zw]=TK,5!N";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string0, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      OperationParser operationParser0 = new OperationParser();
      Content[] contentArray0 = new Content[6];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[5];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Components components0 = new Components();
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = null;
      Components components1 = components0.addResponses(operationParser0.COMMA, apiResponse0);
      Encoding encoding0 = new Encoding();
      Map<String, Header> map0 = encoding0.getHeaders();
      Components components2 = components1.headers(map0);
      io.swagger.oas.models.media.Schema<String> schema0 = new io.swagger.oas.models.media.Schema<String>();
      Map<String, io.swagger.oas.models.media.Schema> map1 = schema0.getProperties();
      Components components3 = components2.schemas(map1);
      int int0 = 3226;
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>(int0, int0);
      Components components4 = components3.securitySchemes(hashMap0);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components4);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "";
      String string1 = "% )F<%6,Q=},";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string0, string0).when(link0).operationId();
      doReturn(string1, string1, (String) null, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      io.swagger.oas.annotations.links.Link link1 = null;
      Optional<Link> optional1 = OperationParser.getLink(link1);
      String string2 = "9>cR";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(license0).name();
      doReturn(string2, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license0);
      OperationParser operationParser0 = new OperationParser();
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[2];
      linkArray0[0] = link1;
      linkArray0[1] = link0;
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      Server[] serverArray0 = new Server[8];
      String string3 = ":_T&Ck";
      String string4 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.MEDIA_TYPE, string0).when(server0).description();
      doReturn(string4).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string0 = "#/components/schemas/";
      String string1 = "s=>aL nyG";
      String string2 = "";
      String string3 = "!FP.QJAq02d6|k";
      String string4 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = null;
      Components components1 = components0.schemas(map0);
      String string5 = "";
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(string5, parameter0);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components3 = components2.securitySchemes(hashMap0);
      Link link0 = new Link();
      String string6 = "";
      Link link1 = link0.operationRef(string6);
      String string7 = "";
      Link link2 = link1.description(string7);
      Components components4 = components3.addLinks(string5, link2);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "Q$";
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      String string1 = "T<";
      Link link0 = new Link();
      Components components1 = components0.addLinks(string1, link0);
      io.swagger.oas.models.media.Schema<OperationParser> schema0 = new io.swagger.oas.models.media.Schema<OperationParser>();
      Components components2 = components1.addSchemas(string1, schema0);
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      Components components3 = components2.securitySchemes(map0);
      Operation operation0 = new Operation();
      boolean boolean1 = true;
      Boolean boolean2 = Boolean.valueOf(boolean1);
      Operation operation1 = operation0.deprecated(boolean2);
      String string2 = "";
      Operation operation2 = operation1.addTagsItem(string2);
      Map<String, Callback> map1 = operation2.getCallbacks();
      components1.setCallbacks(map1);
      Map<String, Example> map2 = components1.getExamples();
      Components components4 = components3.examples(map2);
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      String string3 = "m_r#%;t?BHYd.<>[k)";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string3, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      String string4 = "qv,UUC[{;?T*6~')";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.FALSE;
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      String string0 = "";
      Encoding encoding0 = null;
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      String string1 = mediaType1.toString();
      String string2 = "tZ>iZ<";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
      Content content0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>();
      Components components1 = components0.links(hashMap0);
      String string3 = "";
      Link link0 = new Link();
      Components components2 = components1.addLinks(string3, link0);
      Map<String, Example> map0 = mediaType0.getExamples();
      Components components3 = components2.examples(map0);
      String string4 = "com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer";
      Example example0 = new Example();
      Components components4 = components3.addExamples(string4, example0);
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContent(content0, produces0, produces0, components4);
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Optional<Parameter> optional2 = OperationParser.getParameter(parameter0, components4);
      Content[] contentArray0 = null;
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContents(contentArray0, components1);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = new MediaType();
      String string0 = null;
      Example example0 = new Example();
      String string1 = "java.lang";
      Example example1 = example0.$ref(string1);
      MediaType mediaType1 = mediaType0.addExamples(string0, example1);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      String string2 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string2);
      MediaType mediaType2 = mediaType1.schema(arraySchema1);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      int int0 = (-963);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema2 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema2).maxItems();
      doReturn(int0, int0).when(arraySchema2).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema2).schema();
      doReturn(boolean0, false).when(arraySchema2).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema2);
      String string3 = "";
      String string4 = "J%#XDHC*Zp";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string3).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string4, (String) null).when(info0).title();
      doReturn(string1, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      Server[] serverArray0 = new Server[4];
      String string5 = "uP%wB?^\"~-$X-";
      String string6 = "}yPVo=lY.";
      String string7 = "F~-[97\\W";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string0).when(server0).description();
      doReturn(string4, string6).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = new Content[0];
      boolean boolean2 = true;
      String string0 = null;
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.TRUE;
      String string1 = "";
      boolean boolean3 = true;
      Schema schema0 = null;
      String string2 = "";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(arraySchema0).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean2, false).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(explode0, explode0, explode1).when(parameter0).explode();
      doReturn(string1).when(parameter0).in();
      doReturn(string0).when(parameter0).name();
      doReturn(boolean3, false).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string2).when(parameter0).style();
      Components components0 = new Components();
      String string3 = "cA&'-@[<Wn@";
      Link link0 = new Link();
      Components components1 = components0.addLinks(string3, link0);
      Map<String, io.swagger.oas.models.media.Schema> map0 = components1.getSchemas();
      Components components2 = components1.schemas(map0);
      Parameter parameter1 = new Parameter();
      Map<String, Example> map1 = parameter1.getExamples();
      Components components3 = components2.examples(map1);
      String string4 = null;
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.description(string4);
      Map<String, Header> map2 = link0.getHeaders();
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.headers(map2);
      Components components4 = components3.addResponses(string4, apiResponse2);
      Optional<Parameter> optional0 = OperationParser.getParameter(parameter0, components4);
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map3 = OperationParser.getLinkParameters(linkParameters0);
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
      OperationParser operationParser0 = new OperationParser();
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "v";
      stringArray0[0] = string0;
      String string1 = "io.swagger.util.DeserializationModule";
      stringArray0[1] = string1;
      String string2 = "*/*";
      stringArray0[2] = string2;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      String string3 = "";
      String string4 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(server0).description();
      doReturn(string4).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      boolean boolean0 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string1, (String) null).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap0 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      Components components1 = components0.responses(hashMap0);
      HashMap<String, Link> hashMap1 = new HashMap<String, Link>();
      Components components2 = components1.links(hashMap1);
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem(stringArray0[1], pathItem0);
      String string5 = "<07cEEMP|-dRdRo[";
      Callback callback2 = new Callback();
      Components components3 = components2.addCallbacks(stringArray0[1], callback2);
      Operation operation0 = new Operation();
      Map<String, Callback> map0 = operation0.getCallbacks();
      Components components4 = components3.callbacks(map0);
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components4);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "oF";
      String string1 = "!0)/AB^CNH+Cj~?PG";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string1, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = new MediaType();
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      MediaType mediaType1 = mediaType0.examples(hashMap0);
      String string2 = "!|1^";
      MediaType mediaType2 = mediaType1.example(string2);
      String string3 = "`(J\"vD1:&r";
      Encoding encoding0 = new Encoding();
      Boolean boolean0 = Boolean.TRUE;
      Encoding encoding1 = encoding0.explode(boolean0);
      Map<String, Header> map0 = encoding1.getHeaders();
      Encoding encoding2 = encoding1.headers(map0);
      Encoding encoding3 = encoding2.contentType(string2);
      Encoding encoding4 = encoding3.allowReserved(boolean0);
      MediaType mediaType3 = mediaType0.addEncoding(string3, encoding4);
      Map<String, Encoding> map1 = null;
      MediaType mediaType4 = mediaType2.encoding(map1);
      String string4 = "e";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string4, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = null;
      Content[] contentArray0 = new Content[4];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null, (Object) null, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      boolean boolean1 = true;
      String string0 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.FALSE;
      String string1 = "";
      String string2 = "";
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null).when(schema0).implementation();
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string3 = "";
      boolean boolean2 = true;
      boolean boolean3 = true;
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[9];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean2).when(parameter0).allowEmptyValue();
      doReturn(boolean0, boolean3).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1, boolean0).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string1).when(parameter0).in();
      doReturn(string2).when(parameter0).name();
      doReturn(boolean0, boolean1).when(parameter0).required();
      doReturn(schema0, (Schema) null).when(parameter0).schema();
      doReturn(string3).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      String string4 = "";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string4, callback0);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components1);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      io.swagger.oas.models.media.Schema<String> schema0 = new io.swagger.oas.models.media.Schema<String>();
      Map<String, io.swagger.oas.models.media.Schema> map0 = schema0.getProperties();
      Components components1 = components0.schemas(map0);
      String string0 = "";
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(string0, parameter0);
      Components components3 = components2.addSchemas(string0, schema0);
      Example example0 = new Example();
      String string1 = null;
      Example example1 = example0.$ref(string1);
      Example example2 = example1.value(components2);
      Components components4 = components3.addExamples(string0, example2);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      MediaType mediaType0 = new MediaType();
      Encoding encoding0 = new Encoding();
      Map<String, Header> map1 = encoding0.getHeaders();
      Encoding encoding1 = encoding0.headers(map1);
      MediaType mediaType1 = mediaType0.addEncoding(string1, encoding1);
      String string2 = ",";
      String string3 = "io.swagger.oas.models.examples.Example";
      String string4 = "`h^&#abp`$b<L";
      String string5 = "";
      String string6 = "5DSj?\\+VWL]WN";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(exampleObject0).externalValue();
      doReturn(string2, string4, string3, string5).when(exampleObject0).name();
      doReturn(string6, (String) null).when(exampleObject0).summary();
      doReturn(string4, (String) null, (String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType1, exampleObject0);
      Server[] serverArray0 = new Server[1];
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String string0 = "@:zY@6S";
      String string1 = null;
      String string2 = "z\"@Uka\\I%L2QY`,a|q";
      ServerVariable[] serverVariableArray0 = new ServerVariable[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(server0).description();
      doReturn(string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      OperationParser operationParser0 = new OperationParser();
      ApiResponse[] apiResponseArray0 = new ApiResponse[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string3 = "";
      String string4 = "eWBF9bQoQi<j(%c;G!j";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string3).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, RequestBody> map0 = components0.getRequestBodies();
      Components components1 = components0.requestBodies(map0);
      Header header0 = new Header();
      Components components2 = components1.addHeaders(operationParser0.COMPONENTS_REF, header0);
      Link link0 = new Link();
      Link link1 = link0.$ref(operationParser0.MEDIA_TYPE);
      Components components3 = components2.addLinks(operationParser0.COMMA, link1);
      Map<String, Example> map1 = components1.getExamples();
      Components components4 = components3.examples(map1);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String string0 = "@:zY@6S";
      String string1 = null;
      String string2 = "java.langjava.lang.Object";
      ServerVariable[] serverVariableArray0 = new ServerVariable[2];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(server0).description();
      doReturn(string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      OperationParser operationParser0 = new OperationParser();
      ApiResponse[] apiResponseArray0 = new ApiResponse[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string3 = "";
      String string4 = "eWBF9bQoQi<j(%c;G!j";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string3).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, RequestBody> map0 = components0.getRequestBodies();
      Components components1 = components0.requestBodies(map0);
      Header header0 = new Header();
      Components components2 = components1.addHeaders(operationParser0.COMPONENTS_REF, header0);
      Link link0 = new Link();
      Link link1 = link0.$ref(operationParser0.MEDIA_TYPE);
      Components components3 = components2.addLinks(operationParser0.COMMA, link1);
      Map<String, Example> map1 = components1.getExamples();
      Components components4 = components3.examples(map1);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[4];
      Content content0 = null;
      String string0 = null;
      String string1 = "m2U3#KN.G9wfuUnX6i5";
      String string2 = "2*.F%J=OA)";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string1, string2, (String) null).when(apiResponse0).description();
      doReturn((Object) null, (Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[0];
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components0);
      Content content1 = null;
      Produces produces2 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContent(content1, produces2, produces2, components0);
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContents(contentArray0, components0);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      String string0 = "";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string0, example0);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = null;
      Components components2 = components1.responses(map0);
      Operation operation0 = new Operation();
      PathItem pathItem0 = new PathItem();
      List<Parameter> list0 = pathItem0.getParameters();
      Operation operation1 = operation0.parameters(list0);
      Map<String, Callback> map1 = operation1.getCallbacks();
      Components components3 = components2.callbacks(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = "..0n#;+I";
      String string1 = ",}sFI_Q@4KBOZ";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string2 = "";
      String string3 = "}>;GzvB}w}As5y";
      String string4 = "8'`lH<jThs]9";
      String string5 = "java.lang";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(contact0).email();
      doReturn(string0, string4).when(contact0).name();
      doReturn(string3, string5).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string6 = "UbXlC'e[Bk6\"w\\\"a{)";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      String string7 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string8 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact1).when(info0).contact();
      doReturn(string6, string7).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string6, string8).when(info0).termsOfService();
      doReturn(string0, string5).when(info0).title();
      doReturn(string0, string4).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      String[] stringArray0 = null;
      boolean boolean0 = true;
      String string9 = ">R[>Ddr%)bvL&k]-";
      String string10 = "";
      boolean boolean1 = false;
      String string11 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string8).when(externalDocumentation0).description();
      doReturn(string11).when(externalDocumentation0).url();
      String string12 = "KpKp";
      int int0 = 100;
      String string13 = "+hz@*N:lif<hPC";
      String string14 = "*I<o/yu!>RuX%u";
      String string15 = "d)B?n6~";
      String string16 = null;
      String string17 = "";
      String string18 = "";
      String string19 = "java.langjava.lang.Object";
      String string20 = "!XLW3\"6bQQ";
      boolean boolean2 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string17).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string9, string18).when(schema0).description();
      doReturn(string9, string10, string19, (String) null).when(schema0).example();
      doReturn(boolean0, boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string12, string20).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, 0).when(schema0).maxProperties();
      doReturn(string13).when(schema0).maximum();
      doReturn(int0, int0).when(schema0).minProperties();
      doReturn(string14).when(schema0).minimum();
      doReturn(string3, string20).when(schema0).pattern();
      doReturn(boolean0, boolean2).when(schema0).readOnly();
      doReturn(string15, string16).when(schema0).ref();
      doReturn(string16).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[4];
      String string21 = "com.fasterxml.jackson.databind.Module";
      String string22 = "Can not coerce a floating-point value ('%s') into %s; enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow";
      String string23 = "    externalValue: ";
      String string24 = "";
      String string25 = null;
      String string26 = "";
      String string27 = "' has value that is not of type ArrayNode (but ";
      String string28 = "";
      String string29 = "";
      String string30 = "R'SjbI!q[l";
      String string31 = "com.fasterxml.jackson.annotation.ObjectIdGenerators$Base";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(linkParameters1).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string9, string21, string22, string23, string27).when(link0).description();
      doReturn(string28, string29, string24, string30).when(link0).name();
      doReturn(string10, string24, string16, string2).when(link0).operationId();
      doReturn(string22, string2, string25, string26, string31).when(link0).operationRef();
      doReturn(linkParameters1, linkParameters1, linkParameters1, linkParameters1).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      String string0 = "@:zY@6S";
      String string1 = null;
      String string2 = "X0r,Xf1\"`?{6";
      ServerVariable[] serverVariableArray0 = new ServerVariable[6];
      String string3 = "xS$]^>BROw.b-Bx";
      String string4 = "java.langjava.lang.Object";
      String string5 = "l#+#^n=;yK&om&a1@L";
      String string6 = "class ServerVariables {\n";
      String string7 = "IzmPOJ@q4U2JUDPY";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string4, string5, string3, string2).when(serverVariable0).description();
      doReturn(string6, string2, string0, string7, string7).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(server0).description();
      doReturn(string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      OperationParser operationParser0 = new OperationParser();
      ApiResponse[] apiResponseArray0 = new ApiResponse[4];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string8 = "";
      String string9 = "eWBF9bQoQi<j(%c;G!j";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      Map<String, RequestBody> map0 = components0.getRequestBodies();
      Components components1 = components0.requestBodies(map0);
      Header header0 = new Header();
      Components components2 = components1.addHeaders(operationParser0.COMPONENTS_REF, header0);
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "..0n#;+I";
      String string1 = ",}sFI_Q@4KBOZ";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      String string2 = "";
      String string3 = "}>;GzvB}w}As5y";
      String string4 = "8'`lH<jThs]9";
      String string5 = "java.lang";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(contact0).email();
      doReturn(string0, string4).when(contact0).name();
      doReturn(string3, string5).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      String string6 = "UbXlC'e[Bk6\"w\\\"a{)";
      String string7 = null;
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(contact1).email();
      doReturn(string7).when(contact1).name();
      doReturn(string3, (String) null).when(contact1).url();
      String string8 = null;
      String string9 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(license0).name();
      doReturn(string9).when(license0).url();
      String string10 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact1).when(info0).contact();
      doReturn(string6, string8).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string6, string10).when(info0).termsOfService();
      doReturn(string0, string5).when(info0).title();
      doReturn(string0, string4).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      String[] stringArray0 = null;
      boolean boolean0 = true;
      String string11 = ">R[>Ddr%)bvL&k]-";
      String string12 = "";
      boolean boolean1 = false;
      String string13 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string10).when(externalDocumentation0).description();
      doReturn(string13).when(externalDocumentation0).url();
      String string14 = "KpKp";
      int int0 = 100;
      String string15 = "+hz@*N:lif<hPC";
      String string16 = "*I<o/yu!>RuX%u";
      String string17 = "d)B?n6~";
      String string18 = null;
      String string19 = "";
      String string20 = "";
      String string21 = "java.langjava.lang.Object";
      String string22 = "!XLW3\"6bQQ";
      boolean boolean2 = false;
      String string23 = "";
      int int1 = 0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string19).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string11, string20).when(schema0).description();
      doReturn(string11, string12, string21, string23).when(schema0).example();
      doReturn(boolean0, boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string14, string22).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, int1).when(schema0).maxProperties();
      doReturn(string15).when(schema0).maximum();
      doReturn(int0, int0).when(schema0).minProperties();
      doReturn(string16).when(schema0).minimum();
      doReturn(string3, string22).when(schema0).pattern();
      doReturn(boolean0, boolean2).when(schema0).readOnly();
      doReturn(string17, string18).when(schema0).ref();
      doReturn(string18).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = OperationParser.getSchemaFromAnnotation(schema0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[4];
      String string24 = "com.fasterxml.jackson.databind.Module";
      String string25 = "Can not coerce a floating-point value ('%s') into %s; enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow";
      String string26 = "    externalValue: ";
      String string27 = "";
      String string28 = null;
      String string29 = "";
      String string30 = "' has value that is not of type ArrayNode (but ";
      String string31 = "";
      String string32 = "";
      String string33 = "R'SjbI!q[l";
      String string34 = "com.fasterxml.jackson.annotation.ObjectIdGenerators$Base";
      String string35 = "";
      String string36 = "ng3^ bS;P-mOn";
      String string37 = "java.lang";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(linkParameters1).expression();
      doReturn(string35, string36, string7, string37, (String) null).when(linkParameters1).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string11, string24, string25, string26, string30).when(link0).description();
      doReturn(string31, string32, string27, string33).when(link0).name();
      doReturn(string12, string27, string18, string2).when(link0).operationId();
      doReturn(string25, string2, string28, string29, string34).when(link0).operationRef();
      doReturn(linkParameters1, linkParameters1, linkParameters1, linkParameters1).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[4];
      Content content0 = null;
      String string0 = null;
      String string1 = "m2U3#KN.G9wfuUnX6i5";
      String string2 = "2*.F%J=OA)";
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[8];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      String string3 = "no description";
      String string4 = "9|+\"~^Itop#Lgkz'";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string1, string2, string0).when(apiResponse0).description();
      doReturn(linkArray0).when(apiResponse0).links();
      doReturn(string3, string1).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[0];
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components0);
      Content content1 = null;
      Produces produces2 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContent(content1, produces2, produces2, components0);
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContents(contentArray0, components0);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      Class<io.swagger.oas.models.info.Contact> class0 = io.swagger.oas.models.info.Contact.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      String string0 = "";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string0, example0);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = null;
      Components components2 = components1.responses(map0);
      Operation operation0 = new Operation();
      PathItem pathItem0 = new PathItem();
      List<Parameter> list0 = pathItem0.getParameters();
      Operation operation1 = operation0.parameters(list0);
      Map<String, Callback> map1 = operation1.getCallbacks();
      Components components3 = components2.callbacks(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(license0).name();
      doReturn(string0).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      String string1 = "Iif{)7)4-\"cQ#}4(6";
      String string2 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string1).when(link0).description();
      doReturn(string1, string2).when(link0).operationId();
      doReturn(string2).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<Link> optional1 = OperationParser.getLink(link0);
      Server[] serverArray0 = new Server[5];
      String string3 = "com.fasterxml.jackson.databind.deser.BeanDeserializerBase";
      String string4 = "3(hO4C5CVR5pQ0#>6";
      String string5 = "";
      String string6 = "<7";
      String string7 = "";
      String string8 = "class ByteArraySchema {\n";
      ServerVariable[] serverVariableArray0 = new ServerVariable[1];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(serverVariable0).description();
      doReturn((String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null, (String) null).when(server0).description();
      doReturn(string6, string7, (String) null, (String) null).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(serverArray0[1]);
      MediaType mediaType0 = new MediaType();
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType1 = mediaType0.encoding(hashMap0);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      io.swagger.oas.models.media.Schema<OperationParser> schema0 = new io.swagger.oas.models.media.Schema<OperationParser>();
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      MediaType mediaType2 = mediaType1.schema(arraySchema1);
      Encoding encoding0 = new Encoding();
      Components components0 = new Components();
      Map<String, Header> map0 = components0.getHeaders();
      Encoding encoding1 = encoding0.headers(map0);
      Encoding encoding2 = encoding1.style(string0);
      MediaType mediaType3 = mediaType2.addEncoding(string8, encoding2);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional4 = OperationParser.getMediaType(mediaType3, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      io.swagger.oas.models.media.Schema<String> schema0 = new io.swagger.oas.models.media.Schema<String>();
      Map<String, io.swagger.oas.models.media.Schema> map0 = schema0.getProperties();
      Components components1 = components0.schemas(map0);
      String string0 = "";
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(string0, parameter0);
      Components components3 = components2.addSchemas(string0, schema0);
      Example example0 = new Example();
      String string1 = null;
      Example example1 = example0.$ref(string1);
      Example example2 = example1.value(components2);
      Components components4 = components1.addParameters(string1, parameter0);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      MediaType mediaType0 = new MediaType();
      Encoding encoding0 = new Encoding();
      Map<String, Header> map1 = encoding0.getHeaders();
      Encoding encoding1 = encoding0.headers(map1);
      MediaType mediaType1 = mediaType0.addEncoding(string1, encoding1);
      String string2 = ",";
      String string3 = "io.swagger.oas.models.examples.Example";
      String string4 = "`h^&#abp`$b<L";
      String string5 = "";
      String string6 = "5DSj?\\+VWL]WN";
      String string7 = "java.lang";
      String string8 = null;
      String string9 = "    schemas: ";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string7).when(exampleObject0).externalValue();
      doReturn(string2, string4, string3).when(exampleObject0).name();
      doReturn(string6, string1).when(exampleObject0).summary();
      doReturn(string4, string8).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType1, exampleObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      MediaType mediaType0 = new MediaType();
      String string0 = null;
      Example example0 = new Example();
      String string1 = "java.lang";
      Example example1 = example0.$ref(string1);
      MediaType mediaType1 = mediaType0.addExamples(string0, example1);
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      String string2 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string2);
      MediaType mediaType2 = mediaType1.schema(arraySchema1);
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      int int0 = (-963);
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Schema schema1 = null;
      ArraySchema arraySchema2 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema2).maxItems();
      doReturn(int0, int0).when(arraySchema2).minItems();
      doReturn(schema0, schema1).when(arraySchema2).schema();
      doReturn(boolean0, boolean0).when(arraySchema2).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      String string0 = "I";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string0, string0).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[7];
      String string1 = "header";
      String string2 = "JSgd";
      String string3 = "no description";
      String string4 = "bq'S:p#q";
      String string5 = null;
      String string6 = "!0q";
      String string7 = "2d3K";
      String string8 = "io.swagger.jaxrs2.OperationParser";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters0).name();
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string0, string1, string1, string0).when(link0).description();
      doReturn(string7, string7, string0, string3, string8).when(link0).name();
      doReturn(string1, string2, string3, string4, string1).when(link0).operationId();
      doReturn(string5, string5, string6, string1, string6).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string6, string6).when(requestBody0).description();
      doReturn(boolean0, boolean0).when(requestBody0).required();
      Components components0 = new Components();
      String string9 = "";
      SecurityScheme securityScheme0 = null;
      Components components1 = components0.addSecuritySchemes(string9, securityScheme0);
      String string10 = "b:AMjyLI&(,O";
      Parameter parameter0 = new Parameter();
      Example example0 = new Example();
      Parameter parameter1 = parameter0.addExamples(string9, example0);
      Components components2 = components1.addParameters(string10, parameter1);
      Components components3 = components2.links(map0);
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[4];
      Content content0 = null;
      String string0 = null;
      String string1 = "m2U3#KN.G9wfuUnX6i5";
      String string2 = "2*.F%J=OA)";
      String string3 = null;
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[6];
      String string4 = "ETd";
      String string5 = "io.swagge";
      String string6 = "_oo/H";
      String string7 = "#t7x%*_)6@\"";
      String string8 = "#/components/schemas/";
      String string9 = "java.langjava.lang.Object";
      String string10 = "Ukn3|;6!l.9";
      String string11 = "3#6e";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string0, string5, string6, string5).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string4, string7, string8, string9, string7).when(link0).operationId();
      doReturn(string7, string1, string10, string5, string11).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      String string12 = "    explode: ";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string1, string2, string3).when(apiResponse0).description();
      doReturn(linkArray0).when(apiResponse0).links();
      doReturn(string3).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[1];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      int int0 = (-1675);
      int int1 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "_EaDtoGG]nf'WIGR_^";
      stringArray0[2] = string2;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      MediaType mediaType0 = new MediaType();
      String string3 = ".";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string3, example0);
      Map<String, Example> map0 = null;
      MediaType mediaType2 = mediaType1.examples(map0);
      io.swagger.oas.models.media.Schema<Object> schema1 = new io.swagger.oas.models.media.Schema<Object>();
      MediaType mediaType3 = mediaType2.schema(schema1);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType4 = mediaType3.encoding(hashMap0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(stringArray0[2], (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType4, exampleObject0);
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = null;
      Content[] contentArray0 = new Content[4];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[3];
      String string0 = "\"0l||iu^m03T>";
      String string1 = "io.swagge";
      String string2 = "b&8$.Ycb";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string1, string2, string1, string2).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      boolean boolean1 = true;
      String string3 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.FALSE;
      String string4 = "";
      String string5 = "";
      Class<io.swagger.oas.models.ExternalDocumentation> class0 = io.swagger.oas.models.ExternalDocumentation.class;
      Class<String> class1 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string6 = "";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean1).when(parameter0).allowEmptyValue();
      doReturn(boolean0, boolean1).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1, boolean1).when(parameter0).deprecated();
      doReturn(string3).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string4).when(parameter0).in();
      doReturn(string5).when(parameter0).name();
      doReturn(boolean0, boolean1).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string6).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      String string7 = "";
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks(string7, callback0);
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components1);
      MediaType mediaType0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObjectArray0[2]);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      Class<io.swagger.oas.models.info.Contact> class0 = io.swagger.oas.models.info.Contact.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "Can only call after BeanDeserializer has been resolved";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      String string1 = "";
      Example example0 = new Example();
      Components components1 = components0.addExamples(string1, example0);
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = null;
      Components components2 = components1.responses(map0);
      Operation operation0 = new Operation();
      PathItem pathItem0 = new PathItem();
      List<Parameter> list0 = pathItem0.getParameters();
      Operation operation1 = operation0.parameters(list0);
      Map<String, Callback> map1 = operation1.getCallbacks();
      Components components3 = components2.callbacks(map1);
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      int int0 = 91;
      int int1 = (-1);
      int int2 = 1;
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int3 = 16;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema1).implementation();
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int3).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "_EaDtoGG]nf'WIGR_^";
      stringArray0[2] = string2;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      MediaType mediaType0 = new MediaType();
      String string3 = ".";
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples(string3, example0);
      Map<String, Example> map0 = null;
      MediaType mediaType2 = mediaType1.examples(map0);
      io.swagger.oas.models.media.Schema<Object> schema2 = new io.swagger.oas.models.media.Schema<Object>();
      MediaType mediaType3 = mediaType2.schema(schema2);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType4 = mediaType3.encoding(hashMap0);
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0]).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType4, exampleObject0);
      int int4 = Integer.MAX_VALUE;
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema3).implementation();
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int1).when(arraySchema1).maxItems();
      doReturn(int4).when(arraySchema1).minItems();
      doReturn(schema3, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean1).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema1);
  }

  @Test(timeout = 11000)
  public void test83()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[9];
      Class<OperationParser> class0 = OperationParser.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string1 = "#/components/schemas/";
      String string2 = "s=>aL nyG";
      String string3 = "";
      String string4 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string1, string2).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      String[] stringArray0 = new String[1];
      stringArray0[0] = string1;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = new Components();
      Map<String, io.swagger.oas.models.media.Schema> map0 = null;
      Components components1 = components0.schemas(map0);
      String string5 = "";
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters(string5, parameter0);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components3 = components2.securitySchemes(hashMap0);
      Link link0 = new Link();
      String string6 = "";
      Link link1 = link0.operationRef(string6);
      String string7 = "";
      Link link2 = link1.description(string7);
      Components components4 = components3.addLinks(string5, link2);
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }
}
