/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 15:04:35 GMT 2020
 */

package org.elasticsearch.river.mongodb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.LazyDBList;
import com.mongodb.LazyDBObject;
import com.mongodb.LazyWriteableDBObject;
import com.mongodb.Mongo;
import com.mongodb.ReadPreference;
import com.mongodb.ServerAddress;
import com.mongodb.TaggableReadPreference;
import com.mongodb.WriteConcern;
import com.mongodb.gridfs.GridFSDBFile;
import com.spatial4j.core.context.SpatialContext;
import com.spatial4j.core.shape.Rectangle;
import com.spatial4j.core.shape.impl.GeoCircle;
import com.spatial4j.core.shape.impl.PointImpl;
import java.net.InetAddress;
import java.time.Clock;
import java.time.chrono.HijrahDate;
import java.util.Date;
import java.util.LinkedList;
import java.util.Map;
import java.util.SortedMap;
import java.util.concurrent.PriorityBlockingQueue;
import org.apache.lucene.index.CompositeReader;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexCommit;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy;
import org.apache.lucene.index.MultiReader;
import org.apache.lucene.index.ParallelCompositeReader;
import org.apache.lucene.index.PersistentSnapshotDeletionPolicy;
import org.apache.lucene.index.SnapshotDeletionPolicy;
import org.apache.lucene.store.NIOFSDirectory;
import org.apache.lucene.store.SimpleFSLockFactory;
import org.bson.LazyBSONCallback;
import org.bson.io.BSONByteBuffer;
import org.bson.types.ObjectId;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.cluster.metadata.RestoreMetaData;
import org.elasticsearch.cluster.metadata.SnapshotId;
import org.elasticsearch.common.collect.ImmutableBiMap;
import org.elasticsearch.common.collect.ImmutableList;
import org.elasticsearch.common.collect.ImmutableSortedMap;
import org.elasticsearch.common.logging.ESLoggerFactory;
import org.elasticsearch.index.deletionpolicy.SnapshotIndexCommit;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.river.mongodb.MongoDBRiver;
import org.elasticsearch.river.mongodb.MongoDBRiverDefinition;
import org.elasticsearch.river.mongodb.Operation;
import org.elasticsearch.river.mongodb.SharedContext;
import org.elasticsearch.river.mongodb.Slurper;
import org.elasticsearch.river.mongodb.Status;
import org.elasticsearch.river.mongodb.Timestamp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Slurper_ESTest extends Slurper_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      ServerAddress serverAddress0 = new ServerAddress(inetAddress0);
      ImmutableList<ServerAddress> immutableList0 = ImmutableList.of(serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0);
      MongoDBRiverDefinition mongoDBRiverDefinition0 = null;
      MongoDBRiver.QueueEntry mongoDBRiver_QueueEntry0 = null;
      // Undeclared exception!
      try { 
        ImmutableList.of(mongoDBRiver_QueueEntry0, mongoDBRiver_QueueEntry0, mongoDBRiver_QueueEntry0);
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("org.elasticsearch.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      // Undeclared exception!
      try { 
        slurper0.run();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)60;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-60);
      byteArray0[1] = byte1;
      byte byte2 = (byte)14;
      byteArray0[2] = byte2;
      byte byte3 = (byte)18;
      byteArray0[3] = byte3;
      byte byte4 = (byte)36;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)46;
      byteArray0[6] = byte6;
      byte byte7 = (byte)8;
      byteArray0[7] = byte7;
      // Undeclared exception!
      try { 
        BSONByteBuffer.wrap(byteArray0, (int) byteArray0[0], (int) byteArray0[1]);
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      // Undeclared exception!
      try { 
        slurper0.riverHasIndexedFromOplog();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.MongoDBRiver", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      String string0 = "wVgOeQw$";
      // Undeclared exception!
      try { 
        slurper0.getCollectionFromNamespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      ImmutableList<String> immutableList0 = ImmutableList.of();
      // Undeclared exception!
      try { 
        immutableList0.add(slurper0.gridfsOplogNamespace);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.collect.ImmutableCollection", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      String string0 = null;
      // Undeclared exception!
      try { 
        slurper0.assignCollections();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      // Undeclared exception!
      try { 
        slurper0.processFullOplog();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      // Undeclared exception!
      try { 
        slurper0.processFullOplog();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      // Undeclared exception!
      try { 
        slurper0.riverHasIndexedFromOplog();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.MongoDBRiver", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      // Undeclared exception!
      try { 
        slurper0.run();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      String string0 = "";
      Clock clock0 = MockClock.systemUTC();
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      // Undeclared exception!
      try { 
        slurper0.updateIndexRefresh(string0, hijrahDate0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      BSONByteBuffer bSONByteBuffer0 = null;
      int int0 = 0;
      String string0 = "w[Bh@";
      slurper0.gridfsOplogNamespace = string0;
      LazyBSONCallback lazyBSONCallback0 = new LazyBSONCallback();
      Slurper slurper1 = new Slurper();
      DB dB0 = slurper1.oplogDb;
      slurper0.oplogDb = dB0;
      // Undeclared exception!
      try { 
        slurper0.isIndexEmpty();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.MongoDBRiver", e);
      }
  }
}
