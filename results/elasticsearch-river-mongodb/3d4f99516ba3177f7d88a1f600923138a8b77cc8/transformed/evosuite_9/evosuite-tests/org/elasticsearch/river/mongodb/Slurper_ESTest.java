/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 15:46:02 GMT 2020
 */

package org.elasticsearch.river.mongodb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;
import com.mongodb.CommandResult;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.LazyDBList;
import com.mongodb.LazyDBObject;
import com.mongodb.LazyWriteableDBObject;
import com.mongodb.Mongo;
import com.mongodb.ServerAddress;
import com.spatial4j.core.context.SpatialContext;
import com.spatial4j.core.context.SpatialContextFactory;
import com.spatial4j.core.distance.CartesianDistCalc;
import com.spatial4j.core.shape.Point;
import com.spatial4j.core.shape.ShapeCollection;
import com.spatial4j.core.shape.impl.GeoCircle;
import com.spatial4j.core.shape.impl.PointImpl;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.lucene.index.AtomicReader;
import org.apache.lucene.index.ParallelAtomicReader;
import org.bson.BSONCallback;
import org.bson.LazyBSONCallback;
import org.bson.io.BSONByteBuffer;
import org.bson.types.ObjectId;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.metadata.RestoreMetaData;
import org.elasticsearch.cluster.metadata.SnapshotId;
import org.elasticsearch.common.ParseField;
import org.elasticsearch.common.collect.ImmutableBiMap;
import org.elasticsearch.common.collect.ImmutableList;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamInput;
import org.elasticsearch.common.logging.ESLoggerFactory;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.river.mongodb.MongoDBRiver;
import org.elasticsearch.river.mongodb.MongoDBRiverDefinition;
import org.elasticsearch.river.mongodb.Operation;
import org.elasticsearch.river.mongodb.SharedContext;
import org.elasticsearch.river.mongodb.Slurper;
import org.elasticsearch.river.mongodb.Status;
import org.elasticsearch.river.mongodb.Timestamp;
import org.elasticsearch.search.aggregations.Aggregator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Slurper_ESTest extends Slurper_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      // Undeclared exception!
      try { 
        slurper0.processFullOplog();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      long long0 = 0L;
      AtomicLong atomicLong0 = new AtomicLong(long0);
      slurper0.totalDocuments = atomicLong0;
      // Undeclared exception!
      try { 
        slurper0.processFullOplog();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      BasicDBObject basicDBObject0 = slurper0.findKeys;
      String string0 = "already flushing...";
      BasicDBObject basicDBObject1 = slurper0.getFilterForInitialImport(basicDBObject0, string0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)118;
      byteArray0[1] = byte1;
      int int0 = 592;
      LazyBSONCallback lazyBSONCallback0 = null;
      LazyDBObject lazyDBObject0 = null;
      try {
        lazyDBObject0 = new LazyDBObject(byteArray0, int0, lazyBSONCallback0);
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      BasicDBList basicDBList0 = new BasicDBList();
      // Undeclared exception!
      try { 
        slurper0.flattenOps(basicDBList0);
      } catch(IllegalArgumentException e) {
         //
         // BasicBSONList can only work with numeric keys, not: [ops]
         //
         verifyException("org.bson.types.BasicBSONList", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      Slurper.SlurperException slurper_SlurperException0 = slurper0.new SlurperException(slurper0.cmdOplogNamespace);
      BasicDBObject basicDBObject0 = slurper0.findKeys;
      slurper0.findKeys = basicDBObject0;
      BasicDBObject basicDBObject1 = null;
      // Undeclared exception!
      try { 
        slurper0.getObjectIdFromOplogEntry(basicDBObject1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      DBCollection dBCollection0 = slurper0.oplogCollection;
      // Undeclared exception!
      try { 
        slurper0.doInitialImport(dBCollection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      // Undeclared exception!
      try { 
        slurper0.run();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      // Undeclared exception!
      try { 
        slurper0.assignCollections();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      String string0 = null;
      // Undeclared exception!
      try { 
        slurper0.getCollectionFromNamespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      DBCollection dBCollection0 = null;
      // Undeclared exception!
      try { 
        slurper0.doInitialImport(dBCollection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      DB dB0 = slurper0.oplogDb;
      slurper0.oplogDb = dB0;
      String string0 = "XU?pA1qfq#1&k";
      slurper0.gridfsOplogNamespace = string0;
      String string1 = null;
      BasicDBObject basicDBObject0 = MongoDBRiverDefinition.convertToBasicDBObject(string1);
      slurper0.findKeys = basicDBObject0;
      // Undeclared exception!
      try { 
        slurper0.assignCollections();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      String string0 = "^c_Meq]7EA3t";
      // Undeclared exception!
      try { 
        slurper0.getCollectionFromNamespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      String string0 = "7MfP";
      boolean boolean0 = true;
      CartesianDistCalc cartesianDistCalc0 = new CartesianDistCalc(boolean0);
      double double0 = 0.0;
      double double1 = 0.0;
      SpatialContextFactory spatialContextFactory0 = new SpatialContextFactory();
      SpatialContext spatialContext0 = new SpatialContext(spatialContextFactory0);
      PointImpl pointImpl0 = new PointImpl(double0, double1, spatialContext0);
      GeoCircle[] geoCircleArray0 = new GeoCircle[0];
      ImmutableList<GeoCircle> immutableList0 = ImmutableList.copyOf(geoCircleArray0);
      ShapeCollection<GeoCircle> shapeCollection0 = spatialContext0.makeCollection((List<GeoCircle>) immutableList0);
      Point point0 = shapeCollection0.getCenter();
      Point point1 = cartesianDistCalc0.pointOnBearing(pointImpl0, double1, double1, spatialContext0, point0);
      double double2 = 819005.925;
      GeoCircle geoCircle0 = new GeoCircle(point1, double2, spatialContext0);
      // Undeclared exception!
      try { 
        slurper0.updateIndexRefresh(string0, geoCircle0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      // Undeclared exception!
      try { 
        slurper0.isIndexEmpty();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.MongoDBRiver", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      // Undeclared exception!
      try { 
        slurper0.getCurrentOplogTimestamp();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      Slurper.SlurperException slurper_SlurperException0 = slurper0.new SlurperException();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)3;
      byteArray0[2] = byte2;
      byte byte3 = (byte)7;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)44;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-120);
      byteArray0[6] = byte6;
      byte byte7 = (byte)66;
      byteArray0[7] = byte7;
      LazyBSONCallback lazyBSONCallback0 = new LazyBSONCallback();
      LazyDBList lazyDBList0 = new LazyDBList(byteArray0, byteArray0[3], lazyBSONCallback0);
      // Undeclared exception!
      try { 
        slurper0.applyFieldFilter(lazyDBList0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      DBObject dBObject0 = null;
      // Undeclared exception!
      try { 
        slurper0.applyFieldFilter(dBObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      // Undeclared exception!
      try { 
        slurper0.riverHasIndexedFromOplog();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.MongoDBRiver", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      ServerAddress serverAddress0 = new ServerAddress();
      ImmutableList<ServerAddress> immutableList0 = ImmutableList.of(serverAddress0);
      MongoDBRiverDefinition mongoDBRiverDefinition0 = null;
      LinkedBlockingQueue<MongoDBRiver.QueueEntry> linkedBlockingQueue0 = new LinkedBlockingQueue<MongoDBRiver.QueueEntry>();
      Status status0 = Status.SCRIPT_IMPORT_FAILED;
      SharedContext sharedContext0 = new SharedContext(linkedBlockingQueue0, status0);
      Client client0 = null;
      Slurper slurper0 = null;
      try {
        slurper0 = new Slurper(immutableList0, mongoDBRiverDefinition0, sharedContext0, client0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      DBObject dBObject0 = null;
      String string0 = "X0j";
      BasicDBObject basicDBObject0 = new BasicDBObject(string0, string0);
      slurper0.findKeys = basicDBObject0;
      // Undeclared exception!
      try { 
        slurper0.flattenOps(dBObject0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      String string0 = "o+kyKK83^bF";
      ESLoggerFactory eSLoggerFactory0 = mock(ESLoggerFactory.class, new ViolatedAssumptionAnswer());
      ESLoggerFactory.setDefaultFactory(eSLoggerFactory0);
      slurper0.gridfsOplogNamespace = string0;
      DB dB0 = slurper0.oplogDb;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)81;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)29;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-37);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)125;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-29);
      byteArray0[6] = byte6;
      byte byte7 = (byte)84;
      byteArray0[7] = byte7;
      byte byte8 = (byte)58;
      byteArray0[8] = byte8;
      int int0 = 7;
      LazyBSONCallback lazyBSONCallback0 = new LazyBSONCallback();
      LazyDBObject lazyDBObject0 = new LazyDBObject(byteArray0, int0, lazyBSONCallback0);
      // Undeclared exception!
      try { 
        slurper0.flattenOps(lazyDBObject0);
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      BasicDBObject basicDBObject0 = MongoDBRiverDefinition.convertToBasicDBObject(slurper0.gridfsOplogNamespace);
      Object object0 = basicDBObject0.put(slurper0.gridfsOplogNamespace, slurper0);
      String string0 = slurper0.getObjectIdFromOplogEntry(basicDBObject0);
      // Undeclared exception!
      try { 
        slurper0.riverHasIndexedFromOplog();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.MongoDBRiver", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)82;
      ESLoggerFactory eSLoggerFactory0 = mock(ESLoggerFactory.class, new ViolatedAssumptionAnswer());
      ESLoggerFactory.setDefaultFactory(eSLoggerFactory0);
      DB dB0 = slurper0.slurpedDb;
      BasicDBObject basicDBObject0 = MongoDBRiverDefinition.convertToBasicDBObject(slurper0.cmdOplogNamespace);
      String string0 = "f$n ac&^mx";
      BasicDBObject basicDBObject1 = slurper0.getFilterForInitialImport(basicDBObject0, string0);
      slurper0.slurpedDb = dB0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      int int0 = 0;
      DB dB1 = slurper0.slurpedDb;
      slurper0.slurpedDb = dB1;
      LazyBSONCallback lazyBSONCallback0 = new LazyBSONCallback();
      String string1 = ";\\!b";
      String string2 = "fromMigrate";
      // Undeclared exception!
      try { 
        lazyBSONCallback0.gotRegex(string1, slurper0.cmdOplogNamespace, string2);
      } catch(UnsupportedOperationException e) {
         //
         // Not supported yet.
         //
         verifyException("org.bson.EmptyBSONCallback", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      Slurper slurper0 = new Slurper();
      BasicDBObject basicDBObject0 = MongoDBRiverDefinition.convertToBasicDBObject(slurper0.cmdOplogNamespace);
      slurper0.flattenOps(basicDBObject0);
      DB dB0 = slurper0.slurpedDb;
      slurper0.slurpedDb = dB0;
      // Undeclared exception!
      try { 
        slurper0.processFullOplog();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }
}
