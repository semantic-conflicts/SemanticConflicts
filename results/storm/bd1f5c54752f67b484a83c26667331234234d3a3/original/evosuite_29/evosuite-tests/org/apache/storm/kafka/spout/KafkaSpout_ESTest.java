/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 08:09:34 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.ISeq;
import clojure.lang.MapEntry;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentList;
import clojure.lang.PersistentStructMap;
import clojure.lang.PersistentTreeMap;
import clojure.lang.Repeat;
import java.security.Principal;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.atomic.AtomicBoolean;
import org.apache.derby.iapi.sql.depend.ProviderList;
import org.apache.derby.impl.sql.compile.GenerationClauseNode;
import org.apache.hadoop.fs.DelegationTokenRenewer;
import org.apache.hadoop.hdfs.web.SWebHdfsFileSystem;
import org.apache.hadoop.hive.thrift.DelegationTokenIdentifier;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.storm.generated.ProfileRequest;
import org.apache.storm.generated.StormTopology;
import org.apache.storm.kafka.spout.KafkaSpout;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutMessageId;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault;
import org.apache.storm.spout.SpoutOutputCollector;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.topology.OutputFieldsGetter;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpout_ESTest extends KafkaSpout_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, Object> kafkaSpout0 = new KafkaSpout<Integer, Object>(kafkaSpoutConfig0);
      kafkaSpout0.nextTuple();
      kafkaSpout0.nextTuple();
      KafkaSpoutConfig<Principal, String> kafkaSpoutConfig1 = (KafkaSpoutConfig<Principal, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getValueDeserializer();
      KafkaSpout<Principal, String> kafkaSpout1 = new KafkaSpout<Principal, String>(kafkaSpoutConfig1);
      // Undeclared exception!
      try { 
        kafkaSpout1.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, ProfileRequest._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, ProfileRequest._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<TopicPartition, ProfileRequest._Fields> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<TopicPartition, ProfileRequest._Fields>();
      KafkaSpout<TopicPartition, ProfileRequest._Fields> kafkaSpout0 = new KafkaSpout<TopicPartition, ProfileRequest._Fields>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      SpoutOutputCollector spoutOutputCollector0 = null;
      kafkaSpout0.collector = spoutOutputCollector0;
      ConsumerRecords<TopicPartition, ProfileRequest._Fields> consumerRecords0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.setWaitingToEmit(consumerRecords0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaConsumerFactoryDefault<DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>, TopicPartition> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>, TopicPartition>();
      KafkaSpout<DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>, TopicPartition> kafkaSpout0 = new KafkaSpout<DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>, TopicPartition>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      String string0 = kafkaSpout0.toString();
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig<SWebHdfsFileSystem, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<SWebHdfsFileSystem, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<SWebHdfsFileSystem, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<SWebHdfsFileSystem, OffsetAndMetadata>(kafkaSpoutConfig0);
      ConsumerRecords<SWebHdfsFileSystem, OffsetAndMetadata> consumerRecords0 = ConsumerRecords.empty();
      KafkaSpoutConfig<TopicPartition, AbstractMap.SimpleEntry<KafkaSpoutMessageId, Object>> kafkaSpoutConfig1 = (KafkaSpoutConfig<TopicPartition, AbstractMap.SimpleEntry<KafkaSpoutMessageId, Object>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, AbstractMap.SimpleEntry<KafkaSpoutMessageId, Object>> kafkaSpout1 = new KafkaSpout<TopicPartition, AbstractMap.SimpleEntry<KafkaSpoutMessageId, Object>>(kafkaSpoutConfig1);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      kafkaSpout0.collector = spoutOutputCollector0;
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      Map<String, Object> map0 = kafkaSpout0.getComponentConfiguration();
      KafkaSpoutConfig<TopicPartition, TopicPartition> kafkaSpoutConfig2 = (KafkaSpoutConfig<TopicPartition, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      KafkaConsumerFactoryDefault<TopicPartition, TopicPartition> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<TopicPartition, TopicPartition>();
      KafkaSpoutConfig<TopicPartition, TopicPartition> kafkaSpoutConfig3 = null;
      // Undeclared exception!
      try { 
        kafkaConsumerFactoryDefault0.createConsumer(kafkaSpoutConfig3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig<MapEntry, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<MapEntry, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<MapEntry, Object> kafkaSpout0 = new KafkaSpout<MapEntry, Object>(kafkaSpoutConfig0);
      int int0 = 0;
      ProfileRequest._Fields profileRequest__Fields0 = ProfileRequest._Fields.findByThriftId(int0);
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(profileRequest__Fields0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, AbstractMap.SimpleEntry<SWebHdfsFileSystem, Integer>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, AbstractMap.SimpleEntry<SWebHdfsFileSystem, Integer>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      KafkaConsumerFactoryDefault<KafkaSpoutMessageId, AbstractMap.SimpleEntry<SWebHdfsFileSystem, Integer>> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutMessageId, AbstractMap.SimpleEntry<SWebHdfsFileSystem, Integer>>();
      KafkaSpoutConfig<KafkaSpoutMessageId, AbstractMap.SimpleEntry<SWebHdfsFileSystem, Integer>> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutMessageId, AbstractMap.SimpleEntry<SWebHdfsFileSystem, Integer>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getValueDeserializer();
      // Undeclared exception!
      try { 
        kafkaConsumerFactoryDefault0.createConsumer(kafkaSpoutConfig1);
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray1 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, DelegationTokenIdentifier> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, DelegationTokenIdentifier>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, DelegationTokenIdentifier> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, DelegationTokenIdentifier>(kafkaSpoutConfig0);
      String string0 = kafkaSpout0.toString();
      KafkaSpoutConfig<Object, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>> kafkaSpoutConfig1 = (KafkaSpoutConfig<Object, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Object, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Object, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>>();
      KafkaSpout<Object, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>> kafkaSpout1 = new KafkaSpout<Object, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      // Undeclared exception!
      try { 
        kafkaSpout1.declareOutputFields(outputFieldsGetter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      KafkaSpoutConfig<DelegationTokenIdentifier, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenIdentifier, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<DelegationTokenIdentifier, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<DelegationTokenIdentifier, OffsetAndMetadata>(kafkaSpoutConfig0);
      KafkaSpoutConfig<ProfileRequest._Fields, DelegationTokenIdentifier> kafkaSpoutConfig1 = (KafkaSpoutConfig<ProfileRequest._Fields, DelegationTokenIdentifier>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<ProfileRequest._Fields, DelegationTokenIdentifier> kafkaSpout1 = new KafkaSpout<ProfileRequest._Fields, DelegationTokenIdentifier>(kafkaSpoutConfig1);
      KafkaSpoutConfig<OffsetAndMetadata, SWebHdfsFileSystem> kafkaSpoutConfig2 = null;
      KafkaConsumerFactoryDefault<OffsetAndMetadata, SWebHdfsFileSystem> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<OffsetAndMetadata, SWebHdfsFileSystem>();
      KafkaSpout<OffsetAndMetadata, SWebHdfsFileSystem> kafkaSpout2 = null;
      try {
        kafkaSpout2 = new KafkaSpout<OffsetAndMetadata, SWebHdfsFileSystem>(kafkaSpoutConfig2, kafkaConsumerFactoryDefault0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, Object>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>>();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      int int0 = (-518);
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(topicPartition0);
      } catch(ClassCastException e) {
         //
         // org.apache.kafka.common.TopicPartition cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      KafkaSpoutConfig<AbstractMap.SimpleEntry<String, KafkaSpoutMessageId>, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<AbstractMap.SimpleEntry<String, KafkaSpoutMessageId>, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<AbstractMap.SimpleEntry<String, KafkaSpoutMessageId>, Integer> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleEntry<String, KafkaSpoutMessageId>, Integer>(kafkaSpoutConfig0);
      kafkaSpout0.nextTuple();
      KafkaSpoutConfig<SWebHdfsFileSystem, Integer> kafkaSpoutConfig1 = (KafkaSpoutConfig<SWebHdfsFileSystem, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<SWebHdfsFileSystem, Integer> kafkaSpout1 = new KafkaSpout<SWebHdfsFileSystem, Integer>(kafkaSpoutConfig1);
      // Undeclared exception!
      try { 
        kafkaSpout1.deactivate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      KafkaSpoutConfig<Object, AbstractMap.SimpleEntry<KafkaSpoutMessageId, OffsetAndMetadata>> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, AbstractMap.SimpleEntry<KafkaSpoutMessageId, OffsetAndMetadata>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Object, AbstractMap.SimpleEntry<KafkaSpoutMessageId, OffsetAndMetadata>> kafkaSpout0 = new KafkaSpout<Object, AbstractMap.SimpleEntry<KafkaSpoutMessageId, OffsetAndMetadata>>(kafkaSpoutConfig0);
      KafkaSpoutConfig<Principal, SWebHdfsFileSystem> kafkaSpoutConfig1 = (KafkaSpoutConfig<Principal, SWebHdfsFileSystem>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Principal, SWebHdfsFileSystem> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Principal, SWebHdfsFileSystem>();
      KafkaSpout<Principal, SWebHdfsFileSystem> kafkaSpout1 = new KafkaSpout<Principal, SWebHdfsFileSystem>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout1.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, String> kafkaSpout0 = new KafkaSpout<TopicPartition, String>(kafkaSpoutConfig0);
      KafkaSpoutConfig<String, OffsetAndMetadata> kafkaSpoutConfig1 = (KafkaSpoutConfig<String, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getValueDeserializer();
      KafkaConsumerFactoryDefault<String, OffsetAndMetadata> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<String, OffsetAndMetadata>();
      KafkaSpout<String, OffsetAndMetadata> kafkaSpout1 = new KafkaSpout<String, OffsetAndMetadata>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout1.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, ConsumerRecord<Object, Integer>> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, ConsumerRecord<Object, Integer>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, ConsumerRecord<Object, Integer>> kafkaSpout0 = new KafkaSpout<TopicPartition, ConsumerRecord<Object, Integer>>(kafkaSpoutConfig0);
      ConsumerRecords<TopicPartition, ConsumerRecord<Object, Integer>> consumerRecords0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.setWaitingToEmit(consumerRecords0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      KafkaSpoutConfig<ProfileRequest._Fields, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<ProfileRequest._Fields, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<ProfileRequest._Fields, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<ProfileRequest._Fields, KafkaSpoutMessageId>(kafkaSpoutConfig0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(object0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>, String> kafkaSpoutConfig0 = null;
      KafkaSpout<DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>, String> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<DelegationTokenRenewer.RenewAction<SWebHdfsFileSystem>, String>(kafkaSpoutConfig0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpout<KafkaSpoutStreamsNamedTopics, OffsetAndMetadata>, Principal> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout<KafkaSpoutStreamsNamedTopics, OffsetAndMetadata>, Principal>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout<KafkaSpoutStreamsNamedTopics, OffsetAndMetadata>, Principal> kafkaSpout0 = new KafkaSpout<KafkaSpout<KafkaSpoutStreamsNamedTopics, OffsetAndMetadata>, Principal>(kafkaSpoutConfig0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(object0);
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<String, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      KafkaSpoutConfig<Integer, MapEntry> kafkaSpoutConfig1 = (KafkaSpoutConfig<Integer, MapEntry>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Integer, MapEntry> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Integer, MapEntry>();
      KafkaSpout<Integer, MapEntry> kafkaSpout1 = new KafkaSpout<Integer, MapEntry>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      String string0 = kafkaSpout1.toString();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig2 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, Object> kafkaConsumerFactoryDefault1 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, Object>();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, Object> kafkaSpout2 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, Object>(kafkaSpoutConfig2, kafkaConsumerFactoryDefault1);
      // Undeclared exception!
      try { 
        kafkaSpout2.ack(kafkaConsumerFactoryDefault0);
      } catch(ClassCastException e) {
         //
         // org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, ForkJoinTask<Integer>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, ForkJoinTask<Integer>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, ForkJoinTask<Integer>> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, ForkJoinTask<Integer>>();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, ForkJoinTask<Integer>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, ForkJoinTask<Integer>>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      String string0 = "";
      MapEntry mapEntry0 = null;
      String string1 = "";
      ConsumerRecord<MapEntry, String> consumerRecord0 = new ConsumerRecord<MapEntry, String>(string0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES, kafkaSpoutConfig0.DEFAULT_POLL_TIMEOUT_MS, mapEntry0, string1);
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(consumerRecord0);
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(kafkaSpoutMessageId0);
      } catch(NullPointerException e) {
      }
  }
}
