/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 07:44:11 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.APersistentMap;
import clojure.lang.ArraySeq;
import clojure.lang.ISeq;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentStructMap;
import clojure.lang.PersistentTreeMap;
import clojure.lang.PersistentVector;
import clojure.lang.Repeat;
import java.sql.SQLClientInfoException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.AllResultColumn;
import org.apache.hadoop.fs.DelegationTokenRenewer;
import org.apache.hadoop.hdfs.web.WebHdfsFileSystem;
import org.apache.hadoop.hive.thrift.DelegationTokenIdentifier;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.internals.RecordHeaders;
import org.apache.kafka.common.record.TimestampType;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.storm.generated.Nimbus;
import org.apache.storm.generated.StormTopology;
import org.apache.storm.kafka.spout.KafkaSpout;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutMessageId;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault;
import org.apache.storm.spout.SpoutOutputCollector;
import org.apache.storm.state.ISubscribedState;
import org.apache.storm.task.GeneralTopologyContext;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.topology.OutputFieldsGetter;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpout_ESTest extends KafkaSpout_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<Nimbus.getSupervisorPageInfo_result._Fields, Nimbus.getSupervisorPageInfo_result._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<Nimbus.getSupervisorPageInfo_result._Fields, Nimbus.getSupervisorPageInfo_result._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Nimbus.getSupervisorPageInfo_result._Fields, Nimbus.getSupervisorPageInfo_result._Fields> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Nimbus.getSupervisorPageInfo_result._Fields, Nimbus.getSupervisorPageInfo_result._Fields>();
      KafkaSpout<Nimbus.getSupervisorPageInfo_result._Fields, Nimbus.getSupervisorPageInfo_result._Fields> kafkaSpout0 = new KafkaSpout<Nimbus.getSupervisorPageInfo_result._Fields, Nimbus.getSupervisorPageInfo_result._Fields>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      KafkaSpoutConfig<String, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<String, OffsetAndMetadata>(kafkaSpoutConfig0);
      KafkaSpoutConfig<KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics> kafkaSpout1 = new KafkaSpout<KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig1);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector(spoutOutputCollector0);
      String string0 = "4=\\kj\\*B\")K$&";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(string0, string0);
      Map<String, Object> map0 = kafkaSpout0.getComponentConfiguration();
      String string1 = "o)Y;[uw";
      TopicPartition topicPartition0 = new TopicPartition(string1, kafkaSpoutConfig1.DEFAULT_MAX_RETRIES);
      String string2 = topicPartition0.toString();
      // Undeclared exception!
      try { 
        kafkaSpout1.ack(topicPartition0);
      } catch(ClassCastException e) {
         //
         // org.apache.kafka.common.TopicPartition cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      KafkaSpoutConfig<ForkJoinTask<DelegationTokenIdentifier>, DelegationTokenIdentifier> kafkaSpoutConfig0 = (KafkaSpoutConfig<ForkJoinTask<DelegationTokenIdentifier>, DelegationTokenIdentifier>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<ForkJoinTask<DelegationTokenIdentifier>, DelegationTokenIdentifier> kafkaSpout0 = new KafkaSpout<ForkJoinTask<DelegationTokenIdentifier>, DelegationTokenIdentifier>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutMessageId, Integer> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutMessageId, Integer>();
      KafkaSpout<KafkaSpoutMessageId, Integer> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, Integer>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      parse.fn__3141 parse_fn__3141_0 = null;
      try {
        parse_fn__3141_0 = new parse.fn__3141();
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactory<KafkaSpoutStreamsNamedTopics, TopicPartition> kafkaConsumerFactory0 = null;
      KafkaSpout<KafkaSpoutStreamsNamedTopics, TopicPartition> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, TopicPartition>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      KafkaSpoutConfig<ISubscribedState, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>> kafkaSpoutConfig1 = (KafkaSpoutConfig<ISubscribedState, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig1).getFirstPollOffsetStrategy();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig1).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig1).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig1).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig1).getTuplesBuilder();
      doReturn(false).when(kafkaSpoutConfig1).isConsumerAutoCommitMode();
      KafkaConsumerFactoryDefault<ISubscribedState, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<ISubscribedState, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>>();
      KafkaSpout<ISubscribedState, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>> kafkaSpout1 = new KafkaSpout<ISubscribedState, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      TopologyContext topologyContext0 = null;
      KafkaSpoutConfig<KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig2 = (KafkaSpoutConfig<KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics> kafkaSpout2 = new KafkaSpout<KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig2);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout2.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector(spoutOutputCollector0);
      kafkaSpout1.open(persistentHashMap0, topologyContext0, spoutOutputCollector1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactory<Object, KafkaSpoutMessageId> kafkaConsumerFactory0 = null;
      KafkaSpout<Object, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<Object, KafkaSpoutMessageId>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      KafkaSpoutConfig<KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics> kafkaSpout1 = new KafkaSpout<KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig1);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector(spoutOutputCollector0);
      PersistentTreeMap persistentTreeMap0 = null;
      try {
        persistentTreeMap0 = new PersistentTreeMap();
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<Integer, Object> kafkaSpout0 = new KafkaSpout<Integer, Object>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      KafkaSpoutConfig<Object, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Object, TopicPartition> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Object, TopicPartition>();
      KafkaSpout<Object, TopicPartition> kafkaSpout0 = new KafkaSpout<Object, TopicPartition>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      KafkaSpoutConfig<Object, TopicPartition> kafkaSpoutConfig1 = (KafkaSpoutConfig<Object, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getValueDeserializer();
      // Undeclared exception!
      try { 
        kafkaConsumerFactoryDefault0.createConsumer(kafkaSpoutConfig1);
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      ConsumerRecords<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics> consumerRecords0 = ConsumerRecords.empty();
      String string0 = kafkaSpout0.toString();
      Set<TopicPartition> set0 = consumerRecords0.partitions();
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig1).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      Map<String, Object> map0 = kafkaSpout1.getComponentConfiguration();
      KafkaSpoutConfig<KafkaSpoutMessageId, ISubscribedState> kafkaSpoutConfig2 = (KafkaSpoutConfig<KafkaSpoutMessageId, ISubscribedState>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutMessageId, ISubscribedState> kafkaConsumerFactoryDefault1 = new KafkaConsumerFactoryDefault<KafkaSpoutMessageId, ISubscribedState>();
      KafkaSpout<KafkaSpoutMessageId, ISubscribedState> kafkaSpout2 = new KafkaSpout<KafkaSpoutMessageId, ISubscribedState>(kafkaSpoutConfig2, kafkaConsumerFactoryDefault1);
      ConsumerRecords<KafkaSpoutMessageId, ISubscribedState> consumerRecords1 = null;
      // Undeclared exception!
      try { 
        kafkaSpout2.setWaitingToEmit(consumerRecords1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpout<KafkaSpoutMessageId, KafkaSpoutMessageId>, Nimbus.getSupervisorPageInfo_result._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout<KafkaSpoutMessageId, KafkaSpoutMessageId>, Nimbus.getSupervisorPageInfo_result._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout<KafkaSpoutMessageId, KafkaSpoutMessageId>, Nimbus.getSupervisorPageInfo_result._Fields> kafkaSpout0 = new KafkaSpout<KafkaSpout<KafkaSpoutMessageId, KafkaSpoutMessageId>, Nimbus.getSupervisorPageInfo_result._Fields>(kafkaSpoutConfig0);
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<String, TopicPartition> kafkaSpoutConfig1 = (KafkaSpoutConfig<String, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<String, TopicPartition> kafkaSpout1 = new KafkaSpout<String, TopicPartition>(kafkaSpoutConfig1);
      // Undeclared exception!
      try { 
        kafkaSpout1.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      KafkaSpoutConfig<Integer, AllResultColumn> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, AllResultColumn>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, AllResultColumn> kafkaSpout0 = new KafkaSpout<Integer, AllResultColumn>(kafkaSpoutConfig0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      // Undeclared exception!
      try { 
        kafkaSpout0.declareOutputFields(outputFieldsGetter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      KafkaSpoutConfig<Nimbus.getSupervisorPageInfo_result._Fields, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<Nimbus.getSupervisorPageInfo_result._Fields, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactory<Nimbus.getSupervisorPageInfo_result._Fields, TopicPartition> kafkaConsumerFactory0 = null;
      KafkaSpout<Nimbus.getSupervisorPageInfo_result._Fields, TopicPartition> kafkaSpout0 = new KafkaSpout<Nimbus.getSupervisorPageInfo_result._Fields, TopicPartition>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, ConsumerRecord<Object, TopicPartition>> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, ConsumerRecord<Object, TopicPartition>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig1).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, ConsumerRecord<Object, TopicPartition>> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, ConsumerRecord<Object, TopicPartition>>(kafkaSpoutConfig1);
      Map<String, Object> map0 = kafkaSpout1.getComponentConfiguration();
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      // Undeclared exception!
      try { 
        kafkaSpout1.declareOutputFields(outputFieldsGetter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig<APersistentMap.ValSeq, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<APersistentMap.ValSeq, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<APersistentMap.ValSeq, Object> kafkaSpout0 = new KafkaSpout<APersistentMap.ValSeq, Object>(kafkaSpoutConfig0);
      kafkaSpout0.nextTuple();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<Object, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<Object, KafkaSpoutMessageId>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      KafkaSpoutConfig<AbstractMap.SimpleEntry<KafkaSpoutMessageId, DelegationTokenIdentifier>, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<AbstractMap.SimpleEntry<KafkaSpoutMessageId, DelegationTokenIdentifier>, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<AbstractMap.SimpleEntry<KafkaSpoutMessageId, DelegationTokenIdentifier>, Object> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleEntry<KafkaSpoutMessageId, DelegationTokenIdentifier>, Object>(kafkaSpoutConfig0);
      Map<String, Object> map0 = kafkaSpout0.getComponentConfiguration();
      KafkaSpoutConfig<AbstractMap.SimpleEntry<KafkaSpoutMessageId, String>, AllResultColumn> kafkaSpoutConfig1 = null;
      KafkaConsumerFactory<AbstractMap.SimpleEntry<KafkaSpoutMessageId, String>, AllResultColumn> kafkaConsumerFactory0 = null;
      KafkaSpout<AbstractMap.SimpleEntry<KafkaSpoutMessageId, String>, AllResultColumn> kafkaSpout1 = null;
      try {
        kafkaSpout1 = new KafkaSpout<AbstractMap.SimpleEntry<KafkaSpoutMessageId, String>, AllResultColumn>(kafkaSpoutConfig1, kafkaConsumerFactory0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, DelegationTokenIdentifier> kafkaSpoutConfig0 = null;
      KafkaSpout<OffsetAndMetadata, DelegationTokenIdentifier> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, DelegationTokenIdentifier>(kafkaSpoutConfig0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      KafkaSpoutConfig<Nimbus.getSupervisorPageInfo_result._Fields, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<Nimbus.getSupervisorPageInfo_result._Fields, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Nimbus.getSupervisorPageInfo_result._Fields, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<Nimbus.getSupervisorPageInfo_result._Fields, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      AllResultColumn allResultColumn0 = new AllResultColumn();
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(allResultColumn0);
      } catch(ClassCastException e) {
         //
         // org.apache.derby.impl.sql.compile.AllResultColumn cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Nimbus.getSupervisorPageInfo_result._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Nimbus.getSupervisorPageInfo_result._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, Nimbus.getSupervisorPageInfo_result._Fields> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, Nimbus.getSupervisorPageInfo_result._Fields>();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, Nimbus.getSupervisorPageInfo_result._Fields> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, Nimbus.getSupervisorPageInfo_result._Fields>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<OffsetAndMetadata, String> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<OffsetAndMetadata, String>();
      KafkaSpout<OffsetAndMetadata, String> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, String>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(kafkaConsumerFactoryDefault0);
      } catch(ClassCastException e) {
         //
         // org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      KafkaSpoutConfig<Integer, DelegationTokenIdentifier> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, DelegationTokenIdentifier>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, DelegationTokenIdentifier> kafkaSpout0 = new KafkaSpout<Integer, DelegationTokenIdentifier>(kafkaSpoutConfig0);
      KafkaSpoutConfig<JMXPrincipal, AllResultColumn> kafkaSpoutConfig1 = (KafkaSpoutConfig<JMXPrincipal, AllResultColumn>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<JMXPrincipal, AllResultColumn> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<JMXPrincipal, AllResultColumn>();
      KafkaSpout<JMXPrincipal, AllResultColumn> kafkaSpout1 = new KafkaSpout<JMXPrincipal, AllResultColumn>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout1.deactivate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactory<OffsetAndMetadata, Integer> kafkaConsumerFactory0 = null;
      KafkaSpout<OffsetAndMetadata, Integer> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, Integer>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      String string0 = "";
      int int0 = 0;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(topicPartition0);
      } catch(ClassCastException e) {
         //
         // org.apache.kafka.common.TopicPartition cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<Object, Nimbus.getSupervisorPageInfo_result._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, Nimbus.getSupervisorPageInfo_result._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Object, Nimbus.getSupervisorPageInfo_result._Fields> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Object, Nimbus.getSupervisorPageInfo_result._Fields>();
      KafkaSpout<Object, Nimbus.getSupervisorPageInfo_result._Fields> kafkaSpout0 = new KafkaSpout<Object, Nimbus.getSupervisorPageInfo_result._Fields>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      String string0 = "SYSSTATISTICS";
      Nimbus.getSupervisorPageInfo_result._Fields nimbus_getSupervisorPageInfo_result__Fields0 = Nimbus.getSupervisorPageInfo_result._Fields.findByName(string0);
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(nimbus_getSupervisorPageInfo_result__Fields0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      KafkaSpoutConfig<Nimbus.getSupervisorPageInfo_result._Fields, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<Nimbus.getSupervisorPageInfo_result._Fields, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Nimbus.getSupervisorPageInfo_result._Fields, TopicPartition> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Nimbus.getSupervisorPageInfo_result._Fields, TopicPartition>();
      KafkaSpout<Nimbus.getSupervisorPageInfo_result._Fields, TopicPartition> kafkaSpout0 = new KafkaSpout<Nimbus.getSupervisorPageInfo_result._Fields, TopicPartition>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      String string0 = "";
      int int0 = 0;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      Nimbus.getSupervisorPageInfo_result._Fields nimbus_getSupervisorPageInfo_result__Fields0 = Nimbus.getSupervisorPageInfo_result._Fields.E;
      boolean boolean0 = topicPartition0.equals(nimbus_getSupervisorPageInfo_result__Fields0);
      long long0 = 0L;
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long0);
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(kafkaSpoutMessageId0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<Integer, KafkaSpoutMessageId>(kafkaSpoutConfig0);
      String string0 = "wA:G@KnW)^\\^OU";
      ConsumerRecords<Integer, KafkaSpoutMessageId> consumerRecords0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.setWaitingToEmit(consumerRecords0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, SQLClientInfoException> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, SQLClientInfoException>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, SQLClientInfoException> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, SQLClientInfoException>(kafkaSpoutConfig0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(object0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      KafkaSpoutStreams kafkaSpoutStreams0 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<KafkaSpout<AllResultColumn, Object>, DelegationTokenIdentifier> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout<AllResultColumn, Object>, DelegationTokenIdentifier>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout<AllResultColumn, Object>, DelegationTokenIdentifier> kafkaSpout0 = new KafkaSpout<KafkaSpout<AllResultColumn, Object>, DelegationTokenIdentifier>(kafkaSpoutConfig0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      KafkaSpoutConfig<TopicPartition, Object> kafkaSpoutConfig1 = (KafkaSpoutConfig<TopicPartition, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig1).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<TopicPartition, Object> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<TopicPartition, Object>();
      KafkaSpout<TopicPartition, Object> kafkaSpout1 = new KafkaSpout<TopicPartition, Object>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      Map<String, Object> map0 = kafkaSpout1.getComponentConfiguration();
      kafkaSpout0.declareOutputFields(outputFieldsGetter0);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Nimbus.getSupervisorPageInfo_result._Fields> kafkaSpoutConfig2 = null;
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, Nimbus.getSupervisorPageInfo_result._Fields> kafkaConsumerFactoryDefault1 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, Nimbus.getSupervisorPageInfo_result._Fields>();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, Nimbus.getSupervisorPageInfo_result._Fields> kafkaSpout2 = null;
      try {
        kafkaSpout2 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, Nimbus.getSupervisorPageInfo_result._Fields>(kafkaSpoutConfig2, kafkaConsumerFactoryDefault1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      KafkaSpoutStreams kafkaSpoutStreams0 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      Deserializer<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>> deserializer0 = (Deserializer<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      Deserializer<String> deserializer1 = (Deserializer<String>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(treeMap0).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(deserializer0).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn(deserializer1).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaConsumerFactoryDefault<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, String> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, String>();
      KafkaSpout<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, String> kafkaSpout0 = new KafkaSpout<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, String>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(RuntimeException e) {
         //
         // Failed to construct kafka consumer
         //
         verifyException("org.apache.kafka.clients.consumer.KafkaConsumer", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      StormTopology stormTopology0 = new StormTopology();
      String string0 = "!j?SYzSPY\\(;mmFMTN";
      String string1 = "e<Dfo!qj=`.TjJ";
      String string2 = "4b7bZo!I2$";
      KafkaSpoutConfig<Object, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<Object, TopicPartition> kafkaSpout0 = new KafkaSpout<Object, TopicPartition>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      ConsumerRecords<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics> consumerRecords0 = ConsumerRecords.empty();
      String string0 = kafkaSpout0.toString();
      Set<TopicPartition> set0 = consumerRecords0.partitions();
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      String string1 = "F3^a4";
      GeneralTopologyContext generalTopologyContext0 = mock(GeneralTopologyContext.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig1).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout1.getComponentConfiguration();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }
}
