/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 07:36:41 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.ArraySeq;
import clojure.lang.MapEntry;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentTreeMap;
import clojure.lang.PersistentVector;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.regex.Pattern;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.depend.ProviderList;
import org.apache.derby.impl.sql.compile.GenerationClauseNode;
import org.apache.hadoop.fs.DelegationTokenRenewer;
import org.apache.hadoop.hdfs.web.WebHdfsFileSystem;
import org.apache.hadoop.hive.thrift.DelegationTokenIdentifier;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.storm.generated.Nimbus;
import org.apache.storm.generated.StateSpoutSpec;
import org.apache.storm.generated.StormTopology;
import org.apache.storm.kafka.spout.KafkaSpout;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutMessageId;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault;
import org.apache.storm.spout.SpoutOutputCollector;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsGetter;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpout_ESTest extends KafkaSpout_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      KafkaSpoutConfig<ForkJoinTask<KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<ForkJoinTask<KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<ForkJoinTask<KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<ForkJoinTask<KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      Map<String, Object> map0 = kafkaSpout0.getComponentConfiguration();
      ArraySeq arraySeq0 = ArraySeq.create();
      Fields fields0 = null;
      try {
        fields0 = new Fields(arraySeq0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.tuple.Fields", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactory<String, Object> kafkaConsumerFactory0 = null;
      KafkaSpout<String, Object> kafkaSpout0 = new KafkaSpout<String, Object>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>>();
      KafkaSpout<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>> kafkaSpout0 = new KafkaSpout<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(kafkaConsumerFactoryDefault0);
      } catch(ClassCastException e) {
         //
         // org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, AbstractMap.SimpleImmutableEntry<MapEntry, Integer>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, AbstractMap.SimpleImmutableEntry<MapEntry, Integer>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, AbstractMap.SimpleImmutableEntry<MapEntry, Integer>> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, AbstractMap.SimpleImmutableEntry<MapEntry, Integer>>();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, AbstractMap.SimpleImmutableEntry<MapEntry, Integer>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, AbstractMap.SimpleImmutableEntry<MapEntry, Integer>>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      String string0 = kafkaSpout0.toString();
      kafkaSpout0.nextTuple();
      KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, TopicPartition> kafkaSpoutConfig1 = (KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig1).getFirstPollOffsetStrategy();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig1).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig1).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig1).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig1).getTuplesBuilder();
      doReturn(false).when(kafkaSpoutConfig1).isConsumerAutoCommitMode();
      KafkaConsumerFactoryDefault<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, TopicPartition> kafkaConsumerFactoryDefault1 = new KafkaConsumerFactoryDefault<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, TopicPartition>();
      KafkaSpout<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, TopicPartition> kafkaSpout1 = new KafkaSpout<DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>, TopicPartition>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault1);
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      TopologyContext topologyContext0 = null;
      KafkaSpoutConfig<Integer, Integer> kafkaSpoutConfig2 = (KafkaSpoutConfig<Integer, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaSpout<Integer, Integer> kafkaSpout2 = new KafkaSpout<Integer, Integer>(kafkaSpoutConfig2);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout2.collector;
      kafkaSpout1.open(persistentArrayMap0, topologyContext0, spoutOutputCollector0);
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig3 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig3).getKafkaSpoutStreams();
      KafkaConsumerFactory<KafkaSpoutStreamsNamedTopics, Object> kafkaConsumerFactory0 = null;
      KafkaSpout<KafkaSpoutStreamsNamedTopics, Object> kafkaSpout3 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, Object>(kafkaSpoutConfig3, kafkaConsumerFactory0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      // Undeclared exception!
      try { 
        kafkaSpout3.declareOutputFields(outputFieldsGetter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, Nimbus.getClusterInfo_args._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, Nimbus.getClusterInfo_args._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaConsumerFactoryDefault<OffsetAndMetadata, Nimbus.getClusterInfo_args._Fields> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<OffsetAndMetadata, Nimbus.getClusterInfo_args._Fields>();
      KafkaSpout<OffsetAndMetadata, Nimbus.getClusterInfo_args._Fields> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, Nimbus.getClusterInfo_args._Fields>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutMessageId, String> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, String>(kafkaSpoutConfig0);
      KafkaSpoutConfig<OffsetAndMetadata, OffsetAndMetadata> kafkaSpoutConfig1 = (KafkaSpoutConfig<OffsetAndMetadata, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<OffsetAndMetadata, OffsetAndMetadata> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<OffsetAndMetadata, OffsetAndMetadata>();
      KafkaSpout<OffsetAndMetadata, OffsetAndMetadata> kafkaSpout1 = new KafkaSpout<OffsetAndMetadata, OffsetAndMetadata>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout1.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig<ConsumerRecord<String, KafkaSpoutStreamsWildcardTopics>, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<ConsumerRecord<String, KafkaSpoutStreamsWildcardTopics>, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<ConsumerRecord<String, KafkaSpoutStreamsWildcardTopics>, KafkaSpoutStreamsWildcardTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<ConsumerRecord<String, KafkaSpoutStreamsWildcardTopics>, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpout<ConsumerRecord<String, KafkaSpoutStreamsWildcardTopics>, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<ConsumerRecord<String, KafkaSpoutStreamsWildcardTopics>, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      MapEntry mapEntry0 = new MapEntry(kafkaConsumerFactoryDefault0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(mapEntry0);
      } catch(ClassCastException e) {
         //
         // clojure.lang.MapEntry cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<OffsetAndMetadata, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, KafkaSpoutMessageId>(kafkaSpoutConfig0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(object0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutMessageId, TopicPartition> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, TopicPartition>(kafkaSpoutConfig0);
      String string0 = "";
      int int0 = (-942);
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      long long0 = (-1169L);
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long0);
      String string1 = kafkaSpoutMessageId0.toString();
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(kafkaSpoutMessageId0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpoutConfig<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, Nimbus.getClusterInfo_args._Fields>, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, Nimbus.getClusterInfo_args._Fields>, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, Nimbus.getClusterInfo_args._Fields>, KafkaSpoutStreamsWildcardTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, Nimbus.getClusterInfo_args._Fields>, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpout<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, Nimbus.getClusterInfo_args._Fields>, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, Nimbus.getClusterInfo_args._Fields>, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = null;
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<String, Object> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<String, Object>();
      KafkaSpout<String, Object> kafkaSpout0 = new KafkaSpout<String, Object>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      // Undeclared exception!
      try { 
        kafkaSpout0.declareOutputFields(outputFieldsGetter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<DelegationTokenIdentifier, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenIdentifier, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<DelegationTokenIdentifier, TopicPartition> kafkaSpout0 = new KafkaSpout<DelegationTokenIdentifier, TopicPartition>(kafkaSpoutConfig0);
      KafkaSpoutConfig<AbstractMap.SimpleImmutableEntry<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata> kafkaSpoutConfig1 = (KafkaSpoutConfig<AbstractMap.SimpleImmutableEntry<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<AbstractMap.SimpleImmutableEntry<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata> kafkaSpout1 = new KafkaSpout<AbstractMap.SimpleImmutableEntry<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata>(kafkaSpoutConfig1);
      // Undeclared exception!
      try { 
        kafkaSpout1.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig<Nimbus.getClusterInfo_args._Fields, MapEntry> kafkaSpoutConfig0 = (KafkaSpoutConfig<Nimbus.getClusterInfo_args._Fields, MapEntry>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Nimbus.getClusterInfo_args._Fields, MapEntry> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Nimbus.getClusterInfo_args._Fields, MapEntry>();
      KafkaSpout<Nimbus.getClusterInfo_args._Fields, MapEntry> kafkaSpout0 = new KafkaSpout<Nimbus.getClusterInfo_args._Fields, MapEntry>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(offsetAndMetadata0);
      } catch(ClassCastException e) {
         //
         // org.apache.kafka.clients.consumer.OffsetAndMetadata cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpout<DelegationTokenIdentifier, MapEntry>, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout<DelegationTokenIdentifier, MapEntry>, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout<DelegationTokenIdentifier, MapEntry>, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<KafkaSpout<DelegationTokenIdentifier, MapEntry>, OffsetAndMetadata>(kafkaSpoutConfig0);
      KafkaSpoutConfig<String, DelegationTokenIdentifier> kafkaSpoutConfig1 = (KafkaSpoutConfig<String, DelegationTokenIdentifier>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactory<String, DelegationTokenIdentifier> kafkaConsumerFactory0 = null;
      KafkaSpout<String, DelegationTokenIdentifier> kafkaSpout1 = new KafkaSpout<String, DelegationTokenIdentifier>(kafkaSpoutConfig1, kafkaConsumerFactory0);
      // Undeclared exception!
      try { 
        kafkaSpout1.activate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpout<DelegationTokenIdentifier, KafkaSpoutStreamsWildcardTopics>, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout<DelegationTokenIdentifier, KafkaSpoutStreamsWildcardTopics>, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout<DelegationTokenIdentifier, KafkaSpoutStreamsWildcardTopics>, TopicPartition> kafkaSpout0 = new KafkaSpout<KafkaSpout<DelegationTokenIdentifier, KafkaSpoutStreamsWildcardTopics>, TopicPartition>(kafkaSpoutConfig0);
      KafkaSpoutConfig<TopicPartition, AbstractMap.SimpleEntry<String, KafkaSpoutMessageId>> kafkaSpoutConfig1 = null;
      KafkaConsumerFactory<TopicPartition, AbstractMap.SimpleEntry<String, KafkaSpoutMessageId>> kafkaConsumerFactory0 = null;
      KafkaSpout<TopicPartition, AbstractMap.SimpleEntry<String, KafkaSpoutMessageId>> kafkaSpout1 = null;
      try {
        kafkaSpout1 = new KafkaSpout<TopicPartition, AbstractMap.SimpleEntry<String, KafkaSpoutMessageId>>(kafkaSpoutConfig1, kafkaConsumerFactory0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      KafkaSpoutConfig<MapEntry, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<MapEntry, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<MapEntry, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<MapEntry, OffsetAndMetadata>(kafkaSpoutConfig0);
      ConsumerRecords<MapEntry, OffsetAndMetadata> consumerRecords0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.setWaitingToEmit(consumerRecords0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, JMXPrincipal> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, JMXPrincipal>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, JMXPrincipal> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, JMXPrincipal>(kafkaSpoutConfig0);
      ConsumerRecords<KafkaSpoutStreamsNamedTopics, JMXPrincipal> consumerRecords0 = ConsumerRecords.empty();
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      KafkaSpoutConfig<Object, Nimbus.getClusterInfo_args._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, Nimbus.getClusterInfo_args._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig0).getFirstPollOffsetStrategy();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn(0).when(kafkaSpoutConfig0).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig0).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig0).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig0).getTuplesBuilder();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      doReturn(false).when(kafkaSpoutConfig0).isConsumerAutoCommitMode();
      KafkaSpout<Object, Nimbus.getClusterInfo_args._Fields> kafkaSpout0 = new KafkaSpout<Object, Nimbus.getClusterInfo_args._Fields>(kafkaSpoutConfig0);
      GenerationClauseNode generationClauseNode0 = new GenerationClauseNode();
      ProviderList providerList0 = generationClauseNode0.getAuxiliaryProviderList();
      Map<String, StateSpoutSpec> map0 = null;
      StormTopology stormTopology0 = new StormTopology(providerList0, providerList0, map0);
      String string0 = "";
      String string1 = "v}3";
      int int0 = 2710;
      Integer integer0 = new Integer(int0);
      PersistentVector persistentVector0 = PersistentVector.EMPTY;
      PersistentVector persistentVector1 = persistentVector0.cons(integer0);
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(persistentVector0.tail);
      boolean boolean0 = true;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(boolean0);
      TopologyContext topologyContext0 = new TopologyContext(stormTopology0, providerList0, providerList0, providerList0, providerList0, string0, string0, string1, (Integer) generationClauseNode0.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX, integer0, persistentVector1, providerList0, providerList0, persistentArrayMap0, providerList0, atomicBoolean0);
      KafkaSpoutConfig<TopicPartition, AbstractMap.SimpleEntry<String, KafkaSpoutMessageId>> kafkaSpoutConfig1 = (KafkaSpoutConfig<TopicPartition, AbstractMap.SimpleEntry<String, KafkaSpoutMessageId>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, AbstractMap.SimpleEntry<String, KafkaSpoutMessageId>> kafkaSpout1 = new KafkaSpout<TopicPartition, AbstractMap.SimpleEntry<String, KafkaSpoutMessageId>>(kafkaSpoutConfig1);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector(spoutOutputCollector0);
      kafkaSpout0.open(providerList0, topologyContext0, spoutOutputCollector1);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpout<KafkaSpoutStreamsWildcardTopics, TopicPartition>, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout<KafkaSpoutStreamsWildcardTopics, TopicPartition>, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout<KafkaSpoutStreamsWildcardTopics, TopicPartition>, TopicPartition> kafkaSpout0 = new KafkaSpout<KafkaSpout<KafkaSpoutStreamsWildcardTopics, TopicPartition>, TopicPartition>(kafkaSpoutConfig0);
      String string0 = kafkaSpout0.toString();
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(string0);
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      KafkaSpoutConfig<Integer, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Integer, String> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Integer, String>();
      KafkaSpout<Integer, String> kafkaSpout0 = new KafkaSpout<Integer, String>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      String string0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(string0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      KafkaSpoutConfig<String, ForkJoinTask<Integer>> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, ForkJoinTask<Integer>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, ForkJoinTask<Integer>> kafkaSpout0 = new KafkaSpout<String, ForkJoinTask<Integer>>(kafkaSpoutConfig0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(object0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<TopicPartition, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) kafkaSpout0;
      objectArray0[1] = (Object) kafkaSpout0;
      objectArray0[2] = (Object) kafkaSpout0;
      objectArray0[3] = (Object) kafkaSpout0;
      objectArray0[4] = (Object) kafkaSpoutConfig0;
      objectArray0[5] = (Object) kafkaSpout0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      ConsumerRecords<TopicPartition, KafkaSpoutStreamsWildcardTopics> consumerRecords0 = new ConsumerRecords<TopicPartition, KafkaSpoutStreamsWildcardTopics>(persistentArrayMap0);
      // Undeclared exception!
      try { 
        kafkaSpout0.setWaitingToEmit(consumerRecords0);
      } catch(ClassCastException e) {
         //
         // org.apache.storm.kafka.spout.KafkaSpout cannot be cast to org.apache.kafka.common.TopicPartition
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      Map<String, Object> map0 = null;
      KafkaSpoutConfig<WebHdfsFileSystem, MapEntry> kafkaSpoutConfig0 = (KafkaSpoutConfig<WebHdfsFileSystem, MapEntry>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<WebHdfsFileSystem, MapEntry> kafkaSpout0 = new KafkaSpout<WebHdfsFileSystem, MapEntry>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }
}
