/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 08:54:41 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.APersistentMap;
import clojure.lang.ArraySeq;
import clojure.lang.Cons;
import clojure.lang.ISeq;
import clojure.lang.LazySeq;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentList;
import clojure.lang.PersistentStructMap;
import clojure.lang.PersistentTreeMap;
import clojure.lang.PersistentVector;
import java.sql.SQLTransactionRollbackException;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Spliterator;
import java.util.TreeMap;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Consumer;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.impl.sql.compile.Predicate;
import org.apache.hadoop.fs.DelegationTokenRenewer;
import org.apache.hadoop.hdfs.web.HsftpFileSystem;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.security.token.delegation.web.DelegationTokenIdentifier;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.record.TimestampType;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.storm.generated.GlobalStreamId;
import org.apache.storm.generated.Nimbus;
import org.apache.storm.generated.StormTopology;
import org.apache.storm.kafka.spout.KafkaSpout;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutMessageId;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault;
import org.apache.storm.spout.SpoutOutputCollector;
import org.apache.storm.task.GeneralTopologyContext;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.topology.OutputFieldsGetter;
import org.apache.storm.tuple.Fields;
import org.apache.storm.tuple.MessageId;
import org.apache.storm.tuple.TupleImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpout_ESTest extends KafkaSpout_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, TopicPartition> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, TopicPartition>(kafkaSpoutConfig0);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutMessageId> kafkaSpoutConfig1 = null;
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutMessageId> kafkaSpout1 = null;
      try {
        kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutMessageId>(kafkaSpoutConfig1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<TopicPartition, KafkaSpoutMessageId>(kafkaSpoutConfig0);
      KafkaSpoutConfig<KafkaSpoutMessageId, Predicate> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutMessageId, Predicate>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      KafkaConsumerFactoryDefault<KafkaSpoutMessageId, Predicate> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutMessageId, Predicate>();
      KafkaSpoutConfig<KafkaSpoutMessageId, Predicate> kafkaSpoutConfig2 = (KafkaSpoutConfig<KafkaSpoutMessageId, Predicate>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig2).getKafkaProps();
      doReturn((Deserializer) null).when(kafkaSpoutConfig2).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig2).getValueDeserializer();
      // Undeclared exception!
      try { 
        kafkaConsumerFactoryDefault0.createConsumer(kafkaSpoutConfig2);
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      KafkaSpoutConfig<Integer, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<Integer, OffsetAndMetadata>(kafkaSpoutConfig0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      boolean boolean0 = true;
      StormTopology stormTopology0 = new StormTopology();
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      String string0 = "BTe8,kRAyD =";
      String string1 = null;
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      PersistentVector persistentVector0 = PersistentVector.EMPTY;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(boolean0);
      PersistentVector persistentVector1 = PersistentVector.create((Iterable) persistentArrayMap0);
      TopologyContext topologyContext0 = new TopologyContext(stormTopology0, stormTopology0.metaDataMap, persistentArrayMap0, persistentArrayMap0, persistentArrayMap0, string0, string0, string1, (Integer) kafkaSpoutConfig0.DEFAULT_MAX_RETRIES, integer0, persistentVector0, persistentArrayMap0, persistentArrayMap0, persistentArrayMap0, persistentArrayMap0, atomicBoolean0);
      boolean boolean1 = false;
      Fields fields0 = null;
      // Undeclared exception!
      try { 
        outputFieldsGetter0.declare(boolean1, fields0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.topology.OutputFieldsGetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig<DelegationTokenIdentifier, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenIdentifier, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<DelegationTokenIdentifier, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<DelegationTokenIdentifier, OffsetAndMetadata>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<OffsetAndMetadata, Object> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, Object>(kafkaSpoutConfig0);
      String string0 = null;
      Map<String, Object> map0 = kafkaSpout0.getComponentConfiguration();
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      Nimbus.getTopology_args._Fields nimbus_getTopology_args__Fields0 = Nimbus.getTopology_args._Fields.ID;
      Object object0 = new Object();
      String string1 = topicPartition0.toString();
      // Undeclared exception!
      try { 
        Nimbus.getTopology_args._Fields.valueOf(string0);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata>(kafkaSpoutConfig0);
      String string0 = "^8Q()1U[x(EVGF]|L";
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      kafkaSpout0.nextTuple();
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(topicPartition0);
      } catch(ClassCastException e) {
         //
         // org.apache.kafka.common.TopicPartition cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig<DelegationTokenIdentifier, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenIdentifier, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<DelegationTokenIdentifier, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<DelegationTokenIdentifier, KafkaSpoutMessageId>(kafkaSpoutConfig0);
      kafkaSpout0.nextTuple();
      KafkaSpoutConfig<String, Nimbus.getTopology_args._Fields> kafkaSpoutConfig1 = (KafkaSpoutConfig<String, Nimbus.getTopology_args._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<String, Nimbus.getTopology_args._Fields> kafkaSpout1 = new KafkaSpout<String, Nimbus.getTopology_args._Fields>(kafkaSpoutConfig1);
      // Undeclared exception!
      try { 
        kafkaSpout1.fail(kafkaSpout0);
      } catch(ClassCastException e) {
         //
         // org.apache.storm.kafka.spout.KafkaSpout cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig0).getFirstPollOffsetStrategy();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig0).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig0).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig0).getTuplesBuilder();
      doReturn(false).when(kafkaSpoutConfig0).isConsumerAutoCommitMode();
      KafkaSpout<OffsetAndMetadata, String> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, String>(kafkaSpoutConfig0);
      ISeq iSeq0 = null;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(iSeq0);
      TopologyContext topologyContext0 = null;
      String string0 = kafkaSpout0.toString();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig1);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      kafkaSpout0.open(persistentHashMap0, topologyContext0, spoutOutputCollector0);
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      long long0 = 4463L;
      System.setCurrentTimeMillis(long0);
      long long1 = (-3330L);
      System.setCurrentTimeMillis(long1);
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, SQLTransactionRollbackException> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, SQLTransactionRollbackException>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, SQLTransactionRollbackException> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, SQLTransactionRollbackException>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = null;
      KafkaConsumerFactoryDefault<String, Object> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<String, Object>();
      KafkaSpout<String, Object> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<String, Object>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      KafkaSpoutConfig<JMXPrincipal, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<JMXPrincipal, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaConsumerFactoryDefault<JMXPrincipal, Integer> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<JMXPrincipal, Integer>();
      KafkaSpout<JMXPrincipal, Integer> kafkaSpout0 = new KafkaSpout<JMXPrincipal, Integer>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<TopicPartition, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      KafkaSpoutConfig<ForkJoinTask<DelegationTokenIdentifier>, Object> kafkaSpoutConfig1 = (KafkaSpoutConfig<ForkJoinTask<DelegationTokenIdentifier>, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<ForkJoinTask<DelegationTokenIdentifier>, Object> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<ForkJoinTask<DelegationTokenIdentifier>, Object>();
      KafkaSpout<ForkJoinTask<DelegationTokenIdentifier>, Object> kafkaSpout1 = new KafkaSpout<ForkJoinTask<DelegationTokenIdentifier>, Object>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      kafkaSpout1.nextTuple();
      KafkaSpoutConfig<JMXPrincipal, JMXPrincipal> kafkaSpoutConfig2 = (KafkaSpoutConfig<JMXPrincipal, JMXPrincipal>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaSpout<JMXPrincipal, JMXPrincipal> kafkaSpout2 = new KafkaSpout<JMXPrincipal, JMXPrincipal>(kafkaSpoutConfig2);
      // Undeclared exception!
      try { 
        kafkaSpout2.ack(kafkaSpout0);
      } catch(ClassCastException e) {
         //
         // org.apache.storm.kafka.spout.KafkaSpout cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      KafkaSpoutConfig<String, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, TopicPartition> kafkaSpout0 = new KafkaSpout<String, TopicPartition>(kafkaSpoutConfig0);
      ConsumerRecords<String, TopicPartition> consumerRecords0 = ConsumerRecords.empty();
      Spliterator<ConsumerRecord<String, TopicPartition>> spliterator0 = consumerRecords0.spliterator();
      String string0 = "";
      long long0 = (-3932L);
      TimestampType timestampType0 = TimestampType.CREATE_TIME;
      int int0 = (-1140);
      KafkaSpoutStreamsNamedTopics kafkaSpoutStreamsNamedTopics0 = mock(KafkaSpoutStreamsNamedTopics.class, new ViolatedAssumptionAnswer());
      ConsumerRecord<KafkaSpoutStreamsNamedTopics, Object> consumerRecord0 = new ConsumerRecord<KafkaSpoutStreamsNamedTopics, Object>(string0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES, long0, timestampType0, kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES, int0, kafkaSpoutStreamsNamedTopics0, spliterator0);
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(consumerRecord0);
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(kafkaSpoutMessageId0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, ConsumerRecord<KafkaSpoutMessageId, KafkaSpoutMessageId>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, ConsumerRecord<KafkaSpoutMessageId, KafkaSpoutMessageId>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactory<KafkaSpoutStreamsWildcardTopics, ConsumerRecord<KafkaSpoutMessageId, KafkaSpoutMessageId>> kafkaConsumerFactory0 = null;
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, ConsumerRecord<KafkaSpoutMessageId, KafkaSpoutMessageId>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, ConsumerRecord<KafkaSpoutMessageId, KafkaSpoutMessageId>>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(kafkaConsumerFactory0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      KafkaSpoutConfig<ConsumerRecord<String, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<ConsumerRecord<String, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig0).getFirstPollOffsetStrategy();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig0).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig0).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig0).getTuplesBuilder();
      doReturn(false).when(kafkaSpoutConfig0).isConsumerAutoCommitMode();
      KafkaConsumerFactoryDefault<ConsumerRecord<String, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<ConsumerRecord<String, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata>();
      KafkaSpout<ConsumerRecord<String, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<ConsumerRecord<String, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      TreeMap<KafkaSpoutStreamsWildcardTopics, String> treeMap0 = new TreeMap<KafkaSpoutStreamsWildcardTopics, String>();
      TopologyContext topologyContext0 = null;
      KafkaSpoutConfig<String, String> kafkaSpoutConfig1 = (KafkaSpoutConfig<String, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<String, String> kafkaSpout1 = new KafkaSpout<String, String>(kafkaSpoutConfig1);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector(spoutOutputCollector0);
      kafkaSpout0.open(treeMap0, topologyContext0, spoutOutputCollector1);
      String string0 = kafkaSpout0.toString();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      KafkaSpoutConfig<DelegationTokenIdentifier, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenIdentifier, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<DelegationTokenIdentifier, String> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<DelegationTokenIdentifier, String>();
      KafkaSpout<DelegationTokenIdentifier, String> kafkaSpout0 = new KafkaSpout<DelegationTokenIdentifier, String>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      ConsumerRecords<DelegationTokenIdentifier, String> consumerRecords0 = ConsumerRecords.empty();
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      String string0 = "pulse";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.pulse
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, Object> kafkaSpoutConfig0 = null;
      KafkaSpout<OffsetAndMetadata, Object> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, Object>(kafkaSpoutConfig0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, Integer> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, Integer>();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, Integer>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      String string0 = kafkaSpout0.toString();
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig1 = (KafkaSpoutConfig<Object, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<Object, String> kafkaSpout1 = new KafkaSpout<Object, String>(kafkaSpoutConfig1);
      // Undeclared exception!
      try { 
        kafkaSpout1.fail(string0);
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      KafkaSpoutConfig<DelegationTokenIdentifier, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenIdentifier, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<DelegationTokenIdentifier, Object> kafkaSpout0 = new KafkaSpout<DelegationTokenIdentifier, Object>(kafkaSpoutConfig0);
      ConsumerRecords<DelegationTokenIdentifier, Object> consumerRecords0 = ConsumerRecords.empty();
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig1 = (KafkaSpoutConfig<Object, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig1).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<Object, Integer> kafkaSpout1 = new KafkaSpout<Object, Integer>(kafkaSpoutConfig1);
      Map<String, Object> map0 = kafkaSpout1.getComponentConfiguration();
      // Undeclared exception!
      try { 
        kafkaSpout1.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, Object> kafkaSpout0 = new KafkaSpout<TopicPartition, Object>(kafkaSpoutConfig0);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      kafkaSpout0.collector = spoutOutputCollector0;
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      KafkaSpoutConfig<Nimbus.getTopology_args._Fields, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<Nimbus.getTopology_args._Fields, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Nimbus.getTopology_args._Fields, KafkaSpoutStreamsWildcardTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Nimbus.getTopology_args._Fields, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpout<Nimbus.getTopology_args._Fields, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<Nimbus.getTopology_args._Fields, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      kafkaSpout0.nextTuple();
      String string0 = kafkaSpout0.toString();
      KafkaSpoutConfig<KafkaSpoutMessageId, OffsetAndMetadata> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutMessageId, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getValueDeserializer();
      KafkaConsumerFactoryDefault<KafkaSpoutMessageId, OffsetAndMetadata> kafkaConsumerFactoryDefault1 = new KafkaConsumerFactoryDefault<KafkaSpoutMessageId, OffsetAndMetadata>();
      KafkaSpout<KafkaSpoutMessageId, OffsetAndMetadata> kafkaSpout1 = new KafkaSpout<KafkaSpoutMessageId, OffsetAndMetadata>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault1);
      // Undeclared exception!
      try { 
        kafkaSpout1.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, OffsetAndMetadata> kafkaSpoutConfig0 = null;
      KafkaConsumerFactory<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, OffsetAndMetadata> kafkaConsumerFactory0 = null;
      KafkaSpout<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, OffsetAndMetadata> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, OffsetAndMetadata>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      KafkaSpoutConfig<ForkJoinTask<DelegationTokenIdentifier>, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<ForkJoinTask<DelegationTokenIdentifier>, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<ForkJoinTask<DelegationTokenIdentifier>, Object> kafkaSpout0 = new KafkaSpout<ForkJoinTask<DelegationTokenIdentifier>, Object>(kafkaSpoutConfig0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      // Undeclared exception!
      try { 
        kafkaSpout0.declareOutputFields(outputFieldsGetter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, Object> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, Object>();
      KafkaSpout<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, Object> kafkaSpout0 = new KafkaSpout<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, Object>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      // Undeclared exception!
      try { 
        kafkaSpout0.declareOutputFields(outputFieldsGetter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, DelegationTokenIdentifier> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, DelegationTokenIdentifier>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutMessageId, DelegationTokenIdentifier> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, DelegationTokenIdentifier>(kafkaSpoutConfig0);
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, TopicPartition> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, TopicPartition> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, TopicPartition>(kafkaSpoutConfig1);
      KafkaSpoutConfig<String, TopicPartition> kafkaSpoutConfig2 = (KafkaSpoutConfig<String, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<String, TopicPartition> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<String, TopicPartition>();
      KafkaSpout<String, TopicPartition> kafkaSpout2 = new KafkaSpout<String, TopicPartition>(kafkaSpoutConfig2, kafkaConsumerFactoryDefault0);
      KafkaSpoutConfig<TopicPartition, String> kafkaSpoutConfig3 = (KafkaSpoutConfig<TopicPartition, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig3).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<TopicPartition, String> kafkaConsumerFactoryDefault1 = new KafkaConsumerFactoryDefault<TopicPartition, String>();
      KafkaSpout<TopicPartition, String> kafkaSpout3 = new KafkaSpout<TopicPartition, String>(kafkaSpoutConfig3, kafkaConsumerFactoryDefault1);
      Object object0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout3.fail(object0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      String string0 = kafkaSpout0.toString();
      Map<String, Object> map0 = kafkaSpout0.getComponentConfiguration();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      kafkaSpout0.collector = spoutOutputCollector0;
      Object object0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(object0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      KafkaSpoutConfig<ConsumerRecord<OffsetAndMetadata, TopicPartition>, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<ConsumerRecord<OffsetAndMetadata, TopicPartition>, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<ConsumerRecord<OffsetAndMetadata, TopicPartition>, Object> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<ConsumerRecord<OffsetAndMetadata, TopicPartition>, Object>();
      KafkaSpout<ConsumerRecord<OffsetAndMetadata, TopicPartition>, Object> kafkaSpout0 = new KafkaSpout<ConsumerRecord<OffsetAndMetadata, TopicPartition>, Object>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      String string0 = kafkaSpout0.toString();
      KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, KafkaSpoutStreamsWildcardTopics> kafkaConsumerFactoryDefault1 = new KafkaConsumerFactoryDefault<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpout<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, KafkaSpoutStreamsWildcardTopics> kafkaSpout1 = new KafkaSpout<DelegationTokenRenewer.RenewAction<HsftpFileSystem>, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault1);
      String string1 = kafkaSpout1.toString();
      KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig2 = (KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> kafkaSpout2 = new KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig2);
      Map<TopicPartition, List<ConsumerRecord<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics>>> map0 = null;
      ConsumerRecords<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> consumerRecords0 = new ConsumerRecords<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics>(map0);
      // Undeclared exception!
      try { 
        kafkaSpout2.setWaitingToEmit(consumerRecords0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.kafka.clients.consumer.ConsumerRecords", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, ForkJoinTask<KafkaSpoutMessageId>> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, ForkJoinTask<KafkaSpoutMessageId>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<OffsetAndMetadata, ForkJoinTask<KafkaSpoutMessageId>> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, ForkJoinTask<KafkaSpoutMessageId>>(kafkaSpoutConfig0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) kafkaSpoutConfig0;
      objectArray0[1] = (Object) kafkaSpoutConfig0;
      objectArray0[2] = (Object) kafkaSpoutConfig0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) kafkaSpoutConfig0;
      objectArray0[5] = (Object) kafkaSpout0;
      objectArray0[6] = (Object) kafkaSpout0;
      objectArray0[7] = (Object) kafkaSpout0;
      objectArray0[8] = (Object) kafkaSpoutConfig0;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      ConsumerRecords<OffsetAndMetadata, ForkJoinTask<KafkaSpoutMessageId>> consumerRecords0 = new ConsumerRecords<OffsetAndMetadata, ForkJoinTask<KafkaSpoutMessageId>>(persistentArrayMap0);
      Spliterator<ConsumerRecord<OffsetAndMetadata, ForkJoinTask<KafkaSpoutMessageId>>> spliterator0 = consumerRecords0.spliterator();
      Spliterator<ConsumerRecord<OffsetAndMetadata, ForkJoinTask<KafkaSpoutMessageId>>> spliterator1 = consumerRecords0.spliterator();
      Spliterator<ConsumerRecord<OffsetAndMetadata, ForkJoinTask<KafkaSpoutMessageId>>> spliterator2 = consumerRecords0.spliterator();
      Spliterator<ConsumerRecord<OffsetAndMetadata, ForkJoinTask<KafkaSpoutMessageId>>> spliterator3 = consumerRecords0.spliterator();
      // Undeclared exception!
      try { 
        kafkaSpout0.setWaitingToEmit(consumerRecords0);
      } catch(ClassCastException e) {
         //
         // org.apache.storm.kafka.spout.KafkaSpoutConfig$MockitoMock$2062412946 cannot be cast to org.apache.kafka.common.TopicPartition
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      KafkaSpoutStreams kafkaSpoutStreams0 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      kafkaSpout0.declareOutputFields(outputFieldsGetter0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "";
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      String string1 = kafkaSpout0.toString();
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      StormTopology stormTopology0 = new StormTopology();
      StormTopology stormTopology1 = new StormTopology(stormTopology0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Map<String, List<Integer>> map0 = null;
      Map<String, Map<String, Fields>> map1 = null;
      String string0 = "OFy~BKMJrwG";
      int int0 = 125;
      Integer integer0 = new Integer(int0);
      Integer integer1 = new Integer(int0);
      Object object0 = null;
      PersistentList persistentList0 = new PersistentList(object0);
      PersistentList persistentList1 = persistentList0.cons(hashMap0);
      GeneralTopologyContext generalTopologyContext0 = null;
      KafkaSpoutConfig<TopicPartition, Predicate> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, Predicate>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, Predicate> kafkaSpout0 = new KafkaSpout<TopicPartition, Predicate>(kafkaSpoutConfig0);
  }
}
