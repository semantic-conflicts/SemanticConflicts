/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 08:16:39 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.APersistentMap;
import clojure.lang.IPersistentMap;
import clojure.lang.IReduceInit;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LazySeq;
import clojure.lang.LongRange;
import clojure.lang.MapEntry;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentList;
import clojure.lang.PersistentStructMap;
import clojure.lang.PersistentTreeMap;
import clojure.lang.PersistentVector;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Consumer;
import javax.management.remote.JMXPrincipal;
import org.apache.hadoop.fs.DelegationTokenRenewer;
import org.apache.hadoop.hdfs.web.WebHdfsFileSystem;
import org.apache.hadoop.hive.thrift.DelegationTokenIdentifier;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.storm.generated.GlobalStreamId;
import org.apache.storm.generated.HBMessage;
import org.apache.storm.generated.StormTopology;
import org.apache.storm.kafka.spout.KafkaSpout;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutMessageId;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault;
import org.apache.storm.spout.SpoutOutputCollector;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsGetter;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpout_ESTest extends KafkaSpout_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Object, String> kafkaSpout0 = new KafkaSpout<Object, String>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      KafkaSpoutConfig<PersistentTreeMap.Seq, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<PersistentTreeMap.Seq, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactory<PersistentTreeMap.Seq, Integer> kafkaConsumerFactory0 = null;
      KafkaSpout<PersistentTreeMap.Seq, Integer> kafkaSpout0 = new KafkaSpout<PersistentTreeMap.Seq, Integer>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      Map<String, Object> map0 = kafkaSpout0.getComponentConfiguration();
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Object, Object> kafkaSpout0 = new KafkaSpout<Object, Object>(kafkaSpoutConfig0);
      String string0 = kafkaSpout0.toString();
      KafkaSpoutConfig<PersistentTreeMap.Seq, KafkaSpoutMessageId> kafkaSpoutConfig1 = (KafkaSpoutConfig<PersistentTreeMap.Seq, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<PersistentTreeMap.Seq, KafkaSpoutMessageId> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<PersistentTreeMap.Seq, KafkaSpoutMessageId>();
      KafkaSpout<PersistentTreeMap.Seq, KafkaSpoutMessageId> kafkaSpout1 = new KafkaSpout<PersistentTreeMap.Seq, KafkaSpoutMessageId>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      KafkaSpoutConfig<PersistentTreeMap.Seq, KafkaSpoutMessageId> kafkaSpoutConfig2 = (KafkaSpoutConfig<PersistentTreeMap.Seq, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig2).getKafkaProps();
      doReturn((Deserializer) null).when(kafkaSpoutConfig2).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig2).getValueDeserializer();
      // Undeclared exception!
      try { 
        kafkaConsumerFactoryDefault0.createConsumer(kafkaSpoutConfig2);
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactory<KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics> kafkaConsumerFactory0 = null;
      KafkaSpout<KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      TreeMap<TopicPartition, List<ConsumerRecord<KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics>>> treeMap0 = new TreeMap<TopicPartition, List<ConsumerRecord<KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics>>>();
      ConsumerRecords<KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics> consumerRecords0 = new ConsumerRecords<KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>, KafkaSpoutStreamsWildcardTopics>(treeMap0);
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, JMXPrincipal> kafkaSpoutConfig0 = null;
      KafkaSpout<KafkaSpoutStreamsNamedTopics, JMXPrincipal> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, JMXPrincipal>(kafkaSpoutConfig0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      KafkaSpoutConfig<PersistentTreeMap.Seq, DelegationTokenIdentifier> kafkaSpoutConfig0 = (KafkaSpoutConfig<PersistentTreeMap.Seq, DelegationTokenIdentifier>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig0).getFirstPollOffsetStrategy();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig0).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig0).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig0).getTuplesBuilder();
      doReturn(false).when(kafkaSpoutConfig0).isConsumerAutoCommitMode();
      KafkaConsumerFactoryDefault<PersistentTreeMap.Seq, DelegationTokenIdentifier> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<PersistentTreeMap.Seq, DelegationTokenIdentifier>();
      KafkaSpout<PersistentTreeMap.Seq, DelegationTokenIdentifier> kafkaSpout0 = new KafkaSpout<PersistentTreeMap.Seq, DelegationTokenIdentifier>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      String string0 = kafkaSpout0.toString();
      Map<String, Object> map0 = kafkaSpout0.getComponentConfiguration();
      TopologyContext topologyContext0 = null;
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId> kafkaConsumerFactoryDefault1 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault1);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector(spoutOutputCollector0);
      kafkaSpout0.open(map0, topologyContext0, spoutOutputCollector1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(object0);
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig<DelegationTokenIdentifier, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenIdentifier, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<DelegationTokenIdentifier, KafkaSpoutStreamsNamedTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<DelegationTokenIdentifier, KafkaSpoutStreamsNamedTopics>();
      KafkaSpout<DelegationTokenIdentifier, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<DelegationTokenIdentifier, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "k%";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.k%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Object, TopicPartition>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Object, TopicPartition>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Object, TopicPartition>> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Object, TopicPartition>>();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Object, TopicPartition>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Object, TopicPartition>>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) kafkaSpoutConfig0;
      objectArray0[1] = (Object) kafkaConsumerFactoryDefault0;
      objectArray0[2] = (Object) kafkaSpout0;
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      StormTopology stormTopology0 = new StormTopology();
      String string0 = "xns=lc09";
      String string1 = "";
      int int0 = 1358;
      Integer integer0 = new Integer(int0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        PersistentHashMap.create(objectArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("clojure.lang.PersistentHashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpoutConfig<Integer, HBMessage._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, HBMessage._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactory<Integer, HBMessage._Fields> kafkaConsumerFactory0 = null;
      KafkaSpout<Integer, HBMessage._Fields> kafkaSpout0 = new KafkaSpout<Integer, HBMessage._Fields>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      Map<String, Object> map0 = kafkaSpout0.getComponentConfiguration();
      kafkaSpout0.nextTuple();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, JMXPrincipal> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, JMXPrincipal>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<OffsetAndMetadata, JMXPrincipal> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<OffsetAndMetadata, JMXPrincipal>();
      KafkaSpout<OffsetAndMetadata, JMXPrincipal> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, JMXPrincipal>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(kafkaConsumerFactoryDefault0);
      } catch(ClassCastException e) {
         //
         // org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, String> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, String>(kafkaSpoutConfig0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(object0);
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Integer, KafkaSpoutStreamsWildcardTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Integer, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpout<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<Integer, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      KafkaSpoutConfig<Integer, KafkaSpoutMessageId> kafkaSpoutConfig1 = null;
      KafkaConsumerFactoryDefault<Integer, KafkaSpoutMessageId> kafkaConsumerFactoryDefault1 = new KafkaConsumerFactoryDefault<Integer, KafkaSpoutMessageId>();
      KafkaSpout<Integer, KafkaSpoutMessageId> kafkaSpout1 = null;
      try {
        kafkaSpout1 = new KafkaSpout<Integer, KafkaSpoutMessageId>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, Object> kafkaSpout0 = new KafkaSpout<Integer, Object>(kafkaSpoutConfig0);
      ConsumerRecords<Integer, Object> consumerRecords0 = ConsumerRecords.empty();
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, String> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, String>();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, String> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, String>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      Map<TopicPartition, List<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, String>>> map0 = null;
      ConsumerRecords<KafkaSpoutStreamsWildcardTopics, String> consumerRecords1 = new ConsumerRecords<KafkaSpoutStreamsWildcardTopics, String>(map0);
      // Undeclared exception!
      try { 
        kafkaSpout1.setWaitingToEmit(consumerRecords1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.kafka.clients.consumer.ConsumerRecords", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<Integer, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<Integer, OffsetAndMetadata>(kafkaSpoutConfig0);
      String string0 = kafkaSpout0.toString();
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      ConsumerRecords<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> consumerRecords0 = ConsumerRecords.empty();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Set<TopicPartition> set0 = consumerRecords0.partitions();
      consumerRecords0.forEach(consumer0);
      Set<TopicPartition> set1 = consumerRecords0.partitions();
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      kafkaSpout0.nextTuple();
      Map<String, Object> map0 = kafkaSpout0.getComponentConfiguration();
      KafkaSpoutConfig<AbstractMap.SimpleImmutableEntry<OffsetAndMetadata, TopicPartition>, ConsumerRecord<Integer, Object>> kafkaSpoutConfig1 = (KafkaSpoutConfig<AbstractMap.SimpleImmutableEntry<OffsetAndMetadata, TopicPartition>, ConsumerRecord<Integer, Object>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<AbstractMap.SimpleImmutableEntry<OffsetAndMetadata, TopicPartition>, ConsumerRecord<Integer, Object>> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<AbstractMap.SimpleImmutableEntry<OffsetAndMetadata, TopicPartition>, ConsumerRecord<Integer, Object>>();
      KafkaSpout<AbstractMap.SimpleImmutableEntry<OffsetAndMetadata, TopicPartition>, ConsumerRecord<Integer, Object>> kafkaSpout1 = new KafkaSpout<AbstractMap.SimpleImmutableEntry<OffsetAndMetadata, TopicPartition>, ConsumerRecord<Integer, Object>>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      String string0 = kafkaSpout1.toString();
      KafkaSpoutConfig<TopicPartition, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig2 = (KafkaSpoutConfig<TopicPartition, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, KafkaSpoutStreamsWildcardTopics> kafkaSpout2 = new KafkaSpout<TopicPartition, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig2);
      String string1 = null;
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(kafkaSpoutConfig1.DEFAULT_MAX_RETRIES, string1);
      Optional<Integer> optional0 = offsetAndMetadata0.leaderEpoch();
      String string2 = kafkaSpout2.toString();
      OffsetAndMetadata offsetAndMetadata1 = new OffsetAndMetadata(kafkaSpoutConfig2.DEFAULT_MAX_RETRIES, optional0, string1);
      Optional<Integer> optional1 = offsetAndMetadata1.leaderEpoch();
      // Undeclared exception!
      try { 
        kafkaSpout2.fail(offsetAndMetadata1);
      } catch(ClassCastException e) {
         //
         // org.apache.kafka.clients.consumer.OffsetAndMetadata cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = null;
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpout<TopicPartition, DelegationTokenIdentifier>, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout<TopicPartition, DelegationTokenIdentifier>, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpout<TopicPartition, DelegationTokenIdentifier>, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpout<TopicPartition, DelegationTokenIdentifier>, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>>();
      KafkaSpout<KafkaSpout<TopicPartition, DelegationTokenIdentifier>, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>> kafkaSpout0 = new KafkaSpout<KafkaSpout<TopicPartition, DelegationTokenIdentifier>, DelegationTokenRenewer.RenewAction<WebHdfsFileSystem>>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      // Undeclared exception!
      try { 
        kafkaSpout0.declareOutputFields(outputFieldsGetter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      KafkaSpoutConfig<AbstractMap.SimpleEntry<TopicPartition, Integer>, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<AbstractMap.SimpleEntry<TopicPartition, Integer>, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<AbstractMap.SimpleEntry<TopicPartition, Integer>, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleEntry<TopicPartition, Integer>, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      // Undeclared exception!
      try { 
        kafkaSpout0.declareOutputFields(outputFieldsGetter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutMessageId, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, KafkaSpoutMessageId>(kafkaSpoutConfig0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) kafkaSpoutConfig0;
      objectArray0[2] = (Object) kafkaSpoutConfig0;
      objectArray0[3] = (Object) kafkaSpout0;
      objectArray0[4] = (Object) kafkaSpout0;
      objectArray0[5] = (Object) kafkaSpoutConfig0;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create((IPersistentMap) persistentArrayMap0, objectArray0);
      PersistentArrayMap persistentArrayMap1 = new PersistentArrayMap(persistentHashMap0, objectArray0);
      ConsumerRecords<KafkaSpoutMessageId, KafkaSpoutMessageId> consumerRecords0 = new ConsumerRecords<KafkaSpoutMessageId, KafkaSpoutMessageId>(persistentArrayMap1);
      // Undeclared exception!
      try { 
        kafkaSpout0.setWaitingToEmit(consumerRecords0);
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.kafka.common.TopicPartition
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      KafkaSpoutConfig<DelegationTokenIdentifier, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenIdentifier, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaConsumerFactoryDefault<DelegationTokenIdentifier, TopicPartition> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<DelegationTokenIdentifier, TopicPartition>();
      KafkaSpout<DelegationTokenIdentifier, TopicPartition> kafkaSpout0 = new KafkaSpout<DelegationTokenIdentifier, TopicPartition>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<OffsetAndMetadata, String> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, String>(kafkaSpoutConfig0);
      kafkaSpout0.nextTuple();
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      KafkaSpoutConfig<List<Integer>, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<List<Integer>, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<List<Integer>, Integer> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<List<Integer>, Integer>();
      KafkaSpout<List<Integer>, Integer> kafkaSpout0 = new KafkaSpout<List<Integer>, Integer>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(object0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutMessageId, Integer> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, Integer>(kafkaSpoutConfig0);
      int int0 = 0;
      HBMessage._Fields hBMessage__Fields0 = HBMessage._Fields.findByThriftId(int0);
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(hBMessage__Fields0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig0).getFirstPollOffsetStrategy();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig0).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig0).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig0).getTuplesBuilder();
      doReturn(false).when(kafkaSpoutConfig0).isConsumerAutoCommitMode();
      KafkaConsumerFactory<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> kafkaConsumerFactory0 = null;
      KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      TreeMap<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics> treeMap0 = new TreeMap<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>();
      StormTopology stormTopology0 = null;
      Map<Integer, String> map0 = null;
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      String string0 = null;
      String string1 = "";
      int int0 = 1;
      Integer integer0 = new Integer(int0);
      int int1 = 82;
      Integer integer1 = new Integer(int1);
      Vector<Integer> vector0 = new Vector<Integer>();
      boolean boolean0 = true;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(boolean0);
      TopologyContext topologyContext0 = new TopologyContext(stormTopology0, treeMap0, map0, persistentArrayMap0, persistentArrayMap0, string0, string1, string0, integer0, integer1, vector0, persistentArrayMap0, persistentArrayMap0, persistentArrayMap0, persistentArrayMap0, atomicBoolean0);
      boolean boolean1 = true;
      boolean boolean2 = atomicBoolean0.weakCompareAndSet(boolean1, boolean1);
      SpoutOutputCollector spoutOutputCollector0 = null;
      kafkaSpout0.open(treeMap0, topologyContext0, spoutOutputCollector0);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      KafkaSpoutConfig<DelegationTokenIdentifier, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<DelegationTokenIdentifier, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<DelegationTokenIdentifier, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<DelegationTokenIdentifier, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      HBMessage._Fields hBMessage__Fields0 = HBMessage._Fields.findByThriftId(kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(hBMessage__Fields0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "";
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST;
      Map<String, Object> map0 = null;
      KafkaSpoutStreams kafkaSpoutStreams0 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      Deserializer<OffsetAndMetadata> deserializer0 = (Deserializer<OffsetAndMetadata>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      int int0 = 487;
      KafkaSpoutRetryService kafkaSpoutRetryService0 = mock(KafkaSpoutRetryService.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilder<OffsetAndMetadata, AbstractMap.SimpleEntry<KafkaSpoutStreamsWildcardTopics, TopicPartition>> kafkaSpoutTuplesBuilder0 = (KafkaSpoutTuplesBuilder<OffsetAndMetadata, AbstractMap.SimpleEntry<KafkaSpoutStreamsWildcardTopics, TopicPartition>>) mock(KafkaSpoutTuplesBuilder.class, new ViolatedAssumptionAnswer());
      Deserializer<AbstractMap.SimpleEntry<KafkaSpoutStreamsWildcardTopics, TopicPartition>> deserializer1 = (Deserializer<AbstractMap.SimpleEntry<KafkaSpoutStreamsWildcardTopics, TopicPartition>>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      KafkaSpoutConfig<OffsetAndMetadata, AbstractMap.SimpleEntry<KafkaSpoutStreamsWildcardTopics, TopicPartition>> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, AbstractMap.SimpleEntry<KafkaSpoutStreamsWildcardTopics, TopicPartition>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn(kafkaSpoutConfig_FirstPollOffsetStrategy0).when(kafkaSpoutConfig0).getFirstPollOffsetStrategy();
      doReturn(map0).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(int0).when(kafkaSpoutConfig0).getMaxTupleRetries();
      doReturn((long)int0).when(kafkaSpoutConfig0).getOffsetsCommitPeriodMs();
      doReturn(kafkaSpoutRetryService0).when(kafkaSpoutConfig0).getRetryService();
      doReturn(kafkaSpoutTuplesBuilder0).when(kafkaSpoutConfig0).getTuplesBuilder();
      doReturn(boolean0).when(kafkaSpoutConfig0).isConsumerAutoCommitMode();
      KafkaSpout<OffsetAndMetadata, AbstractMap.SimpleEntry<KafkaSpoutStreamsWildcardTopics, TopicPartition>> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, AbstractMap.SimpleEntry<KafkaSpoutStreamsWildcardTopics, TopicPartition>>(kafkaSpoutConfig0);
      Map<DelegationTokenIdentifier, Integer> map1 = null;
      Object[] objectArray0 = new Object[0];
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      StormTopology stormTopology0 = new StormTopology(persistentArrayMap0, persistentArrayMap0, persistentArrayMap0);
      StormTopology stormTopology1 = new StormTopology(stormTopology0);
      String string1 = "Partitions reassignment. [consumer-group={}, consumer={}, topic-partitions={}]";
      String string2 = "q>Mxx|!";
      long long0 = 0L;
      Optional<Integer> optional0 = Optional.ofNullable((Integer) kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      String string3 = "";
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(long0, optional0, string3);
      int int1 = 2868;
      TopicPartition topicPartition0 = new TopicPartition(string3, int1);
      MapEntry mapEntry0 = new MapEntry(offsetAndMetadata0, topicPartition0);
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      TopologyContext topologyContext0 = new TopologyContext(stormTopology1, stormTopology0.metaDataMap, persistentArrayMap0, persistentArrayMap0, persistentArrayMap0, string1, string2, string2, (Integer) kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS, (Integer) kafkaSpoutConfig0.DEFAULT_MAX_RETRIES, mapEntry0, persistentArrayMap0, persistentArrayMap0, persistentArrayMap0, persistentArrayMap0, atomicBoolean0);
      KafkaSpoutStreams kafkaSpoutStreams1 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams1).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector(spoutOutputCollector0);
      kafkaSpout0.open(map1, topologyContext0, spoutOutputCollector1);
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      KafkaSpoutStreams kafkaSpoutStreams0 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<Integer, PersistentTreeMap.Seq> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, PersistentTreeMap.Seq>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, PersistentTreeMap.Seq> kafkaSpout0 = new KafkaSpout<Integer, PersistentTreeMap.Seq>(kafkaSpoutConfig0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      kafkaSpout0.declareOutputFields(outputFieldsGetter0);
      KafkaSpoutConfig<TopicPartition, KafkaSpoutMessageId> kafkaSpoutConfig1 = (KafkaSpoutConfig<TopicPartition, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, KafkaSpoutMessageId> kafkaSpout1 = new KafkaSpout<TopicPartition, KafkaSpoutMessageId>(kafkaSpoutConfig1);
      PersistentTreeMap persistentTreeMap0 = null;
      try {  
      persistentTreeMap0 = PersistentTreeMap.EMPTY;
      } catch(NoClassDefFoundError e) {}
  }
}
