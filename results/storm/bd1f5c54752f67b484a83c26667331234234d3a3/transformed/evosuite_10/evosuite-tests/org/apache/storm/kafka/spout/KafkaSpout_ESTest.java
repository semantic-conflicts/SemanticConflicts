/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 09:11:29 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.EnumerationSeq;
import clojure.lang.PersistentTreeMap;
import clojure.lang.Repeat;
import java.util.Enumeration;
import java.util.Map;
import java.util.Optional;
import java.util.PriorityQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.internals.RecordHeaders;
import org.apache.kafka.common.record.TimestampType;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.storm.generated.DRPCRequest;
import org.apache.storm.generated.StormTopology;
import org.apache.storm.kafka.spout.KafkaSpout;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutMessageId;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsGetter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpout_ESTest extends KafkaSpout_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, Integer> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, Integer>();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getValueDeserializer();
      // Undeclared exception!
      try { 
        kafkaConsumerFactoryDefault0.createConsumer(kafkaSpoutConfig1);
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      KafkaSpout<OffsetAndMetadata, Object> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, Object>();
      // Undeclared exception!
      try { 
        kafkaSpout0.commitOffsetsForAckedTuples();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      KafkaSpout<Integer, Object> kafkaSpout0 = new KafkaSpout<Integer, Object>();
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpout_OffsetEntry0.initialFetchOffset);
      boolean boolean0 = kafkaSpout_OffsetEntry1.isEmpty();
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout0.new OffsetEntry();
      String string0 = "[P\"]yGd/-}FF3v";
      long long0 = 4700L;
      long long1 = (-405L);
      TimestampType timestampType0 = TimestampType.LOG_APPEND_TIME;
      Long long2 = new Long(kafkaSpout_OffsetEntry1.initialFetchOffset);
      Long long3 = Long.getLong(string0, long2);
      Object object0 = new Object();
      PriorityQueue<Header> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Header>(kafkaSpout0.maxRetries);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Object> kafkaSpout0 = new KafkaSpout<String, Object>(kafkaSpoutConfig0);
      String string0 = "";
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpoutConfig0.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      String string1 = "";
      int int0 = 0;
      long long0 = 1160L;
      TimestampType timestampType0 = TimestampType.CREATE_TIME;
      long long1 = 1L;
      int int1 = 0;
      KafkaSpoutStreamsNamedTopics kafkaSpoutStreamsNamedTopics0 = mock(KafkaSpoutStreamsNamedTopics.class, new ViolatedAssumptionAnswer());
      String string2 = "";
      int int2 = (-211);
      long long2 = 0L;
      long long3 = 4096L;
      TimestampType timestampType1 = TimestampType.LOG_APPEND_TIME;
      String string3 = "j6b[";
      Long long4 = Long.getLong(string3);
      int int3 = 29;
      KafkaSpoutMessageId kafkaSpoutMessageId0 = null;
      Repeat repeat0 = Repeat.create((Object) string1);
      RecordHeaders recordHeaders0 = null;
      try {
        recordHeaders0 = new RecordHeaders(repeat0);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.ASeq", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      KafkaSpout<Integer, KafkaSpoutMessageId> kafkaSpout0 = null;
      KafkaSpout<Delayed, KafkaSpoutMessageId> kafkaSpout1 = new KafkaSpout<Delayed, KafkaSpoutMessageId>();
      PersistentTreeMap persistentTreeMap0 = PersistentTreeMap.EMPTY;
      Object object0 = null;
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Object, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<Object, KafkaSpoutMessageId>(kafkaSpoutConfig0);
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      boolean boolean0 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      KafkaConsumerFactoryDefault<KafkaSpout<String, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsNamedTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpout<String, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsNamedTopics>();
      KafkaSpout<KafkaSpout<String, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsNamedTopics> kafkaSpout1 = new KafkaSpout<KafkaSpout<String, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsNamedTopics>(kafkaSpout0.kafkaSpoutConfig, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout1.deactivate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, Integer> kafkaSpoutConfig0 = null;
      KafkaSpout<OffsetAndMetadata, Integer> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, Integer>(kafkaSpoutConfig0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }
}
