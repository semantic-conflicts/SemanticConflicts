/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 08:07:20 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.APersistentVector;
import clojure.lang.ArraySeq;
import clojure.lang.IPersistentMap;
import clojure.lang.IRef;
import clojure.lang.ISeq;
import clojure.lang.IteratorSeq;
import clojure.lang.MapEntry;
import clojure.lang.MultiFn;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentTreeMap;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.Map;
import java.util.NavigableSet;
import java.util.TreeSet;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.internals.RecordHeaders;
import org.apache.kafka.common.record.TimestampType;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.storm.generated.Nimbus;
import org.apache.storm.generated.StormTopology;
import org.apache.storm.kafka.spout.KafkaSpout;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutMessageId;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsGetter;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpout_ESTest extends KafkaSpout_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      KafkaSpout<TopicPartition, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<TopicPartition, KafkaSpoutMessageId>();
      // Undeclared exception!
      try { 
        kafkaSpout0.emit();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpout<Nimbus.deactivate_args._Fields, String>, KafkaSpout.OffsetEntry> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout<Nimbus.deactivate_args._Fields, String>, KafkaSpout.OffsetEntry>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpout<Nimbus.deactivate_args._Fields, String>, KafkaSpout.OffsetEntry> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpout<Nimbus.deactivate_args._Fields, String>, KafkaSpout.OffsetEntry>();
      KafkaSpout<KafkaSpout<Nimbus.deactivate_args._Fields, String>, KafkaSpout.OffsetEntry> kafkaSpout0 = new KafkaSpout<KafkaSpout<Nimbus.deactivate_args._Fields, String>, KafkaSpout.OffsetEntry>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.commitOffsetsForAckedTuples();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      KafkaSpoutConfig<String, AbstractMap.SimpleImmutableEntry<String, Object>> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, AbstractMap.SimpleImmutableEntry<String, Object>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<String, AbstractMap.SimpleImmutableEntry<String, Object>> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<String, AbstractMap.SimpleImmutableEntry<String, Object>>();
      KafkaSpout<String, AbstractMap.SimpleImmutableEntry<String, Object>> kafkaSpout0 = new KafkaSpout<String, AbstractMap.SimpleImmutableEntry<String, Object>>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.emit();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig<ConsumerRecord<String, KafkaSpoutMessageId>, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<ConsumerRecord<String, KafkaSpoutMessageId>, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<ConsumerRecord<String, KafkaSpoutMessageId>, Object> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<ConsumerRecord<String, KafkaSpoutMessageId>, Object>();
      KafkaSpout<ConsumerRecord<String, KafkaSpoutMessageId>, Object> kafkaSpout0 = new KafkaSpout<ConsumerRecord<String, KafkaSpoutMessageId>, Object>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      long long0 = 0L;
      long long1 = 51L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(long0, long1, timeUnit0);
      long long2 = kafkaSpout_Timer0.period();
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      kafkaSpout0.kafkaSpoutConfig = kafkaSpoutConfig0;
      // Undeclared exception!
      try { 
        kafkaSpout0.doSeekRetriableTopicPartitions();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      String string0 = "}_LW1x";
      int int0 = 5;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      boolean boolean0 = topicPartition0.equals(kafkaSpout_OffsetComparator0);
      boolean boolean1 = topicPartition0.equals(kafkaSpout_OffsetComparator0);
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, int0);
      int int1 = kafkaSpout_OffsetComparator0.compare(kafkaSpoutMessageId0, kafkaSpoutMessageId0);
      KafkaSpout<Delayed, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<Delayed, KafkaSpoutStreamsNamedTopics>();
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpout.OffsetEntry> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpout.OffsetEntry>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      KafkaConsumerFactoryDefault<KafkaSpoutMessageId, KafkaSpout.OffsetEntry> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutMessageId, KafkaSpout.OffsetEntry>();
      KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpout.OffsetEntry> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpout.OffsetEntry>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig1).getValueDeserializer();
      // Undeclared exception!
      try { 
        kafkaConsumerFactoryDefault0.createConsumer(kafkaSpoutConfig1);
      } catch(RuntimeException e) {
         //
         // Missing required configuration \"key.deserializer\" which has no default value.
         //
         verifyException("org.apache.kafka.common.config.ConfigDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      KafkaSpout<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<Object, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      ArraySeq arraySeq0 = ArraySeq.create();
      // Undeclared exception!
      try { 
        PersistentTreeMap.create((Comparator) kafkaSpout0.OFFSET_COMPARATOR, (ISeq) arraySeq0);
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = null;
      KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutMessageId> kafkaSpoutConfig0 = null;
      KafkaConsumerFactoryDefault<Object, KafkaSpoutMessageId> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Object, KafkaSpoutMessageId>();
      KafkaSpout<Object, KafkaSpoutMessageId> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<Object, KafkaSpoutMessageId>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpout<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<Object, KafkaSpoutStreamsWildcardTopics>();
      String string0 = "1";
      int int0 = (-253);
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      long long0 = 2250L;
      String string1 = topicPartition0.toString();
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry0.findNextCommitOffset();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      KafkaSpout<String, String> kafkaSpout0 = new KafkaSpout<String, String>();
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      String string0 = "";
      long long0 = (-2204L);
      long long1 = 1025L;
      TimestampType timestampType0 = TimestampType.NO_TIMESTAMP_TYPE;
      int int0 = 4;
      Header[] headerArray0 = null;
      RecordHeaders recordHeaders0 = new RecordHeaders(headerArray0);
      ConsumerRecord<TopicPartition, String> consumerRecord0 = new ConsumerRecord<TopicPartition, String>(string0, kafkaSpout0.maxRetries, long0, long1, timestampType0, (Long) kafkaSpout_OffsetEntry0.committedOffset, kafkaSpout0.maxRetries, int0, kafkaSpout_OffsetEntry0.tp, string0, recordHeaders0);
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(consumerRecord0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      Fields fields0 = new Fields(stringArray0);
      String string1 = null;
      // Undeclared exception!
      try { 
        Pattern.compile(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutMessageId, OffsetAndMetadata> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutMessageId, OffsetAndMetadata>();
      KafkaSpout<KafkaSpoutMessageId, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, OffsetAndMetadata>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      // Undeclared exception!
      try { 
        kafkaSpout0.commitOffsetsForAckedTuples();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, Integer> kafkaSpoutConfig0 = null;
      KafkaConsumerFactoryDefault<KafkaSpoutMessageId, Integer> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutMessageId, Integer>();
      KafkaSpout<KafkaSpoutMessageId, Integer> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, Integer>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }
}
