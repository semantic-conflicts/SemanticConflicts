/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 07:20:50 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.Keyword;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentTreeMap;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import java.util.regex.Pattern;
import org.apache.kafka.common.record.TimestampType;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.kafka.common.serialization.IntegerDeserializer;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTupleBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilderWildcardTopics;
import org.apache.storm.kafka.spout.SerializableDeserializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpoutConfig_ESTest extends KafkaSpoutConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, TimeUnit> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, TimeUnit>();
      String string0 = kafkaSpoutConfig0.toString();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, String>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig0.firstPollOffsetStrategy);
      KafkaSpoutConfig<Integer, TimeUnit> kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, TimeUnit>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.isConsumerAutoCommitMode();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object>();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String>();
      Map<String, Object> map0 = kafkaSpoutConfig0.getKafkaProps();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      SerializableDeserializer<KafkaSpoutStreamsNamedTopics> serializableDeserializer0 = null;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setValueDeserializer(serializableDeserializer0);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setOffsetCommitPeriodMs(kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, Object>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig1.getFirstPollOffsetStrategy();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig2 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object>();
      long long0 = kafkaSpoutConfig2.getPollTimeoutMs();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createWithCheck(objectArray0);
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig0.getKafkaSpoutStreams();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>(persistentArrayMap0, kafkaSpoutStreams0, kafkaSpoutConfig0.tuplesBuilder, kafkaSpoutConfig0.retryService);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object>();
      SerializableDeserializer<KafkaSpoutStreamsWildcardTopics> serializableDeserializer0 = null;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig_Builder2 = null;
      try {
        kafkaSpoutConfig_Builder2 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer>(kafkaSpoutConfig_Builder1.kafkaProps, kafkaSpoutConfig_Builder1.kafkaSpoutStreams, kafkaSpoutConfig_Builder0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object>();
      String string0 = "enable.auto.commit";
      KafkaSpoutStreamsNamedTopics kafkaSpoutStreamsNamedTopics0 = null;
      long long0 = 2147483630L;
      TimestampType timestampType0 = TimestampType.CREATE_TIME;
      int int0 = 2258;
      int int1 = 117;
      String string1 = "LATEST";
      int int2 = 45;
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = int2;
      KafkaSpoutConfig<Integer, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Integer>();
      kafkaSpoutConfig0.offsetCommitPeriodMs = (long) int1;
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, Object>();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig2 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object>();
      long long1 = kafkaSpoutConfig2.getOffsetsCommitPeriodMs();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.getConsumerGroupId();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      KafkaSpoutTupleBuilder<Integer, Integer> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Integer> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Integer>(kafkaSpoutTupleBuilder0);
      long long0 = 10L;
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Integer>();
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Integer>();
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(kafkaSpoutConfig0.DEFAULT_POLL_TIMEOUT_MS);
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setValueDeserializer(kafkaSpoutConfig_Builder0.valueDeserializer);
      long long1 = 0L;
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setOffsetCommitPeriodMs(long1);
      KafkaSpoutTuplesBuilder<Object, Integer> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig_Builder3.tuplesBuilder;
      kafkaSpoutConfig0.tuplesBuilder = kafkaSpoutTuplesBuilder0;
      Deserializer<Integer> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      KafkaSpoutConfig<Integer, Keyword> kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, Keyword>();
      long long2 = kafkaSpoutConfig1.getPollTimeoutMs();
      int int0 = (-732);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer>();
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig2 = new KafkaSpoutConfig<Object, Object>();
      int int1 = kafkaSpoutConfig2.getMaxUncommittedOffsets();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Object>();
      String string0 = kafkaSpoutConfig0.toString();
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, Object>();
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig1.getRetryService();
      KafkaSpoutConfig.Builder<Object, Keyword> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Keyword>(kafkaSpoutConfig1.kafkaProps, kafkaSpoutConfig1.kafkaSpoutStreams, kafkaSpoutConfig1.tuplesBuilder, kafkaSpoutConfig1.retryService);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics>();
      long long0 = 100L;
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setKeyDeserializer(kafkaSpoutConfig_Builder0.valueDeserializer);
      long long1 = 500L;
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setOffsetCommitPeriodMs(long1);
      int int0 = (-2671);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setMaxUncommittedOffsets(int0);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder4.build();
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      IntegerDeserializer integerDeserializer0 = new IntegerDeserializer();
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = (long) kafkaSpoutConfig0.maxUncommittedOffsets;
      kafkaSpoutConfig0.valueDeserializer = (Deserializer<Integer>) integerDeserializer0;
      Deserializer<String> deserializer0 = kafkaSpoutConfig0.getKeyDeserializer();
      System.setCurrentTimeMillis(kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig0.firstPollOffsetStrategy);
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setValueDeserializer(kafkaSpoutConfig_Builder0.valueDeserializer);
      long long0 = 310L;
      kafkaSpoutConfig0.valueDeserializer = (Deserializer<Integer>) kafkaSpoutConfig_Builder0.valueDeserializer;
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setPollTimeoutMs(long0);
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = null;
      try {
        kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig_Builder3);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>();
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      BiFunction<KafkaSpoutStreamsNamedTopics, Object, Keyword> biFunction0 = (BiFunction<KafkaSpoutStreamsNamedTopics, Object, Keyword>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      persistentArrayMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(persistentArrayMap0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(objectArray0);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Keyword> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Keyword>();
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig0.getKafkaSpoutStreams();
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Integer>(persistentHashMap0, kafkaSpoutStreams0, kafkaSpoutConfig0.tuplesBuilder, kafkaSpoutConfig0.retryService);
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig0.getFirstPollOffsetStrategy();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object>();
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig0.getFirstPollOffsetStrategy();
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = null;
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig1 = null;
      try {
        kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, Object>(kafkaSpoutConfig_Builder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics>();
      String string0 = kafkaSpoutConfig0.toString();
      String string1 = kafkaSpoutConfig0.toString();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.isConsumerAutoCommitMode();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, String>();
      long long0 = 2887L;
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setValueDeserializer(kafkaSpoutConfig_Builder0.valueDeserializer);
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setKeyDeserializer(kafkaSpoutConfig_Builder0.keyDeserializer);
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setValueDeserializer(kafkaSpoutConfig_Builder2.valueDeserializer);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Object>();
      long long0 = 10L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(long0);
      int int0 = (-396);
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      kafkaSpoutConfig0.retryService = (KafkaSpoutRetryService) kafkaSpoutRetryExponentialBackoff0;
      long long1 = kafkaSpoutConfig0.getPollTimeoutMs();
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Integer>();
      int int0 = 0;
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = int0;
      long long0 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      KafkaSpoutConfig<TimeUnit, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<TimeUnit, Integer>();
      int int0 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics>();
      long long0 = (-539L);
      kafkaSpoutConfig1.offsetCommitPeriodMs = long0;
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig1.getFirstPollOffsetStrategy();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Object>();
      int int0 = (-312);
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = int0;
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig0.getFirstPollOffsetStrategy();
      KafkaSpoutConfig<Integer, Integer> kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, Integer>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.getConsumerGroupId();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createWithCheck(objectArray0);
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig0.getKafkaSpoutStreams();
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>(persistentArrayMap0, kafkaSpoutStreams0, kafkaSpoutConfig0.tuplesBuilder, kafkaSpoutConfig0.retryService);
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Map<String, Object> map0 = kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(hashMap0);
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Integer>(map0, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Integer>();
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(persistentHashMap0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics>();
      String string0 = kafkaSpoutConfig0.toString();
      Map<String, Object> map0 = kafkaSpoutConfig0.getKafkaProps();
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics>();
      long long0 = 0L;
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Object>();
      KafkaSpoutTuplesBuilder<Integer, Object> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig0.getTuplesBuilder();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics>();
      kafkaSpoutConfig_Builder0.tuplesBuilder = kafkaSpoutConfig0.tuplesBuilder;
      SerializableDeserializer<KafkaSpoutStreamsNamedTopics> serializableDeserializer0 = (SerializableDeserializer<KafkaSpoutStreamsNamedTopics>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      KafkaSpoutConfig<Keyword, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Keyword, Object>();
      int int0 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics>();
      long long0 = kafkaSpoutConfig1.getOffsetsCommitPeriodMs();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer>();
      SerializableDeserializer<KafkaSpoutStreamsWildcardTopics> serializableDeserializer0 = null;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig2 = new KafkaSpoutConfig<Object, String>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig2.setDefaultsAndGetKafkaProps(kafkaSpoutConfig_Builder0.kafkaProps);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      KafkaSpoutConfig<Integer, Keyword> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Keyword>();
      Deserializer<Integer> deserializer0 = kafkaSpoutConfig0.getKeyDeserializer();
      String string0 = "clojure.lang.PersistentArrayMap$Seq";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.clojure.lang.PersistentArrayMap$Seq
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      long long0 = (-2783L);
      kafkaSpoutConfig0.offsetCommitPeriodMs = long0;
      String string0 = kafkaSpoutConfig0.toString();
      KafkaSpoutConfig<Keyword, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<Keyword, KafkaSpoutStreamsNamedTopics>();
      kafkaSpoutConfig1.pollTimeoutMs = kafkaSpoutConfig0.offsetCommitPeriodMs;
      KafkaSpoutTuplesBuilder<Keyword, KafkaSpoutStreamsNamedTopics> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig1.getTuplesBuilder();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig2 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String>();
      Deserializer<KafkaSpoutStreamsNamedTopics> deserializer0 = kafkaSpoutConfig2.getKeyDeserializer();
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      Deserializer<Integer> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      KafkaSpoutConfig.Builder<Keyword, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Keyword, Object>();
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder1 = null;
      try {
        kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      KafkaSpoutConfig.Builder<Integer, TimeUnit> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, TimeUnit>();
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<Object, Object>();
      int int0 = (-2712);
      kafkaSpoutConfig_Builder1.maxUncommittedOffsets = int0;
      long long0 = (-320L);
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setPollTimeoutMs(long0);
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST;
      kafkaSpoutConfig_Builder1.firstPollOffsetStrategy = kafkaSpoutConfig_FirstPollOffsetStrategy0;
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>();
      kafkaSpoutConfig0.pollTimeoutMs = kafkaSpoutConfig_Builder2.pollTimeoutMs;
      int int1 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      long long1 = 616L;
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = long1;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Keyword> kafkaSpoutConfig_Builder3 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Keyword>();
      SerializableDeserializer<Keyword> serializableDeserializer0 = (SerializableDeserializer<Keyword>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Keyword> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setValueDeserializer(serializableDeserializer0);
      long long2 = (-1100L);
      kafkaSpoutConfig0.pollTimeoutMs = long2;
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy1 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Keyword> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy1);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder3.build();
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      KafkaSpoutConfig.Builder<String, TimeUnit> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, TimeUnit>();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.getConsumerGroupId();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      IntegerDeserializer integerDeserializer0 = new IntegerDeserializer();
      kafkaSpoutConfig0.valueDeserializer = (Deserializer<Integer>) integerDeserializer0;
      long long0 = (-2783L);
      kafkaSpoutConfig0.offsetCommitPeriodMs = long0;
      String string0 = kafkaSpoutConfig0.toString();
      KafkaSpoutConfig<Keyword, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<Keyword, KafkaSpoutStreamsNamedTopics>();
      kafkaSpoutConfig1.pollTimeoutMs = kafkaSpoutConfig0.offsetCommitPeriodMs;
      KafkaSpoutTuplesBuilder<Keyword, KafkaSpoutStreamsNamedTopics> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig1.getTuplesBuilder();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig2 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String>();
      long long1 = (-2110L);
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = long1;
      Deserializer<KafkaSpoutStreamsNamedTopics> deserializer0 = kafkaSpoutConfig2.getKeyDeserializer();
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      long long0 = 65535L;
      KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS = long0;
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig1.getKafkaSpoutStreams();
      long long1 = 1441L;
      kafkaSpoutConfig1.pollTimeoutMs = long1;
      int int0 = (-1607);
      kafkaSpoutConfig1.maxUncommittedOffsets = int0;
      kafkaSpoutConfig0.kafkaSpoutStreams = kafkaSpoutStreams0;
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
      long long2 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
      KafkaSpoutConfig<Keyword, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig2 = new KafkaSpoutConfig<Keyword, KafkaSpoutStreamsNamedTopics>();
      String string0 = kafkaSpoutConfig2.toString();
      kafkaSpoutConfig2.offsetCommitPeriodMs = (long) kafkaSpoutConfig1.DEFAULT_MAX_RETRIES;
      KafkaSpoutConfig.DEFAULT_MAX_RETRIES = kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS;
      long long3 = kafkaSpoutConfig2.getPollTimeoutMs();
  }
}
