/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 07:35:20 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.APersistentMap;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentTreeMap;
import clojure.lang.Range;
import clojure.lang.Symbol;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.kafka.common.serialization.IntegerDeserializer;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTupleBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilderWildcardTopics;
import org.apache.storm.kafka.spout.SerializableDeserializer;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpoutConfig_ESTest extends KafkaSpoutConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      IPersistentMap iPersistentMap0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iPersistentMap0;
      objectArray0[1] = (Object) iPersistentMap0;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(iPersistentMap0, objectArray0);
      String[] stringArray0 = new String[0];
      Fields fields0 = new Fields(stringArray0);
      String string0 = "&T_J#fQFK=)";
      int int0 = 6;
      Pattern pattern0 = Pattern.compile(string0, int0);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Integer, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Integer, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(int0);
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder2 = new KafkaSpoutConfig.Builder<Integer, Integer>(kafkaSpoutConfig_Builder1.kafkaProps, kafkaSpoutConfig_Builder0.kafkaSpoutStreams, kafkaSpoutConfig_Builder0.tuplesBuilder, kafkaSpoutConfig_Builder1.retryService);
      KafkaSpoutConfig<Integer, Integer> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Integer>(kafkaSpoutConfig_Builder2);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, String>();
      long long0 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer>();
      long long1 = 0L;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(long1);
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig1.getFirstPollOffsetStrategy();
      KafkaSpoutConfig<TimeUnit, String> kafkaSpoutConfig2 = new KafkaSpoutConfig<TimeUnit, String>();
      String string0 = kafkaSpoutConfig2.toString();
      KafkaSpoutConfig.Builder<Symbol, Object> kafkaSpoutConfig_Builder2 = new KafkaSpoutConfig.Builder<Symbol, Object>();
      KafkaSpoutConfig.Builder<Symbol, Object> kafkaSpoutConfig_Builder3 = new KafkaSpoutConfig.Builder<Symbol, Object>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy1 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST;
      KafkaSpoutConfig.Builder<Symbol, Object> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy1);
      KafkaSpoutConfig.Builder<TimeUnit, Object> kafkaSpoutConfig_Builder5 = null;
      try {
        kafkaSpoutConfig_Builder5 = new KafkaSpoutConfig.Builder<TimeUnit, Object>(kafkaSpoutConfig2.kafkaProps, kafkaSpoutConfig_Builder3.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      KafkaSpoutTupleBuilder<String, Integer> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<String, Integer>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<String, Integer> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, Integer>(kafkaSpoutTupleBuilder0);
      kafkaSpoutConfig0.tuplesBuilder = (KafkaSpoutTuplesBuilder<String, Integer>) kafkaSpoutTuplesBuilderWildcardTopics0;
      IntegerDeserializer integerDeserializer0 = new IntegerDeserializer();
      kafkaSpoutConfig0.valueDeserializer = (Deserializer<Integer>) integerDeserializer0;
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>();
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig_Builder0.retryService;
      kafkaSpoutConfig0.retryService = kafkaSpoutRetryService0;
      KafkaSpoutConfig.DEFAULT_MAX_RETRIES = kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS;
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig0.getFirstPollOffsetStrategy();
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.getConsumerGroupId();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<Symbol, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Symbol, KafkaSpoutStreamsNamedTopics>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST;
      KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics>();
      int int0 = 0;
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = int0;
      Deserializer<KafkaSpoutStreamsWildcardTopics> deserializer0 = kafkaSpoutConfig1.getValueDeserializer();
      String string0 = kafkaSpoutConfig1.toString();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsNamedTopics>();
      long long0 = 1333L;
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig1.getRetryService();
      KafkaSpoutConfig<Symbol, Object> kafkaSpoutConfig2 = new KafkaSpoutConfig<Symbol, Object>();
      long long1 = kafkaSpoutConfig2.getPollTimeoutMs();
      KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig3 = null;
      try {
        kafkaSpoutConfig3 = new KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig_Builder0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      Map<String, Object> map0 = kafkaSpoutConfig0.getKafkaProps();
      KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS = (long) kafkaSpoutConfig0.DEFAULT_MAX_RETRIES;
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, TimeUnit> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, TimeUnit>();
      long long0 = kafkaSpoutConfig1.getPollTimeoutMs();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer>();
      long long1 = 0L;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long1);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Symbol> kafkaSpoutConfig_Builder2 = null;
      try {
        kafkaSpoutConfig_Builder2 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Symbol>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig1.kafkaSpoutStreams, kafkaSpoutConfig_Builder0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      KafkaSpoutConfig<Integer, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, String>();
      String string0 = kafkaSpoutConfig0.toString();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.isConsumerAutoCommitMode();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>();
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object>();
      long long0 = 0L;
      kafkaSpoutConfig0.offsetCommitPeriodMs = long0;
      KafkaSpoutTuplesBuilder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig0.getTuplesBuilder();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer>();
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValueDeserializer(serializableDeserializer0);
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig1 = null;
      try {
        kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutConfig_Builder1);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      Deserializer<KafkaSpoutStreamsNamedTopics> deserializer0 = kafkaSpoutConfig1.getValueDeserializer();
      kafkaSpoutConfig0.valueDeserializer = deserializer0;
      Deserializer<KafkaSpoutStreamsWildcardTopics> deserializer1 = kafkaSpoutConfig0.getKeyDeserializer();
      String string0 = "";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsNamedTopics>();
      SerializableDeserializer<String> serializableDeserializer0 = null;
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      int int0 = (-3654);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(int0);
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST;
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig_Builder3);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Object>();
      long long0 = 1524L;
      KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS = long0;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = hashMap0.clone();
      int int0 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig1.getRetryService();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig1.kafkaProps, kafkaSpoutConfig1.kafkaSpoutStreams, kafkaSpoutConfig1.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics>();
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig0.getKafkaSpoutStreams();
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Integer>(persistentHashMap0, kafkaSpoutStreams0, kafkaSpoutConfig0.tuplesBuilder, kafkaSpoutConfig0.retryService);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) kafkaSpoutConfig0;
      objectArray0[1] = (Object) kafkaSpoutConfig0;
      objectArray0[2] = (Object) kafkaSpoutConfig0;
      objectArray0[3] = (Object) kafkaSpoutConfig0;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(persistentArrayMap0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      Deserializer<Integer> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object>();
      long long0 = 0L;
      kafkaSpoutConfig1.offsetCommitPeriodMs = long0;
      long long1 = kafkaSpoutConfig1.getPollTimeoutMs();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig2 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig2.getFirstPollOffsetStrategy();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsNamedTopics>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy1 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST;
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy1);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setOffsetCommitPeriodMs(kafkaSpoutConfig1.maxUncommittedOffsets);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setKeyDeserializer(kafkaSpoutConfig_Builder0.keyDeserializer);
      KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig3 = null;
      try {
        kafkaSpoutConfig3 = new KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig_Builder3);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer>();
      int int0 = (-4110);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(int0);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer>(kafkaSpoutConfig_Builder1);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object>();
      Map<String, Object> map0 = kafkaSpoutConfig0.kafkaProps;
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics>(map0, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics>();
      int int0 = 158;
      kafkaSpoutConfig0.maxUncommittedOffsets = int0;
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      long long0 = kafkaSpoutConfig0.getPollTimeoutMs();
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, String>();
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(kafkaSpoutConfig0.maxUncommittedOffsets);
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST;
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig1 = null;
      try {
        kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, String>(kafkaSpoutConfig_Builder2);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      KafkaSpoutConfig<Integer, Symbol> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Symbol>();
      Map<String, Object> map0 = kafkaSpoutConfig0.getKafkaProps();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Integer>();
      Map<String, Object> map0 = kafkaSpoutConfig0.getKafkaProps();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>(map0, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder, kafkaSpoutConfig0.retryService);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST;
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy1 = KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST;
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>();
      KafkaSpoutConfig.DEFAULT_MAX_RETRIES = kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS;
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig0.getKafkaSpoutStreams();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder0.build();
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Object>();
      long long0 = 2231L;
      kafkaSpoutConfig0.pollTimeoutMs = long0;
      long long1 = kafkaSpoutConfig0.getPollTimeoutMs();
      Deserializer<Integer> deserializer0 = kafkaSpoutConfig0.getKeyDeserializer();
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      KafkaSpoutConfig<Integer, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, String>();
      long long0 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Map<String, Object> map0 = kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(hashMap0);
      IPersistentMap iPersistentMap0 = null;
      APersistentMap.ValSeq aPersistentMap_ValSeq0 = APersistentMap.ValSeq.createFromMap(iPersistentMap0);
      Fields fields0 = null;
      try {
        fields0 = new Fields(aPersistentMap_ValSeq0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.tuple.Fields", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      KafkaSpoutConfig.Builder<TimeUnit, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<TimeUnit, Integer>();
      long long0 = (-2381L);
      KafkaSpoutConfig.Builder<TimeUnit, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      KafkaSpoutConfig<TimeUnit, Integer> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<TimeUnit, Integer>(kafkaSpoutConfig_Builder1);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics>();
      long long0 = 3606L;
      kafkaSpoutConfig0.pollTimeoutMs = long0;
      long long1 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      ISeq iSeq0 = null;
      PersistentTreeMap persistentTreeMap0 = PersistentTreeMap.create(iSeq0);
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTuplesBuilder<Object, Object> kafkaSpoutTuplesBuilder0 = null;
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = hashMap0.clone();
      kafkaSpoutConfig0.kafkaProps = (Map<String, Object>) hashMap0;
      int int0 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig1.getRetryService();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig1.kafkaProps, kafkaSpoutConfig1.kafkaSpoutStreams, kafkaSpoutConfig1.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Integer>();
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = kafkaSpoutConfig0.DEFAULT_POLL_TIMEOUT_MS;
      PersistentTreeMap persistentTreeMap0 = PersistentTreeMap.EMPTY;
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(persistentTreeMap0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.setDefaultsAndGetKafkaProps(kafkaSpoutConfig0.kafkaProps);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String>();
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Object>();
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig0.getKafkaSpoutStreams();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, String>(persistentArrayMap0, kafkaSpoutStreams0, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      IPersistentMap iPersistentMap0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iPersistentMap0;
      objectArray0[1] = (Object) iPersistentMap0;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(iPersistentMap0, objectArray0);
      String[] stringArray0 = new String[0];
      Fields fields0 = new Fields(stringArray0);
      String string0 = "&T_J#fQFK=)";
      int int0 = 6;
      Pattern pattern0 = Pattern.compile(string0, int0);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Integer, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Integer, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(int0);
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Object>(kafkaSpoutConfig_Builder1);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createAsIfByAssoc(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      String[] stringArray0 = new String[5];
      String string0 = ", maxUncommittedOffsets=";
      stringArray0[0] = string0;
      String string1 = "e*1t";
      stringArray0[1] = string1;
      String string2 = "plFsH4/HE*NA";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "Mp^r6P&?ghM!H;)^p6";
      stringArray0[4] = string4;
      Fields fields0 = new Fields(stringArray0);
      int int0 = 3782;
      Pattern pattern0 = Pattern.compile(stringArray0[3], int0);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Integer, Symbol> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Integer, Symbol>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Symbol> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Symbol>(kafkaSpoutTupleBuilder0);
      KafkaSpoutRetryService kafkaSpoutRetryService0 = null;
      KafkaSpoutConfig.Builder<Integer, Symbol> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Symbol>(persistentArrayMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryService0);
      } catch(IllegalArgumentException e) {
         //
         // Must specify at implementation of retry service
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.isConsumerAutoCommitMode();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Integer>();
      long long0 = 1542L;
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setKeyDeserializer(kafkaSpoutConfig_Builder0.valueDeserializer);
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, Object>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.getConsumerGroupId();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
      IntegerDeserializer integerDeserializer0 = new IntegerDeserializer();
      kafkaSpoutConfig0.valueDeserializer = (Deserializer<Integer>) integerDeserializer0;
      String string0 = kafkaSpoutConfig0.toString();
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Integer>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      KafkaSpoutConfig<Integer, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Integer>();
      long long0 = 30000L;
      KafkaSpoutTupleBuilder<Integer, Integer> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Integer, Integer>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Integer> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Integer>(kafkaSpoutTupleBuilder0);
      kafkaSpoutConfig0.tuplesBuilder = (KafkaSpoutTuplesBuilder<Integer, Integer>) kafkaSpoutTuplesBuilderWildcardTopics0;
      kafkaSpoutConfig0.offsetCommitPeriodMs = long0;
      String string0 = kafkaSpoutConfig0.toString();
      KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics>();
      String string1 = kafkaSpoutConfig1.toString();
      kafkaSpoutConfig1.kafkaSpoutStreams = kafkaSpoutConfig0.kafkaSpoutStreams;
      kafkaSpoutConfig1.keyDeserializer = kafkaSpoutConfig0.valueDeserializer;
      Deserializer<KafkaSpoutStreamsWildcardTopics> deserializer0 = kafkaSpoutConfig1.getValueDeserializer();
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics>();
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setValueDeserializer(kafkaSpoutConfig_Builder0.valueDeserializer);
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST;
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig2 = null;
      try {
        kafkaSpoutConfig2 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig_Builder3);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Symbol> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Symbol>();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) kafkaSpoutConfig0;
      objectArray0[1] = (Object) kafkaSpoutConfig0;
      objectArray0[2] = (Object) kafkaSpoutConfig0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) kafkaSpoutConfig0;
      objectArray0[5] = (Object) kafkaSpoutConfig0;
      objectArray0[6] = (Object) kafkaSpoutConfig0;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(persistentArrayMap0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("clojure.lang.PersistentArrayMap$Iter", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>();
      PersistentTreeMap persistentTreeMap0 = PersistentTreeMap.EMPTY;
      KafkaSpoutTupleBuilder<String, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<String, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(kafkaSpoutTupleBuilder0).buildTuple(nullable(org.apache.kafka.clients.consumer.ConsumerRecord.class));
      KafkaSpoutTuplesBuilderWildcardTopics<String, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, Object>(kafkaSpoutTupleBuilder0);
      ConsumerRecord<String, Object> consumerRecord0 = null;
      List<Object> list0 = kafkaSpoutTuplesBuilderWildcardTopics0.buildTuple(consumerRecord0);
      kafkaSpoutConfig0.tuplesBuilder = (KafkaSpoutTuplesBuilder<String, Object>) kafkaSpoutTuplesBuilderWildcardTopics0;
      String string0 = kafkaSpoutConfig0.toString();
      Deserializer<Object> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }
}
