/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 07:19:28 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.ISeq;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentList;
import clojure.lang.Symbol;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTupleBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilderWildcardTopics;
import org.apache.storm.kafka.spout.SerializableDeserializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpoutConfig_ESTest extends KafkaSpoutConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Integer>();
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValueDeserializer(serializableDeserializer0);
      int int0 = 2624;
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setMaxUncommittedOffsets(int0);
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setFirstPollOffsetStrategy(kafkaSpoutConfig_Builder0.firstPollOffsetStrategy);
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>();
      int int1 = 367;
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = int1;
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig0.getKafkaSpoutStreams();
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, Object>();
      kafkaSpoutConfig1.pollTimeoutMs = kafkaSpoutConfig_Builder0.pollTimeoutMs;
      kafkaSpoutConfig0.tuplesBuilder = kafkaSpoutConfig1.tuplesBuilder;
      Deserializer<Object> deserializer0 = kafkaSpoutConfig1.getValueDeserializer();
      KafkaSpoutConfig<String, String> kafkaSpoutConfig2 = new KafkaSpoutConfig<String, String>();
      long long0 = (-407L);
      kafkaSpoutConfig2.offsetCommitPeriodMs = long0;
      Map<String, Object> map0 = kafkaSpoutConfig2.getKafkaProps();
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics>();
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setPollTimeoutMs(kafkaSpoutConfig0.DEFAULT_POLL_TIMEOUT_MS);
      List<String> list0 = kafkaSpoutConfig2.getSubscribedTopics();
      KafkaSpoutConfig<Symbol, String> kafkaSpoutConfig3 = new KafkaSpoutConfig<Symbol, String>();
      String string0 = kafkaSpoutConfig3.toString();
      long long1 = kafkaSpoutConfig2.getOffsetsCommitPeriodMs();
      KafkaSpoutConfig.Builder<Symbol, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder6 = new KafkaSpoutConfig.Builder<Symbol, KafkaSpoutStreamsNamedTopics>();
      KafkaSpoutConfig.Builder<Symbol, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder7 = kafkaSpoutConfig_Builder6.setPollTimeoutMs(long0);
      long long2 = 200L;
      KafkaSpoutConfig.Builder<Symbol, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder8 = kafkaSpoutConfig_Builder7.setOffsetCommitPeriodMs(long2);
      KafkaSpoutConfig<Symbol, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig4 = null;
      try {
        kafkaSpoutConfig4 = new KafkaSpoutConfig<Symbol, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig_Builder8);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>();
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = kafkaSpoutConfig0.DEFAULT_MAX_RETRIES;
      long long0 = 100L;
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = long0;
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, Object>();
      int int0 = 183;
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = int0;
      int int1 = kafkaSpoutConfig1.getMaxUncommittedOffsets();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, String>();
      long long1 = (-1L);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long1);
      ISeq iSeq0 = null;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(iSeq0);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder2 = null;
      try {
        kafkaSpoutConfig_Builder2 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics>(persistentHashMap0, kafkaSpoutConfig1.kafkaSpoutStreams, kafkaSpoutConfig1.tuplesBuilder);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object>();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, String>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder, kafkaSpoutConfig0.retryService);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      String string0 = kafkaSpoutConfig0.toString();
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig0.getRetryService();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) kafkaSpoutRetryService0;
      objectArray0[2] = (Object) kafkaSpoutRetryService0;
      objectArray0[3] = (Object) kafkaSpoutRetryService0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>(persistentArrayMap0, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Object>();
      long long0 = kafkaSpoutConfig0.getPollTimeoutMs();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer>();
      kafkaSpoutConfig1.valueDeserializer = kafkaSpoutConfig0.valueDeserializer;
      Deserializer<KafkaSpoutStreamsWildcardTopics> deserializer0 = kafkaSpoutConfig1.getKeyDeserializer();
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Integer>();
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      KafkaSpoutConfig<Integer, Integer> kafkaSpoutConfig2 = null;
      try {
        kafkaSpoutConfig2 = new KafkaSpoutConfig<Integer, Integer>(kafkaSpoutConfig_Builder1);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object>();
      KafkaSpoutConfig<Symbol, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<Symbol, String>();
      Deserializer<Symbol> deserializer0 = kafkaSpoutConfig1.getKeyDeserializer();
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig2 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics>();
      Pattern pattern0 = kafkaSpoutConfig2.getTopicWildcardPattern();
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig3 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig3.getFirstPollOffsetStrategy();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics>();
      String string0 = kafkaSpoutConfig0.toString();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(kafkaSpoutConfig0.maxUncommittedOffsets);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setFirstPollOffsetStrategy(kafkaSpoutConfig0.firstPollOffsetStrategy);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setKeyDeserializer(kafkaSpoutConfig_Builder1.valueDeserializer);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setMaxUncommittedOffsets(kafkaSpoutConfig0.maxUncommittedOffsets);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setPollTimeoutMs(kafkaSpoutConfig_Builder2.pollTimeoutMs);
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String>();
      Pattern pattern0 = kafkaSpoutConfig1.getTopicWildcardPattern();
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder6 = new KafkaSpoutConfig.Builder<Object, Object>();
      kafkaSpoutConfig_Builder6.pollTimeoutMs = (long) kafkaSpoutConfig_Builder4.maxUncommittedOffsets;
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig2 = new KafkaSpoutConfig<String, Object>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig2.getConsumerGroupId();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      String string0 = "clojure.lang.PersistentHashMap$ArrayNode$Iter";
      String string1 = "(,]jy kG#pZJ#.i";
      Symbol symbol0 = Symbol.create(string0, string1);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(persistentHashMap0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      kafkaSpoutConfig0.kafkaProps = (Map<String, Object>) hashMap0;
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = kafkaSpoutConfig0.pollTimeoutMs;
      boolean boolean0 = kafkaSpoutConfig0.isConsumerAutoCommitMode();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer>();
      kafkaSpoutConfig1.retryService = kafkaSpoutConfig0.retryService;
      List<String> list1 = kafkaSpoutConfig1.getSubscribedTopics();
      kafkaSpoutConfig0.maxUncommittedOffsets = kafkaSpoutConfig1.maxUncommittedOffsets;
      KafkaSpoutConfig.DEFAULT_MAX_RETRIES = kafkaSpoutConfig0.maxUncommittedOffsets;
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.getConsumerGroupId();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig0.getFirstPollOffsetStrategy();
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, String>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.getConsumerGroupId();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      KafkaSpoutConfig.Builder<String, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, Integer>();
      long long0 = 375L;
      KafkaSpoutConfig.Builder<String, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(long0);
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>(kafkaSpoutConfig_Builder0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String>();
      String string0 = kafkaSpoutConfig0.toString();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.getConsumerGroupId();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Symbol> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Symbol>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.isConsumerAutoCommitMode();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig<Integer, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Integer>();
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = kafkaSpoutConfig0.DEFAULT_POLL_TIMEOUT_MS;
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.isConsumerAutoCommitMode();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      long long0 = (-1L);
      kafkaSpoutConfig0.pollTimeoutMs = long0;
      long long1 = kafkaSpoutConfig0.getPollTimeoutMs();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics>();
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, String>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig1.getFirstPollOffsetStrategy();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      String string0 = "clojure.lang.PersistentHashMap$ArrayNode$Iter";
      String string1 = "(,]jy kG#pZJ#.i";
      Symbol symbol0 = Symbol.create(string0, string1);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(persistentHashMap0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, String>();
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig0.firstPollOffsetStrategy);
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setKeyDeserializer(kafkaSpoutConfig_Builder0.valueDeserializer);
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig1 = null;
      try {
        kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, String>(kafkaSpoutConfig_Builder2);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Object>();
      long long0 = kafkaSpoutConfig0.getPollTimeoutMs();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Integer>(hashMap0, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: {}
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      int int0 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, Object>();
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(int0);
      long long0 = 0L;
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setPollTimeoutMs(long0);
      long long1 = 0L;
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setOffsetCommitPeriodMs(long1);
      KafkaSpoutConfig.Builder<String, KafkaSpoutConfig.FirstPollOffsetStrategy> kafkaSpoutConfig_Builder4 = null;
      try {
        kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<String, KafkaSpoutConfig.FirstPollOffsetStrategy>(kafkaSpoutConfig_Builder2.kafkaProps, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig_Builder3.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object>();
      SerializableDeserializer<KafkaSpoutStreamsWildcardTopics> serializableDeserializer0 = (SerializableDeserializer<KafkaSpoutStreamsWildcardTopics>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      long long0 = 10L;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setOffsetCommitPeriodMs(long0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics>();
      String string0 = kafkaSpoutConfig0.toString();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(kafkaSpoutConfig0.maxUncommittedOffsets);
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST;
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setKeyDeserializer(kafkaSpoutConfig_Builder1.valueDeserializer);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setMaxUncommittedOffsets(kafkaSpoutConfig0.maxUncommittedOffsets);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setPollTimeoutMs(kafkaSpoutConfig_Builder2.pollTimeoutMs);
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String>();
      Pattern pattern0 = kafkaSpoutConfig1.getTopicWildcardPattern();
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder6 = new KafkaSpoutConfig.Builder<Object, Object>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder6.build();
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>();
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
      KafkaSpoutTuplesBuilder<String, Object> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig0.getTuplesBuilder();
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = null;
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, Object>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.setDefaultsAndGetKafkaProps(kafkaSpoutConfig0.kafkaProps);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>();
      long long0 = 0L;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(long0);
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setValueDeserializer(kafkaSpoutConfig_Builder0.valueDeserializer);
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setPollTimeoutMs(kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setFirstPollOffsetStrategy(kafkaSpoutConfig_Builder2.firstPollOffsetStrategy);
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setFirstPollOffsetStrategy(kafkaSpoutConfig_Builder3.firstPollOffsetStrategy);
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, String>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(kafkaSpoutConfig_Builder3.kafkaProps);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      Deserializer<KafkaSpoutStreamsNamedTopics> deserializer0 = (Deserializer<KafkaSpoutStreamsNamedTopics>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(deserializer0).toString();
      kafkaSpoutConfig0.valueDeserializer = deserializer0;
      long long0 = (-172L);
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = long0;
      String string0 = kafkaSpoutConfig0.toString();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(kafkaSpoutConfig_Builder0.kafkaProps);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics>();
      long long0 = (-710L);
      kafkaSpoutConfig0.pollTimeoutMs = long0;
      String string0 = kafkaSpoutConfig0.toString();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(kafkaSpoutConfig0.maxUncommittedOffsets);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setFirstPollOffsetStrategy(kafkaSpoutConfig0.firstPollOffsetStrategy);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder3 = new KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setPollTimeoutMs(kafkaSpoutConfig_Builder2.pollTimeoutMs);
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, String>();
      Pattern pattern0 = kafkaSpoutConfig1.getTopicWildcardPattern();
      Pattern pattern1 = kafkaSpoutConfig1.getTopicWildcardPattern();
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder6 = new KafkaSpoutConfig.Builder<Object, Object>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder6.build();
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      KafkaSpoutConfig<Symbol, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Symbol, KafkaSpoutStreamsWildcardTopics>();
      Deserializer<Symbol> deserializer0 = (Deserializer<Symbol>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(deserializer0).toString();
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = null;
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval1 = new KafkaSpoutRetryExponentialBackoff.TimeInterval(long0, timeUnit0);
      long long1 = 2L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval2 = KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(long1);
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutConfig0.maxUncommittedOffsets, kafkaSpoutRetryExponentialBackoff_TimeInterval1);
      Deserializer<Symbol> deserializer1 = (Deserializer<Symbol>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      kafkaSpoutConfig0.keyDeserializer = deserializer1;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval3 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(kafkaSpoutConfig0.pollTimeoutMs);
      KafkaSpoutTupleBuilder<Symbol, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Symbol, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Symbol, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Symbol, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutTupleBuilder0);
      kafkaSpoutConfig0.tuplesBuilder = (KafkaSpoutTuplesBuilder<Symbol, KafkaSpoutStreamsWildcardTopics>) kafkaSpoutTuplesBuilderWildcardTopics0;
      kafkaSpoutConfig0.retryService = (KafkaSpoutRetryService) kafkaSpoutRetryExponentialBackoff0;
      kafkaSpoutConfig0.keyDeserializer = deserializer0;
      Deserializer<Symbol> deserializer2 = kafkaSpoutConfig0.getKeyDeserializer();
      String string0 = "";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
