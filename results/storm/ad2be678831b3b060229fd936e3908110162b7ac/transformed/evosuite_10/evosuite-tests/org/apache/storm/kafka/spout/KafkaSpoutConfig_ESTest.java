/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 07:52:20 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.APersistentVector;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentStructMap;
import clojure.lang.Range;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.kafka.common.serialization.IntegerDeserializer;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTupleBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilderWildcardTopics;
import org.apache.storm.kafka.spout.SerializableDeserializer;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpoutConfig_ESTest extends KafkaSpoutConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>();
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      Deserializer<KafkaSpoutStreamsWildcardTopics> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<Integer> serializableDeserializer1 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.getConsumerGroupId();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      long long0 = 0L;
      kafkaSpoutConfig0.pollTimeoutMs = long0;
      Deserializer<KafkaSpoutStreamsNamedTopics> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, String>();
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(kafkaSpoutConfig0.offsetCommitPeriodMs);
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setFirstPollOffsetStrategy(kafkaSpoutConfig_Builder0.firstPollOffsetStrategy);
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setKeyDeserializer(kafkaSpoutConfig_Builder0.keyDeserializer);
      Map<String, Object> map0 = null;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Locale.FilteringMode> kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Locale.FilteringMode>();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Locale.FilteringMode> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setOffsetCommitPeriodMs(kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Locale.FilteringMode> kafkaSpoutConfig_Builder6 = kafkaSpoutConfig_Builder5.setPollTimeoutMs(kafkaSpoutConfig0.DEFAULT_POLL_TIMEOUT_MS);
      kafkaSpoutConfig_Builder0.tuplesBuilder = kafkaSpoutConfig_Builder6.tuplesBuilder;
      SerializableDeserializer<Locale.FilteringMode> serializableDeserializer0 = (SerializableDeserializer<Locale.FilteringMode>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Locale.FilteringMode> kafkaSpoutConfig_Builder7 = kafkaSpoutConfig_Builder6.setValueDeserializer(serializableDeserializer0);
      KafkaSpoutConfig.Builder<String, Integer> kafkaSpoutConfig_Builder8 = null;
      try {
        kafkaSpoutConfig_Builder8 = new KafkaSpoutConfig.Builder<String, Integer>(kafkaSpoutConfig_Builder2.kafkaProps, kafkaSpoutConfig_Builder1.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      KafkaSpoutConfig<APersistentVector.SubVector, APersistentVector.SubVector> kafkaSpoutConfig0 = new KafkaSpoutConfig<APersistentVector.SubVector, APersistentVector.SubVector>();
      long long0 = kafkaSpoutConfig0.getPollTimeoutMs();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object>();
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig1.getRetryService();
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, String>();
      SerializableDeserializer<String> serializableDeserializer0 = (SerializableDeserializer<String>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValueDeserializer(serializableDeserializer0);
      int int0 = 335;
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setMaxUncommittedOffsets(int0);
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig2 = null;
      try {
        kafkaSpoutConfig2 = new KafkaSpoutConfig<Object, String>(kafkaSpoutConfig_Builder2);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Object>();
      KafkaSpoutTuplesBuilder<Object, Object> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig0.getTuplesBuilder();
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutConfig.Builder<String, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, Integer>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutStreams0, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      PersistentArrayMap persistentArrayMap1 = new PersistentArrayMap(persistentArrayMap0, objectArray0);
      String[] stringArray0 = new String[8];
      String string0 = ", ratio=";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "%BvhPu;1e";
      stringArray0[2] = string2;
      String string3 = "clojure.lang.ARef";
      stringArray0[3] = string3;
      String string4 = "!M)B3)x9,gra";
      stringArray0[4] = string4;
      String string5 = "!5*}2TMzG9[6+N/`%C-";
      stringArray0[5] = string5;
      String string6 = "Record construction syntax can only be used when *read-eval* == true";
      stringArray0[6] = string6;
      String string7 = "O";
      stringArray0[7] = string7;
      Fields fields0 = new Fields(stringArray0);
      String string8 = null;
      KafkaSpoutStream kafkaSpoutStream0 = null;
      try {
        kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string2, string8);
      } catch(IllegalArgumentException e) {
         //
         // Constructor parameters cannot be null. [outputFields=java.util.ArrayList@0000000004, streamId=%BvhPu;1e, topic=null]
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>();
      KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS = (long) kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      kafkaSpoutConfig0.kafkaProps = (Map<String, Object>) hashMap0;
      KafkaSpoutConfig<Object, APersistentVector.SubVector> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, APersistentVector.SubVector>();
      kafkaSpoutConfig1.retryService = kafkaSpoutConfig0.retryService;
      long long0 = kafkaSpoutConfig1.getOffsetsCommitPeriodMs();
      String string0 = ")Vku&pd$z";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.)Vku&pd$z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics>();
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = kafkaSpoutConfig0.maxUncommittedOffsets;
      int int0 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      KafkaSpoutConfig<String, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, String>();
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig1.kafkaSpoutStreams;
      kafkaSpoutConfig0.kafkaSpoutStreams = kafkaSpoutStreams0;
      long long0 = 0L;
      Map<String, Object> map0 = kafkaSpoutConfig0.getKafkaProps();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig2 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object>();
      String string0 = kafkaSpoutConfig2.toString();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig3 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String>();
      KafkaSpoutStreams kafkaSpoutStreams1 = kafkaSpoutConfig3.getKafkaSpoutStreams();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig4 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      Deserializer<KafkaSpoutStreamsWildcardTopics> deserializer0 = kafkaSpoutConfig4.getKeyDeserializer();
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig5 = new KafkaSpoutConfig<Object, Object>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig5.isConsumerAutoCommitMode();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      KafkaSpoutConfig<Locale.FilteringMode, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Locale.FilteringMode, String>();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String>();
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = kafkaSpoutConfig0.maxUncommittedOffsets;
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig1.getKafkaSpoutStreams();
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = (long) kafkaSpoutConfig1.DEFAULT_MAX_UNCOMMITTED_OFFSETS;
      kafkaSpoutConfig0.kafkaSpoutStreams = kafkaSpoutStreams0;
      int int0 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      String string0 = kafkaSpoutConfig1.toString();
      KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig2 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutStreams kafkaSpoutStreams1 = kafkaSpoutConfig2.getKafkaSpoutStreams();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(kafkaSpoutConfig2.pollTimeoutMs);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setKeyDeserializer(kafkaSpoutConfig_Builder0.keyDeserializer);
      long long0 = 0L;
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setOffsetCommitPeriodMs(long0);
      KafkaSpoutConfig.Builder<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setMaxUncommittedOffsets(kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder4.build();
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck(objectArray0);
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      PersistentHashMap persistentHashMap1 = persistentHashMap0.withMeta(persistentArrayMap0);
      String[] stringArray0 = new String[3];
      String string0 = "I6Jd >[,g!oSukWP";
      stringArray0[0] = string0;
      String string1 = "enable.auto.commit";
      stringArray0[1] = string1;
      String string2 = "F";
      stringArray0[2] = string2;
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile(string1);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, stringArray0[2], pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<String, String> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<String, String>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<String, String> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, String>(kafkaSpoutTupleBuilder0);
      long long0 = 2147483647L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(long0);
      int int0 = (-1);
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>(persistentHashMap1, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      long long1 = 1899L;
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long1);
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<String, String>(kafkaSpoutConfig_Builder1);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String>();
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      Object object0 = new Object();
      boolean boolean0 = persistentHashMap0.containsValue(object0);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(persistentHashMap0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>();
      long long0 = 2622L;
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      kafkaSpoutConfig_Builder0.retryService = kafkaSpoutConfig_Builder1.retryService;
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setValueDeserializer(kafkaSpoutConfig_Builder0.valueDeserializer);
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setKeyDeserializer(kafkaSpoutConfig_Builder0.valueDeserializer);
      long long1 = 0L;
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setOffsetCommitPeriodMs(long1);
      long long2 = 402L;
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setPollTimeoutMs(long2);
      KafkaSpoutConfig.Builder<String, Integer> kafkaSpoutConfig_Builder6 = null;
      try {
        kafkaSpoutConfig_Builder6 = new KafkaSpoutConfig.Builder<String, Integer>(kafkaSpoutConfig_Builder5.kafkaProps, kafkaSpoutConfig_Builder3.kafkaSpoutStreams, kafkaSpoutConfig_Builder4.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      KafkaSpoutConfig<Integer, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, String>();
      Map<String, Object> map0 = kafkaSpoutConfig1.getKafkaProps();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(map0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = null;
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<String, String>(kafkaSpoutConfig_Builder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, String>();
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      long long0 = 0L;
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setPollTimeoutMs(long0);
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>(kafkaSpoutConfig_Builder2);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, String>();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder1.build();
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>();
      long long0 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String>();
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, Object>();
      Deserializer<Object> deserializer0 = kafkaSpoutConfig1.getKeyDeserializer();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      long long0 = (-1608L);
      String string0 = kafkaSpoutConfig0.toString();
      long long1 = (-1189L);
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = long1;
      kafkaSpoutConfig0.offsetCommitPeriodMs = long0;
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.getConsumerGroupId();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Integer>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig0.getFirstPollOffsetStrategy();
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics>();
      long long0 = 10L;
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(long0);
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setValueDeserializer(kafkaSpoutConfig_Builder0.valueDeserializer);
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = null;
      try {
        kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig_Builder2);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics>();
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.isConsumerAutoCommitMode();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      long long0 = (-1552L);
      KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS = long0;
      KafkaSpoutConfig.DEFAULT_MAX_RETRIES = kafkaSpoutConfig0.maxUncommittedOffsets;
      Deserializer<String> deserializer0 = null;
      kafkaSpoutConfig0.keyDeserializer = deserializer0;
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.isConsumerAutoCommitMode();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>();
      Deserializer<Object> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Integer>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics>();
      int int0 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = null;
      try {
        kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig_Builder1);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig0.getKafkaSpoutStreams();
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, String>();
      long long0 = 10000000L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(long0);
      int int0 = 3684;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      kafkaSpoutConfig0.retryService = (KafkaSpoutRetryService) kafkaSpoutRetryExponentialBackoff0;
      String string0 = kafkaSpoutConfig0.toString();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.getConsumerGroupId();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "clojure.lang.Iterate";
      stringArray0[1] = string1;
      Fields fields0 = new Fields(stringArray0);
      int int0 = (-279);
      Pattern pattern0 = Pattern.compile(string0, int0);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string1, pattern0);
      String string2 = "";
      Pattern pattern1 = Pattern.compile(string2);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      String string3 = "";
      Integer integer0 = new Integer(int0);
      Object object0 = hashMap0.put(string3, integer0);
      KafkaSpoutTupleBuilder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Integer, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, KafkaSpoutStreamsNamedTopics>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig_Builder1);
      Map<String, Object> map0 = kafkaSpoutConfig0.getKafkaProps();
      KafkaSpoutConfig.Builder<Locale.FilteringMode, APersistentVector.SubVector> kafkaSpoutConfig_Builder2 = null;
      KafkaSpoutConfig<Locale.FilteringMode, APersistentVector.SubVector> kafkaSpoutConfig1 = null;
      try {
        kafkaSpoutConfig1 = new KafkaSpoutConfig<Locale.FilteringMode, APersistentVector.SubVector>(kafkaSpoutConfig_Builder2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics>();
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>();
      kafkaSpoutConfig1.pollTimeoutMs = (long) kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS;
      long long0 = kafkaSpoutConfig1.getPollTimeoutMs();
      KafkaSpoutConfig.Builder<APersistentVector.SubVector, String> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<APersistentVector.SubVector, String>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig1.kafkaSpoutStreams, kafkaSpoutConfig1.tuplesBuilder);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics>();
      Deserializer<String> deserializer0 = kafkaSpoutConfig0.getKeyDeserializer();
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      KafkaSpoutConfig.Builder<APersistentVector.SubVector, String> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<APersistentVector.SubVector, String>(persistentHashMap0, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder, kafkaSpoutConfig0.retryService);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) kafkaSpoutConfig0;
      objectArray0[1] = (Object) kafkaSpoutConfig0;
      objectArray0[2] = (Object) kafkaSpoutConfig0;
      objectArray0[3] = (Object) kafkaSpoutConfig0;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create((IPersistentMap) persistentArrayMap0, objectArray0);
      Deserializer<Object> deserializer0 = null;
      kafkaSpoutConfig0.valueDeserializer = deserializer0;
      KafkaSpoutConfig.Builder<Locale.FilteringMode, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Locale.FilteringMode, KafkaSpoutStreamsNamedTopics>(persistentHashMap0, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder, kafkaSpoutConfig0.retryService);
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer>();
      Deserializer<Integer> deserializer0 = kafkaSpoutConfig1.getValueDeserializer();
      kafkaSpoutConfig0.keyDeserializer = deserializer0;
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig0.getRetryService();
      kafkaSpoutConfig1.kafkaSpoutStreams = kafkaSpoutConfig0.kafkaSpoutStreams;
      KafkaSpoutConfig<String, String> kafkaSpoutConfig2 = new KafkaSpoutConfig<String, String>();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig2.setDefaultsAndGetKafkaProps(kafkaSpoutConfig1.kafkaProps);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      KafkaSpoutConfig<APersistentVector.SubVector, APersistentVector.SubVector> kafkaSpoutConfig0 = new KafkaSpoutConfig<APersistentVector.SubVector, APersistentVector.SubVector>();
      long long0 = 0L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long0);
      long long1 = (-3283L);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval1 = new KafkaSpoutRetryExponentialBackoff.TimeInterval(long1, timeUnit0);
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutConfig0.maxUncommittedOffsets, kafkaSpoutRetryExponentialBackoff_TimeInterval1);
      kafkaSpoutConfig0.retryService = (KafkaSpoutRetryService) kafkaSpoutRetryExponentialBackoff0;
      Deserializer<APersistentVector.SubVector> deserializer0 = (Deserializer<APersistentVector.SubVector>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(deserializer0).toString();
      kafkaSpoutConfig0.valueDeserializer = deserializer0;
      String string0 = kafkaSpoutConfig0.toString();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object>();
      int int0 = kafkaSpoutConfig1.getMaxUncommittedOffsets();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig2 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String>();
      int int1 = kafkaSpoutConfig2.getMaxUncommittedOffsets();
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Integer>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig2.kafkaSpoutStreams, kafkaSpoutConfig2.tuplesBuilder, kafkaSpoutConfig0.retryService);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      KafkaSpoutConfig<APersistentVector.SubVector, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<APersistentVector.SubVector, Integer>();
      long long0 = (-774L);
      kafkaSpoutConfig0.offsetCommitPeriodMs = long0;
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Integer>();
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig_Builder0.kafkaSpoutStreams;
      kafkaSpoutConfig0.kafkaSpoutStreams = kafkaSpoutStreams0;
      long long1 = (-1311L);
      kafkaSpoutConfig0.offsetCommitPeriodMs = long1;
      String string0 = kafkaSpoutConfig0.toString();
      long long2 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
      KafkaSpoutConfig.Builder<Object, APersistentVector.SubVector> kafkaSpoutConfig_Builder1 = null;
      try {
        kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<Object, APersistentVector.SubVector>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder, kafkaSpoutConfig0.retryService);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      KafkaSpoutConfig<Locale.FilteringMode, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Locale.FilteringMode, Integer>();
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) list0;
      objectArray0[1] = (Object) list0;
      objectArray0[2] = (Object) list0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(persistentArrayMap0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      KafkaSpoutConfig<Integer, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, String>();
      Map<String, Object> map0 = new HashMap<String, Object>();
      Map<String, Object> map1 = kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(map0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Object>();
      KafkaSpoutTuplesBuilder<Object, Object> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig0.getTuplesBuilder();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) kafkaSpoutConfig0;
      objectArray0[1] = (Object) kafkaSpoutTuplesBuilder0;
      objectArray0[2] = (Object) kafkaSpoutTuplesBuilder0;
      objectArray0[3] = (Object) kafkaSpoutConfig0;
      objectArray0[4] = (Object) kafkaSpoutTuplesBuilder0;
      objectArray0[5] = (Object) kafkaSpoutConfig0;
      objectArray0[6] = (Object) kafkaSpoutConfig0;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(persistentArrayMap0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("clojure.lang.PersistentArrayMap$Iter", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck(objectArray0);
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      PersistentHashMap persistentHashMap1 = persistentHashMap0.withMeta(persistentArrayMap0);
      String[] stringArray0 = new String[3];
      String string0 = "I6Jd >[,g!oSukWP";
      stringArray0[0] = string0;
      String string1 = "enable.auto.commit";
      stringArray0[1] = string1;
      String string2 = "F";
      stringArray0[2] = string2;
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile(string1);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, stringArray0[2], pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<String, String> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<String, String>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<String, String> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, String>(kafkaSpoutTupleBuilder0);
      long long0 = 2147483647L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(long0);
      int int0 = (-1);
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff1 = null;
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>(persistentHashMap1, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff1);
      } catch(IllegalArgumentException e) {
         //
         // Must specify at implementation of retry service
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = kafkaSpoutConfig0.maxUncommittedOffsets;
      IntegerDeserializer integerDeserializer0 = new IntegerDeserializer();
      kafkaSpoutConfig0.valueDeserializer = (Deserializer<Integer>) integerDeserializer0;
      Deserializer<Integer> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      kafkaSpoutConfig1.valueDeserializer = kafkaSpoutConfig0.keyDeserializer;
      Pattern pattern0 = kafkaSpoutConfig1.getTopicWildcardPattern();
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.isConsumerAutoCommitMode();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }
}
