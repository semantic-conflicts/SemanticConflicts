/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 14:08:41 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.Symbol;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.record.TimestampType;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTupleBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilderWildcardTopics;
import org.apache.storm.kafka.spout.SerializableDeserializer;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpoutConfig_ESTest extends KafkaSpoutConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray1 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      String string0 = "clojure.lang.PersistentList$EmptyList";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.clojure.lang.PersistentList$EmptyList
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ISeq iSeq0 = null;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(iSeq0);
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics>(persistentHashMap0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilderWildcardTopics0);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck(objectArray0);
      String[] stringArray0 = new String[0];
      Fields fields0 = new Fields(stringArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fields0.forEach(consumer0);
      String string0 = "";
      int int0 = 0;
      Pattern pattern0 = Pattern.compile(string0, int0);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      Vector<Object> vector0 = new Vector<Object>();
      KafkaSpoutTupleBuilder<Keyword, TimeUnit> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Keyword, TimeUnit>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(kafkaSpoutTupleBuilder0).buildTuple(nullable(org.apache.kafka.clients.consumer.ConsumerRecord.class));
      KafkaSpoutTuplesBuilderWildcardTopics<Keyword, TimeUnit> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Keyword, TimeUnit>(kafkaSpoutTupleBuilder0);
      int int1 = 0;
      String string1 = "UBR(8KE1LMai>*9*";
      Symbol symbol0 = Symbol.intern(string1);
      Keyword keyword0 = Keyword.find(symbol0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ConsumerRecord<Keyword, TimeUnit> consumerRecord0 = new ConsumerRecord<Keyword, TimeUnit>(string0, int1, int1, keyword0, timeUnit0);
      List<Object> list0 = kafkaSpoutTuplesBuilderWildcardTopics0.buildTuple(consumerRecord0);
      KafkaSpoutConfig.Builder<Keyword, TimeUnit> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Keyword, TimeUnit>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder0.build();
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck(objectArray0);
      String[] stringArray0 = new String[0];
      Fields fields0 = new Fields(stringArray0);
      String string0 = "";
      int int0 = 0;
      Pattern pattern0 = Pattern.compile(string0);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Keyword, TimeUnit> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Keyword, TimeUnit>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(kafkaSpoutTupleBuilder0).buildTuple(nullable(org.apache.kafka.clients.consumer.ConsumerRecord.class));
      KafkaSpoutTuplesBuilderWildcardTopics<Keyword, TimeUnit> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Keyword, TimeUnit>(kafkaSpoutTupleBuilder0);
      int int1 = 0;
      String string1 = "UBR\\U`K1LMi>*9*";
      String string2 = "Must specify stream associated with each topic. Multiple topics can emit to the same stream";
      int int2 = 850;
      TimestampType timestampType0 = TimestampType.NO_TIMESTAMP_TYPE;
      int int3 = 1;
      int int4 = 3176;
      Keyword keyword0 = Keyword.intern(string1);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ConsumerRecord<Keyword, TimeUnit> consumerRecord0 = new ConsumerRecord<Keyword, TimeUnit>(string2, int2, int1, int0, timestampType0, int0, int3, int4, keyword0, timeUnit0);
      KafkaSpoutTupleBuilder<Keyword, Integer> kafkaSpoutTupleBuilder1 = (KafkaSpoutTupleBuilder<Keyword, Integer>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Keyword, Integer> kafkaSpoutTuplesBuilderWildcardTopics1 = new KafkaSpoutTuplesBuilderWildcardTopics<Keyword, Integer>(kafkaSpoutTupleBuilder1);
      long long0 = 100L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(long0);
      int int5 = 2664;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int5, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutConfig.Builder<Keyword, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Keyword, Integer>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics1, kafkaSpoutRetryExponentialBackoff0);
      SerializableDeserializer<Keyword> serializableDeserializer0 = (SerializableDeserializer<Keyword>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Keyword, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      long long1 = 4483L;
      KafkaSpoutConfig.Builder<Keyword, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setOffsetCommitPeriodMs(long1);
      int int6 = 147;
      KafkaSpoutConfig.Builder<Keyword, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setMaxUncommittedOffsets(int6);
      SerializableDeserializer<Integer> serializableDeserializer1 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Keyword, Integer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setValueDeserializer(serializableDeserializer1);
      long long2 = 220L;
      KafkaSpoutConfig.Builder<Keyword, Integer> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setPollTimeoutMs(long2);
      KafkaSpoutConfig.Builder<Keyword, Integer> kafkaSpoutConfig_Builder6 = kafkaSpoutConfig_Builder5.setOffsetCommitPeriodMs(long2);
      List<Object> list0 = kafkaSpoutTuplesBuilderWildcardTopics0.buildTuple(consumerRecord0);
      Symbol symbol0 = Symbol.intern(string1);
      Symbol symbol1 = Symbol.create(string1);
      Keyword keyword1 = Keyword.find(symbol0);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      KafkaSpoutConfig.Builder<Keyword, TimeUnit> kafkaSpoutConfig_Builder7 = new KafkaSpoutConfig.Builder<Keyword, TimeUnit>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      long long3 = 0L;
      KafkaSpoutConfig.Builder<Keyword, TimeUnit> kafkaSpoutConfig_Builder8 = kafkaSpoutConfig_Builder7.setPollTimeoutMs(long3);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder7.build();
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      String[] stringArray0 = new String[1];
      String string0 = ", maxRetries=";
      stringArray0[0] = string0;
      Fields fields0 = new Fields(stringArray0);
      String string1 = "V/q^";
      Pattern pattern0 = Pattern.compile(string1);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, stringArray0[0], pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      IPersistentMap iPersistentMap0 = persistentHashMap0.without(kafkaSpoutStreamsWildcardTopics0);
      KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsNamedTopics>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.EARLIEST;
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      IPersistentCollection iPersistentCollection0 = persistentHashMap0.empty();
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      long long0 = 10L;
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setPollTimeoutMs(long0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics1 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTuplesBuilder<String, Keyword> kafkaSpoutTuplesBuilder0 = null;
      KafkaSpoutConfig.Builder<String, Keyword> kafkaSpoutConfig_Builder4 = null;
      try {
        kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<String, Keyword>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics1, kafkaSpoutTuplesBuilder0);
      } catch(IllegalArgumentException e) {
         //
         // Must specify at last one tuple builder per topic declared in KafkaSpoutStreams
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTupleBuilder<TimeUnit, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<TimeUnit, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<TimeUnit, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<TimeUnit, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutTupleBuilder0);
      long long0 = 200L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(long0);
      int int0 = 35;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutConfig.Builder<TimeUnit, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<TimeUnit, KafkaSpoutStreamsWildcardTopics>(persistentArrayMap0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Map<String, Object> map0 = null;
      String[] stringArray0 = new String[0];
      Fields fields0 = new Fields(stringArray0);
      String string0 = "Must specify at last one tuple builder per topic declared in KafkaSpoutStreams";
      Pattern pattern0 = Pattern.compile(string0);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string0, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTuplesBuilder<TimeUnit, String> kafkaSpoutTuplesBuilder0 = null;
      KafkaSpoutConfig.Builder<TimeUnit, String> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<TimeUnit, String>(map0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilder0);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck(objectArray0);
      String[] stringArray0 = new String[0];
      Fields fields0 = new Fields(stringArray0);
      String string0 = "";
      int int0 = 0;
      Pattern pattern0 = Pattern.compile(string0, int0);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Keyword, TimeUnit> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Keyword, TimeUnit>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(kafkaSpoutTupleBuilder0).buildTuple(nullable(org.apache.kafka.clients.consumer.ConsumerRecord.class));
      KafkaSpoutTuplesBuilderWildcardTopics<Keyword, TimeUnit> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Keyword, TimeUnit>(kafkaSpoutTupleBuilder0);
      int int1 = 0;
      String string1 = "UBR(8KE1LMai>*9*";
      Symbol symbol0 = Symbol.intern(string1);
      Keyword keyword0 = Keyword.find(symbol0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ConsumerRecord<Keyword, TimeUnit> consumerRecord0 = new ConsumerRecord<Keyword, TimeUnit>(string0, int1, int1, keyword0, timeUnit0);
      List<Object> list0 = kafkaSpoutTuplesBuilderWildcardTopics0.buildTuple(consumerRecord0);
      KafkaSpoutConfig.Builder<Keyword, TimeUnit> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Keyword, TimeUnit>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder0.build();
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTupleBuilder<Integer, Object> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object>(kafkaSpoutTupleBuilder0);
      long long0 = 2653L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(long0);
      int int0 = 508;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(hashMap0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: {}
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(objectArray0);
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTupleBuilder<TimeUnit, TimeUnit> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<TimeUnit, TimeUnit>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<TimeUnit, TimeUnit> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<TimeUnit, TimeUnit>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<TimeUnit, TimeUnit> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<TimeUnit, TimeUnit>(persistentHashMap0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilderWildcardTopics0);
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      String[] stringArray0 = new String[1];
      String string0 = ", maxRetries=";
      stringArray0[0] = string0;
      Fields fields0 = new Fields(stringArray0);
      String string1 = "V/q^";
      Pattern pattern0 = Pattern.compile(string1);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, stringArray0[0], pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      IPersistentMap iPersistentMap0 = persistentHashMap0.without(kafkaSpoutStreamsWildcardTopics0);
      KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsNamedTopics>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      IPersistentCollection iPersistentCollection0 = persistentHashMap0.empty();
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      long long0 = 10L;
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setPollTimeoutMs(long0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics1 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTuplesBuilder<String, Keyword> kafkaSpoutTuplesBuilder0 = null;
      KafkaSpoutConfig.Builder<String, Keyword> kafkaSpoutConfig_Builder3 = null;
      try {
        kafkaSpoutConfig_Builder3 = new KafkaSpoutConfig.Builder<String, Keyword>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics1, kafkaSpoutTuplesBuilder0);
      } catch(IllegalArgumentException e) {
         //
         // Must specify at last one tuple builder per topic declared in KafkaSpoutStreams
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      String[] stringArray0 = new String[1];
      String string0 = ", maxRetries=";
      stringArray0[0] = string0;
      Fields fields0 = new Fields(stringArray0);
      String string1 = "V/q^";
      Pattern pattern0 = Pattern.compile(string1);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, stringArray0[0], pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      String string2 = kafkaSpoutStreamsWildcardTopics0.toString();
      IPersistentMap iPersistentMap0 = persistentHashMap0.without(kafkaSpoutStreamsWildcardTopics0);
      KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsNamedTopics>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      IPersistentCollection iPersistentCollection0 = persistentHashMap0.empty();
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      long long0 = 10L;
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setPollTimeoutMs(long0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics1 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutTupleBuilder1 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutTuplesBuilderWildcardTopics1 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Object>(kafkaSpoutTupleBuilder1);
      long long1 = 681L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long1);
      int int0 = 13;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig_Builder3 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics1, kafkaSpoutTuplesBuilderWildcardTopics1, kafkaSpoutRetryExponentialBackoff0);
      KafkaSpoutTupleBuilder<String, Integer> kafkaSpoutTupleBuilder2 = (KafkaSpoutTupleBuilder<String, Integer>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<String, Integer> kafkaSpoutTuplesBuilderWildcardTopics2 = new KafkaSpoutTuplesBuilderWildcardTopics<String, Integer>(kafkaSpoutTupleBuilder2);
      KafkaSpoutConfig.Builder<String, Integer> kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<String, Integer>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics1, kafkaSpoutTuplesBuilderWildcardTopics2, kafkaSpoutRetryExponentialBackoff0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      String[] stringArray0 = new String[1];
      String string0 = ", maxRetries=";
      stringArray0[0] = string0;
      Fields fields0 = new Fields(stringArray0);
      String string1 = "V/q^";
      Pattern pattern0 = Pattern.compile(string1);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, stringArray0[0], pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      IPersistentMap iPersistentMap0 = persistentHashMap0.without(kafkaSpoutStreamsWildcardTopics0);
      KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsNamedTopics>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      IPersistentCollection iPersistentCollection0 = persistentHashMap0.empty();
      SerializableDeserializer<KafkaSpoutStreamsNamedTopics> serializableDeserializer1 = (SerializableDeserializer<KafkaSpoutStreamsNamedTopics>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValueDeserializer(serializableDeserializer1);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      long long0 = 10L;
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setPollTimeoutMs(long0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics1 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTuplesBuilder<String, Keyword> kafkaSpoutTuplesBuilder0 = null;
      KafkaSpoutConfig.Builder<String, Keyword> kafkaSpoutConfig_Builder4 = null;
      try {
        kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<String, Keyword>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics1, kafkaSpoutTuplesBuilder0);
      } catch(IllegalArgumentException e) {
         //
         // Must specify at last one tuple builder per topic declared in KafkaSpoutStreams
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }
}
