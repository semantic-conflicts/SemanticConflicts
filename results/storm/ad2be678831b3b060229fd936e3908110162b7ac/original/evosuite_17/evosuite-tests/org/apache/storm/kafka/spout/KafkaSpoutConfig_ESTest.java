/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 14:21:27 GMT 2020
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.APersistentMap;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentVector;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.record.TimestampType;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTupleBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilderWildcardTopics;
import org.apache.storm.kafka.spout.SerializableDeserializer;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpoutConfig_ESTest extends KafkaSpoutConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      String[] stringArray0 = new String[1];
      String string0 = "clojure.lang.Keyword";
      stringArray0[0] = string0;
      Fields fields0 = new Fields(stringArray0);
      KafkaSpoutTuplesBuilder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutTuplesBuilder0 = null;
      long long0 = 0L;
      int int0 = 3470;
      long long1 = 368L;
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      int int1 = 39;
      String string1 = "enable.auto.commit";
      Pattern pattern0 = Pattern.compile(stringArray0[0]);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string1, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Integer, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, KafkaSpoutStreamsNamedTopics>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics>(persistentArrayMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setMaxUncommittedOffsets(int0);
      long long2 = (-1L);
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setOffsetCommitPeriodMs(long2);
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setKeyDeserializer(serializableDeserializer0);
      KafkaSpoutTupleBuilder<Object, String> kafkaSpoutTupleBuilder1 = (KafkaSpoutTupleBuilder<Object, String>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Object, String> kafkaSpoutTuplesBuilderWildcardTopics1 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, String>(kafkaSpoutTupleBuilder1);
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(long1);
      int int2 = (-1509);
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int2, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder5 = new KafkaSpoutConfig.Builder<Object, String>(persistentArrayMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics1, kafkaSpoutRetryExponentialBackoff0);
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST;
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder6 = kafkaSpoutConfig_Builder5.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder7 = kafkaSpoutConfig_Builder6.setPollTimeoutMs(int0);
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder8 = kafkaSpoutConfig_Builder7.setOffsetCommitPeriodMs(int0);
      SerializableDeserializer<String> serializableDeserializer1 = (SerializableDeserializer<String>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder9 = kafkaSpoutConfig_Builder8.setValueDeserializer(serializableDeserializer1);
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      objectArray0[4] = object2;
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      String[] stringArray0 = new String[7];
      String string0 = "BP*h9Wg-5.}+VU)7*";
      stringArray0[1] = string0;
      String string1 = "~\\68\\2gga1 _";
      stringArray0[2] = string1;
      String string2 = "UNCOMMITTED_EARLIEST";
      stringArray0[3] = string2;
      String string3 = "KafkaSpoutRetryExponentialBackoff{delay=";
      stringArray0[4] = string3;
      String string4 = "3!aL&;G3$7BV(";
      stringArray0[5] = string4;
      String string5 = ">lI-gw*&ULPg= Q";
      stringArray0[6] = string5;
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile(stringArray0[3]);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string2, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutTupleBuilder0);
      long long0 = 246L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long0);
      int int0 = 1;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics>(persistentArrayMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(int0);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder1.build();
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) persistentHashMap0;
      objectArray0[1] = (Object) persistentHashMap0;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(persistentHashMap0, objectArray0);
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTupleBuilder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Integer, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, KafkaSpoutStreamsNamedTopics>(kafkaSpoutTupleBuilder0);
      long long0 = 0L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long0);
      int int0 = (-721);
      long long1 = 1104L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval1 = new KafkaSpoutRetryExponentialBackoff.TimeInterval(long1, timeUnit0);
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval1);
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics>(persistentArrayMap0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      String[] stringArray0 = new String[4];
      String string0 = "Xe";
      stringArray0[0] = string0;
      String string1 = "P\\98I20Abh9tUfk";
      stringArray0[1] = string1;
      String string2 = ":*M\\T$J2;8";
      stringArray0[2] = string2;
      String string3 = ".T:P|\\Xtgjg:^vmW";
      stringArray0[3] = string3;
      Fields fields0 = new Fields(stringArray0);
      int int0 = 1041;
      Pattern pattern0 = Pattern.compile(string2, int0);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Integer, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Integer, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(persistentArrayMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder0.build();
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      int int0 = 1732;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(int0);
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, String>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, String>(kafkaSpoutTupleBuilder0);
      long long0 = 0L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(long0);
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, String> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, String>(hashMap0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: {}
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      String string0 = "Pc&,ENGm0";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.Pc&,ENGm0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      ISeq iSeq0 = null;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck(iSeq0);
      boolean boolean0 = persistentHashMap0.isEmpty();
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTuplesBuilder<Object, String> kafkaSpoutTuplesBuilder0 = null;
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, String>(persistentHashMap0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilder0);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTupleBuilder<PersistentVector, KafkaSpoutStreamsNamedTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<PersistentVector, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<PersistentVector, KafkaSpoutStreamsNamedTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<PersistentVector, KafkaSpoutStreamsNamedTopics>(kafkaSpoutTupleBuilder0);
      String string0 = "*6nt)VYYZ<oJXA";
      Object object0 = hashMap0.put(string0, kafkaSpoutStreams0);
      KafkaSpoutConfig.Builder<PersistentVector, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<PersistentVector, KafkaSpoutStreamsNamedTopics>(hashMap0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilderWildcardTopics0);
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      PersistentArrayMap persistentArrayMap1 = new PersistentArrayMap(persistentArrayMap0, objectArray0);
      String[] stringArray0 = new String[7];
      String string0 = "9J2T$7>ZPXX ";
      stringArray0[0] = string0;
      String string1 = "BP*h9Wg-5.}+VU)7*";
      stringArray0[1] = string1;
      String string2 = "~\\68\\2gga1 _";
      stringArray0[2] = string2;
      String string3 = "UNCOMMITTED_EARLIEST";
      stringArray0[3] = string3;
      String string4 = "KafkaSpoutRetryExponentialBackoff{delay=";
      stringArray0[4] = string4;
      String string5 = "3!aL&;G3$7BV(";
      stringArray0[5] = string5;
      String string6 = ">lI-gw*&ULPg= Q";
      stringArray0[6] = string6;
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile(stringArray0[3]);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string3, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutTupleBuilder0);
      long long0 = 246L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long0);
      int int0 = 1;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics>(persistentArrayMap1, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(int0);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder1.build();
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("clojure.lang.PersistentArrayMap$Iter", e);
      }
  }

  @Test(timeout = 11000)
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      String[] stringArray0 = new String[1];
      String string0 = "clojure.lang.Keyword";
      stringArray0[0] = string0;
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile(string0);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string0, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTuplesBuilder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutTuplesBuilder0 = null;
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = new KafkaSpoutRetryExponentialBackoff.TimeInterval(long0, timeUnit0);
      int int0 = 3470;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer>(persistentArrayMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilder0, kafkaSpoutRetryExponentialBackoff0);
      } catch(IllegalArgumentException e) {
         //
         // Must specify at last one tuple builder per topic declared in KafkaSpoutStreams
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }
}
