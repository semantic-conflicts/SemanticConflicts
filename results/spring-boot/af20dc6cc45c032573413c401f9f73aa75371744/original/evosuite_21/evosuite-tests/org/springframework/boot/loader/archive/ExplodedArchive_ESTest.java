/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 17:07:45 GMT 2020
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.nio.file.Path;
import java.util.Iterator;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.jar.Manifest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchive_ESTest extends ExplodedArchive_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = ".)P`sew]:*(u<J!^6-R";
      File file0 = MockFile.createTempFile(string0, string0);
      String string1 = file0.getCanonicalPath();
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/.)P`sew]:*(u<J!^6-R0.)P`sew]:*(u<J!^6-R
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      String string1 = "9wK?M\"R%YM?$I";
      String string2 = "META-INF";
      String string3 = null;
      File file0 = MockFile.createTempFile(string2, string3);
      MockFile mockFile1 = new MockFile(mockFile0, string1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/server/users");
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      boolean boolean2 = true;
      boolean boolean3 = false;
      boolean boolean4 = true;
      boolean boolean5 = false;
      Manifest manifest0 = explodedArchive0.getManifest();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      boolean boolean6 = false;
      boolean boolean7 = false;
      boolean boolean8 = true;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean6, boolean4, boolean4, boolean7, boolean8).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(FileNotFoundException e) {
         //
         // /tmp/META-INF0.tmp (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "org.springframework.boot.loader.jar.JarFileEntries";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setReadOnly();
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_21/org.springframework.boot.loader.jar.JarFileEntries/org.springframework.boot.loader.jar.JarFileEntries
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      File file0 = mockFile0.getCanonicalFile();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      URL uRL0 = explodedArchive0.getUrl();
      String string1 = explodedArchive0.toString();
      boolean boolean3 = false;
      boolean boolean4 = true;
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Spliterator<Archive.Entry> spliterator0 = explodedArchive0.spliterator();
      String string2 = explodedArchive0.toString();
      Manifest manifest0 = explodedArchive0.getManifest();
      String string3 = explodedArchive0.toString();
      Iterator<Archive.Entry> iterator1 = explodedArchive0.iterator();
      String string4 = explodedArchive0.toString();
      Path path0 = mockFile0.toPath();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean3, boolean1, boolean2).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      URL uRL1 = explodedArchive0.getUrl();
      Iterator<Archive.Entry> iterator2 = explodedArchive0.iterator();
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1977467351 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      String string1 = "9wK?M\"R%YM?$I";
      Spliterator<Archive.Entry> spliterator0 = explodedArchive0.spliterator();
      MockFile mockFile1 = new MockFile(string0);
      boolean boolean1 = mockFile0.renameTo(mockFile1);
      boolean boolean2 = mockFile0.delete();
      boolean boolean3 = true;
      boolean boolean4 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      URI uRI0 = mockFile0.toURI();
      Manifest manifest0 = explodedArchive0.getManifest();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      boolean boolean5 = false;
      boolean boolean6 = false;
      boolean boolean7 = true;
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      String string2 = "9wK?M\"R%YM?$I";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      String string3 = "EJSd^H%?k@";
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string3);
      MockFile mockFile1 = new MockFile(string0);
      boolean boolean2 = mockFile0.renameTo(mockFile1);
      boolean boolean3 = mockFile0.delete();
      boolean boolean4 = true;
      boolean boolean5 = false;
      boolean boolean6 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      URI uRI0 = mockFile0.toURI();
      try { 
        explodedArchive0.getManifest();
      } catch(IOException e) {
         //
         // invalid header field
         //
         verifyException("java.util.jar.Attributes", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "=.4MB?~sE|S+(1%";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder =.4MB?~sE|S+(1%
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "!&c";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = mockFile0.delete();
      boolean boolean1 = false;
      boolean boolean2 = true;
      String string1 = "'tYlGJo?!";
      File file0 = MockFile.createTempFile(string1, string0, (File) mockFile0);
      boolean boolean3 = mockFile0.setExecutable(boolean1, boolean2);
      boolean boolean4 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean4);
      Archive.EntryFilter archive_EntryFilter0 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      String string1 = explodedArchive0.toString();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      String string1 = "$WuF?NB-+ju>n.S:@";
      MockFile mockFile0 = new MockFile(string0, string1);
      boolean boolean0 = mockFile0.mkdir();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Manifest manifest0 = explodedArchive0.getManifest();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      File file0 = null;
      String string0 = "/^qf&\\l";
      MockFile mockFile0 = new MockFile(file0, string0);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /^qf&\\l
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      URL uRL0 = explodedArchive0.getUrl();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      File file0 = mockFile0.getAbsoluteFile();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      String string1 = explodedArchive0.toString();
      Archive.Entry archive_Entry0 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "@GI6\"+ELQPxaU( ";
      String string1 = "Unable to open nested entry '";
      File file0 = MockFile.createTempFile(string0, string1);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/@GI6\"+ELQPxaU( 0Unable to open nested entry '
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      File file0 = null;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      File file0 = mockFile0.getAbsoluteFile();
      boolean boolean0 = false;
      boolean boolean1 = mockFile0.setWritable(boolean0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      String string1 = explodedArchive0.toString();
      Manifest manifest0 = explodedArchive0.getManifest();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Manifest manifest1 = explodedArchive0.getManifest();
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1977467351 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      File file0 = null;
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive0.forEach(consumer0);
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      Spliterator<Archive.Entry> spliterator0 = explodedArchive0.spliterator();
      String string1 = "c";
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive0.forEach(consumer1);
      // Undeclared exception!
      try { 
        MockFile.createTempFile(string0, string1, (File) mockFile0);
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = mockFile0.setReadable(boolean0);
      String string1 = mockFile0.getCanonicalPath();
      boolean boolean3 = true;
      boolean boolean4 = mockFile0.setReadable(boolean1, boolean3);
      File file0 = mockFile0.getCanonicalFile();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      URL uRL0 = explodedArchive0.getUrl();
      String string2 = explodedArchive0.toString();
      boolean boolean5 = true;
      boolean boolean6 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean0, boolean5, boolean5, boolean6).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Spliterator<Archive.Entry> spliterator0 = explodedArchive0.spliterator();
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      String string3 = explodedArchive0.toString();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1977467351 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(archive_EntryFilter1).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1977467351 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = mockFile0.getAbsoluteFile();
      boolean boolean1 = false;
      boolean boolean2 = mockFile0.setWritable(boolean1);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      String string1 = explodedArchive0.toString();
      try { 
        explodedArchive0.getManifest();
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      String string2 = "9wK?M\"R%YM?$I";
      MockFile mockFile1 = new MockFile(string0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/server/users");
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      boolean boolean2 = mockFile0.renameTo(mockFile1);
      boolean boolean3 = mockFile0.delete();
      boolean boolean4 = true;
      boolean boolean5 = false;
      boolean boolean6 = false;
      boolean boolean7 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      URI uRI0 = mockFile0.toURI();
      Manifest manifest0 = explodedArchive0.getManifest();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      boolean boolean8 = false;
      boolean boolean9 = false;
      boolean boolean10 = true;
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      String string3 = explodedArchive0.toString();
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      Archive.Entry archive_Entry1 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      String string1 = "{r$EQel]5-;DXc";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      String string2 = "";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean1 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean1);
      String string3 = "9wK?M\"R%YM?$I";
      MockFile mockFile1 = new MockFile(string0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/server/users");
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      boolean boolean3 = mockFile0.renameTo(mockFile1);
      boolean boolean4 = mockFile0.delete();
      boolean boolean5 = true;
      boolean boolean6 = false;
      boolean boolean7 = false;
      boolean boolean8 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      URI uRI0 = mockFile0.toURI();
      Manifest manifest0 = explodedArchive0.getManifest();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      boolean boolean9 = false;
      boolean boolean10 = false;
      boolean boolean11 = true;
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(archive_EntryFilter1).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      String string4 = explodedArchive0.toString();
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      Archive.Entry archive_Entry1 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      String string2 = "9wK?M\"R%YM?$I";
      String string3 = "META-INF";
      String string4 = null;
      File file0 = MockFile.createTempFile(string3, string4);
      MockFile mockFile1 = new MockFile(mockFile0, string2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/server/users");
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      boolean boolean2 = mockFile0.delete();
      boolean boolean3 = true;
      boolean boolean4 = false;
      boolean boolean5 = true;
      boolean boolean6 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean3, boolean4, boolean5, boolean6).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      Manifest manifest0 = explodedArchive0.getManifest();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      boolean boolean7 = false;
      boolean boolean8 = false;
      boolean boolean9 = true;
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean7, boolean5, boolean5, boolean8, boolean9).when(archive_EntryFilter1).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter1);
      } catch(FileNotFoundException e) {
         //
         // /tmp/META-INF0.tmp (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }
}
