/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 16:56:56 GMT 2020
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.util.Iterator;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.jar.Manifest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchive_ESTest extends ExplodedArchive_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "e01IZpRT\"z7|H=s";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_17/e01IZpRT\"z7|H=s/e01IZpRT\"z7|H=s
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      File file0 = MockFile.createTempFile(string0, string0);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/org.springframework.boot.loader.archive.ExplodedArchive$FileEntry0org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      URI uRI0 = mockFile0.toURI();
      String string1 = "Vo(RuP;)79/^S=C9i:";
      File file0 = MockFile.createTempFile(string1, string1);
      Manifest manifest0 = explodedArchive0.getManifest();
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, boolean2, boolean1, boolean1, boolean2).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      boolean boolean3 = true;
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean2, boolean2, boolean0, boolean3).when(archive_EntryFilter1).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter1);
      } catch(FileNotFoundException e) {
         //
         // /tmp/Vo(RuP;)79/^S=C9i:0Vo(RuP;)79/^S=C9i: (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)32;
      byteArray0[0] = byte0;
      byteArray0[1] = byteArray0[0];
      byte byte1 = (byte)3;
      byteArray0[2] = byte1;
      byte byte2 = (byte)82;
      byteArray0[3] = byte2;
      byte byte3 = (byte)1;
      byteArray0[4] = byte3;
      byte byte4 = (byte) (-124);
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_17");
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string1);
      URI uRI0 = mockFile0.toURI();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Manifest manifest0 = explodedArchive0.getManifest();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, boolean1).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      Manifest manifest1 = explodedArchive0.getManifest();
      String string2 = explodedArchive0.toString();
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1297598253 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      boolean boolean1 = false;
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean2 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      Archive.EntryFilter archive_EntryFilter0 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      File file0 = null;
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = ",\"z$z#!F<7";
      File file0 = MockFile.createTempFile(string0, string0);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/,\"z$z#!F<70,\"z$z#!F<7
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "JlxDa]K]t7X&";
      String string1 = "";
      File file0 = MockFile.createTempFile(string0, string1);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/JlxDa]K]t7X&0
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "J\\I{";
      String string1 = "";
      File file0 = MockFile.createTempFile(string0, string1);
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/J\\I{0
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      String string2 = "OIi/5~7{K";
      File file0 = MockFile.createTempFile(string2, string1);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      String string3 = explodedArchive0.toString();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1297598253 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile1);
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1297598253 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      File file0 = null;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      File file0 = null;
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "";
      String string1 = "MANIFEST.MF";
      MockFile mockFile0 = new MockFile(string0, string1);
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setReadable(boolean0);
      boolean boolean2 = mockFile0.delete();
      boolean boolean3 = true;
      boolean boolean4 = mockFile0.setReadable(boolean3);
      boolean boolean5 = true;
      boolean boolean6 = mockFile0.setExecutable(boolean1);
      boolean boolean7 = mockFile0.mkdir();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean5);
      URL uRL0 = explodedArchive0.getUrl();
      URL uRL1 = explodedArchive0.getUrl();
      String string2 = explodedArchive0.toString();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Archive.EntryFilter archive_EntryFilter0 = null;
      boolean boolean8 = mockFile0.delete();
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      String string3 = explodedArchive0.toString();
      List<Archive> list2 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      List<Archive> list3 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      String string4 = explodedArchive0.toString();
      Iterator<Archive.Entry> iterator1 = explodedArchive0.iterator();
      Iterator<Archive.Entry> iterator2 = explodedArchive0.iterator();
      String string5 = explodedArchive0.toString();
      URL uRL2 = explodedArchive0.getUrl();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      String string1 = mockFile0.getAbsolutePath();
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      Manifest manifest0 = explodedArchive0.getManifest();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1297598253 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "file:!/";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = false;
      boolean boolean1 = mockFile0.setExecutable(boolean0);
      boolean boolean2 = false;
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      boolean boolean3 = mockFile0.renameTo(file0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      Archive.Entry archive_Entry0 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      URI uRI0 = mockFile0.toURI();
      String string1 = "Vo(RuP;)79/^S=C9i:";
      File file0 = MockFile.createTempFile(string1, string1);
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Manifest manifest0 = explodedArchive0.getManifest();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      mockFile1.deleteOnExit();
      boolean boolean0 = true;
      boolean boolean1 = mockFile1.setReadable(boolean0, boolean0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string1 = explodedArchive0.toString();
      explodedArchive0.forEach(consumer0);
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      String string2 = mockFile1.getAbsolutePath();
      Manifest manifest0 = explodedArchive0.getManifest();
      Iterator<Archive.Entry> iterator1 = explodedArchive0.iterator();
      URL uRL0 = explodedArchive0.getUrl();
      String string3 = explodedArchive0.toString();
      boolean boolean2 = false;
      boolean boolean3 = false;
      boolean boolean4 = true;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, boolean2, boolean3, boolean4, boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1297598253 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      URI uRI0 = mockFile0.toURI();
      String string1 = "Vo(RuP;)79/^S=C9i:";
      File file0 = MockFile.createTempFile(string1, string1);
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Manifest manifest0 = explodedArchive0.getManifest();
      boolean boolean0 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      boolean boolean1 = true;
      boolean boolean2 = true;
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean1, boolean1, boolean0, boolean2).when(archive_EntryFilter1).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter1);
      } catch(FileNotFoundException e) {
         //
         // /tmp/Vo(RuP;)79/^S=C9i:0Vo(RuP;)79/^S=C9i: (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)32;
      byteArray0[0] = byte0;
      byte byte1 = (byte)87;
      byteArray0[1] = byte1;
      byte byte2 = (byte)3;
      byteArray0[2] = byte2;
      byte byte3 = (byte)82;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-124);
      byteArray0[5] = byte5;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_17");
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string1);
      URI uRI0 = mockFile0.toURI();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Spliterator<Archive.Entry> spliterator0 = explodedArchive0.spliterator();
      Manifest manifest0 = explodedArchive0.getManifest();
      URL uRL0 = explodedArchive0.getUrl();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      Manifest manifest1 = explodedArchive0.getManifest();
      Manifest manifest2 = explodedArchive0.getManifest();
      String string2 = explodedArchive0.toString();
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1297598253 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)32;
      byteArray0[0] = byte0;
      byte byte1 = (byte)87;
      byteArray0[1] = byte1;
      byte byte2 = (byte)3;
      byteArray0[2] = byte2;
      byte byte3 = (byte)82;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byteArray0[3];
      byte byte5 = (byte) (-124);
      byteArray0[5] = byte5;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_17");
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive";
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      URI uRI0 = mockFile0.toURI();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Spliterator<Archive.Entry> spliterator0 = explodedArchive0.spliterator();
      try { 
        explodedArchive0.getManifest();
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean1);
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean3 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean3);
      Archive.EntryFilter archive_EntryFilter0 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)32;
      byteArray0[0] = byte0;
      byte byte1 = (byte)87;
      byteArray0[1] = byte1;
      byte byte2 = (byte)3;
      byteArray0[2] = byte2;
      byte byte3 = (byte)82;
      byteArray0[3] = byte3;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      byte byte4 = (byte)1;
      byteArray0[2] = byte4;
      byte byte5 = (byte) (-124);
      byteArray0[5] = byte5;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_17");
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive";
      boolean boolean2 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string1);
      URI uRI0 = mockFile0.toURI();
      boolean boolean3 = FileSystemHandling.appendLineToFile(evoSuiteFile1, string1);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Spliterator<Archive.Entry> spliterator0 = explodedArchive0.spliterator();
      try { 
        explodedArchive0.getManifest();
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)32;
      byteArray0[0] = byte0;
      byteArray0[1] = byteArray0[0];
      byte byte1 = (byte)3;
      byte byte2 = (byte)82;
      byte byte3 = (byte)1;
      byteArray0[4] = byte3;
      byteArray0[5] = byteArray0[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_17");
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string1);
      URI uRI0 = mockFile0.toURI();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive0.forEach(consumer0);
      Spliterator<Archive.Entry> spliterator0 = explodedArchive0.spliterator();
      Manifest manifest0 = explodedArchive0.getManifest();
      Spliterator<Archive.Entry> spliterator1 = explodedArchive0.spliterator();
      URL uRL0 = explodedArchive0.getUrl();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, boolean1, false, false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      // Undeclared exception!
      explodedArchive0.getNestedArchives(archive_EntryFilter0);
  }
}
